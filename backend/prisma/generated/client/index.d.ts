
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Target
 * 
 */
export type Target = $Result.DefaultSelection<Prisma.$TargetPayload>
/**
 * Model FinancialRadiograp
 * 
 */
export type FinancialRadiograp = $Result.DefaultSelection<Prisma.$FinancialRadiograpPayload>
/**
 * Model InvestmentPortfolio
 * 
 */
export type InvestmentPortfolio = $Result.DefaultSelection<Prisma.$InvestmentPortfolioPayload>
/**
 * Model Investment
 * 
 */
export type Investment = $Result.DefaultSelection<Prisma.$InvestmentPayload>
/**
 * Model FinancialInstrument
 * 
 */
export type FinancialInstrument = $Result.DefaultSelection<Prisma.$FinancialInstrumentPayload>
/**
 * Model News
 * 
 */
export type News = $Result.DefaultSelection<Prisma.$NewsPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model wallet
 * 
 */
export type wallet = $Result.DefaultSelection<Prisma.$walletPayload>
/**
 * Model WalletTransaction
 * 
 */
export type WalletTransaction = $Result.DefaultSelection<Prisma.$WalletTransactionPayload>
/**
 * Model Administrador
 * 
 */
export type Administrador = $Result.DefaultSelection<Prisma.$AdministradorPayload>
/**
 * Model Support
 * 
 */
export type Support = $Result.DefaultSelection<Prisma.$SupportPayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model Customization
 * 
 */
export type Customization = $Result.DefaultSelection<Prisma.$CustomizationPayload>
/**
 * Model Stock
 * 
 */
export type Stock = $Result.DefaultSelection<Prisma.$StockPayload>
/**
 * Model Price
 * 
 */
export type Price = $Result.DefaultSelection<Prisma.$PricePayload>
/**
 * Model Volume
 * 
 */
export type Volume = $Result.DefaultSelection<Prisma.$VolumePayload>
/**
 * Model Week52
 * 
 */
export type Week52 = $Result.DefaultSelection<Prisma.$Week52Payload>
/**
 * Model Dividend
 * 
 */
export type Dividend = $Result.DefaultSelection<Prisma.$DividendPayload>
/**
 * Model Earnings
 * 
 */
export type Earnings = $Result.DefaultSelection<Prisma.$EarningsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TransactionType: {
  DEPOSIT: 'DEPOSIT',
  WITHDRAWAL: 'WITHDRAWAL',
  TRANSFER: 'TRANSFER'
};

export type TransactionType = (typeof TransactionType)[keyof typeof TransactionType]


export const CurrencyType: {
  PESOS: 'PESOS',
  DOLLARS: 'DOLLARS'
};

export type CurrencyType = (typeof CurrencyType)[keyof typeof CurrencyType]


export const UserRole: {
  USER: 'USER',
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const Status: {
  open: 'open',
  inProgress: 'inProgress',
  closed: 'closed'
};

export type Status = (typeof Status)[keyof typeof Status]

}

export type TransactionType = $Enums.TransactionType

export const TransactionType: typeof $Enums.TransactionType

export type CurrencyType = $Enums.CurrencyType

export const CurrencyType: typeof $Enums.CurrencyType

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.target`: Exposes CRUD operations for the **Target** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Targets
    * const targets = await prisma.target.findMany()
    * ```
    */
  get target(): Prisma.TargetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.financialRadiograp`: Exposes CRUD operations for the **FinancialRadiograp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FinancialRadiograps
    * const financialRadiograps = await prisma.financialRadiograp.findMany()
    * ```
    */
  get financialRadiograp(): Prisma.FinancialRadiograpDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.investmentPortfolio`: Exposes CRUD operations for the **InvestmentPortfolio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InvestmentPortfolios
    * const investmentPortfolios = await prisma.investmentPortfolio.findMany()
    * ```
    */
  get investmentPortfolio(): Prisma.InvestmentPortfolioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.investment`: Exposes CRUD operations for the **Investment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Investments
    * const investments = await prisma.investment.findMany()
    * ```
    */
  get investment(): Prisma.InvestmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.financialInstrument`: Exposes CRUD operations for the **FinancialInstrument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FinancialInstruments
    * const financialInstruments = await prisma.financialInstrument.findMany()
    * ```
    */
  get financialInstrument(): Prisma.FinancialInstrumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.news`: Exposes CRUD operations for the **News** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more News
    * const news = await prisma.news.findMany()
    * ```
    */
  get news(): Prisma.NewsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wallet`: Exposes CRUD operations for the **wallet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wallets
    * const wallets = await prisma.wallet.findMany()
    * ```
    */
  get wallet(): Prisma.walletDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.walletTransaction`: Exposes CRUD operations for the **WalletTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WalletTransactions
    * const walletTransactions = await prisma.walletTransaction.findMany()
    * ```
    */
  get walletTransaction(): Prisma.WalletTransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.administrador`: Exposes CRUD operations for the **Administrador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Administradors
    * const administradors = await prisma.administrador.findMany()
    * ```
    */
  get administrador(): Prisma.AdministradorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.support`: Exposes CRUD operations for the **Support** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Supports
    * const supports = await prisma.support.findMany()
    * ```
    */
  get support(): Prisma.SupportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customization`: Exposes CRUD operations for the **Customization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customizations
    * const customizations = await prisma.customization.findMany()
    * ```
    */
  get customization(): Prisma.CustomizationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stock`: Exposes CRUD operations for the **Stock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stocks
    * const stocks = await prisma.stock.findMany()
    * ```
    */
  get stock(): Prisma.StockDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.price`: Exposes CRUD operations for the **Price** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prices
    * const prices = await prisma.price.findMany()
    * ```
    */
  get price(): Prisma.PriceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.volume`: Exposes CRUD operations for the **Volume** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Volumes
    * const volumes = await prisma.volume.findMany()
    * ```
    */
  get volume(): Prisma.VolumeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.week52`: Exposes CRUD operations for the **Week52** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Week52s
    * const week52s = await prisma.week52.findMany()
    * ```
    */
  get week52(): Prisma.Week52Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dividend`: Exposes CRUD operations for the **Dividend** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Dividends
    * const dividends = await prisma.dividend.findMany()
    * ```
    */
  get dividend(): Prisma.DividendDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.earnings`: Exposes CRUD operations for the **Earnings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Earnings
    * const earnings = await prisma.earnings.findMany()
    * ```
    */
  get earnings(): Prisma.EarningsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.2.1
   * Query Engine version: 4123509d24aa4dede1e864b46351bf2790323b69
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Target: 'Target',
    FinancialRadiograp: 'FinancialRadiograp',
    InvestmentPortfolio: 'InvestmentPortfolio',
    Investment: 'Investment',
    FinancialInstrument: 'FinancialInstrument',
    News: 'News',
    Comment: 'Comment',
    wallet: 'wallet',
    WalletTransaction: 'WalletTransaction',
    Administrador: 'Administrador',
    Support: 'Support',
    Profile: 'Profile',
    Customization: 'Customization',
    Stock: 'Stock',
    Price: 'Price',
    Volume: 'Volume',
    Week52: 'Week52',
    Dividend: 'Dividend',
    Earnings: 'Earnings'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "target" | "financialRadiograp" | "investmentPortfolio" | "investment" | "financialInstrument" | "news" | "comment" | "wallet" | "walletTransaction" | "administrador" | "support" | "profile" | "customization" | "stock" | "price" | "volume" | "week52" | "dividend" | "earnings"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Target: {
        payload: Prisma.$TargetPayload<ExtArgs>
        fields: Prisma.TargetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TargetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TargetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TargetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TargetPayload>
          }
          findFirst: {
            args: Prisma.TargetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TargetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TargetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TargetPayload>
          }
          findMany: {
            args: Prisma.TargetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TargetPayload>[]
          }
          create: {
            args: Prisma.TargetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TargetPayload>
          }
          createMany: {
            args: Prisma.TargetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TargetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TargetPayload>[]
          }
          delete: {
            args: Prisma.TargetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TargetPayload>
          }
          update: {
            args: Prisma.TargetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TargetPayload>
          }
          deleteMany: {
            args: Prisma.TargetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TargetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TargetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TargetPayload>[]
          }
          upsert: {
            args: Prisma.TargetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TargetPayload>
          }
          aggregate: {
            args: Prisma.TargetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTarget>
          }
          groupBy: {
            args: Prisma.TargetGroupByArgs<ExtArgs>
            result: $Utils.Optional<TargetGroupByOutputType>[]
          }
          count: {
            args: Prisma.TargetCountArgs<ExtArgs>
            result: $Utils.Optional<TargetCountAggregateOutputType> | number
          }
        }
      }
      FinancialRadiograp: {
        payload: Prisma.$FinancialRadiograpPayload<ExtArgs>
        fields: Prisma.FinancialRadiograpFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FinancialRadiograpFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialRadiograpPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FinancialRadiograpFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialRadiograpPayload>
          }
          findFirst: {
            args: Prisma.FinancialRadiograpFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialRadiograpPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FinancialRadiograpFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialRadiograpPayload>
          }
          findMany: {
            args: Prisma.FinancialRadiograpFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialRadiograpPayload>[]
          }
          create: {
            args: Prisma.FinancialRadiograpCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialRadiograpPayload>
          }
          createMany: {
            args: Prisma.FinancialRadiograpCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FinancialRadiograpCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialRadiograpPayload>[]
          }
          delete: {
            args: Prisma.FinancialRadiograpDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialRadiograpPayload>
          }
          update: {
            args: Prisma.FinancialRadiograpUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialRadiograpPayload>
          }
          deleteMany: {
            args: Prisma.FinancialRadiograpDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FinancialRadiograpUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FinancialRadiograpUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialRadiograpPayload>[]
          }
          upsert: {
            args: Prisma.FinancialRadiograpUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialRadiograpPayload>
          }
          aggregate: {
            args: Prisma.FinancialRadiograpAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFinancialRadiograp>
          }
          groupBy: {
            args: Prisma.FinancialRadiograpGroupByArgs<ExtArgs>
            result: $Utils.Optional<FinancialRadiograpGroupByOutputType>[]
          }
          count: {
            args: Prisma.FinancialRadiograpCountArgs<ExtArgs>
            result: $Utils.Optional<FinancialRadiograpCountAggregateOutputType> | number
          }
        }
      }
      InvestmentPortfolio: {
        payload: Prisma.$InvestmentPortfolioPayload<ExtArgs>
        fields: Prisma.InvestmentPortfolioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvestmentPortfolioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPortfolioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvestmentPortfolioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPortfolioPayload>
          }
          findFirst: {
            args: Prisma.InvestmentPortfolioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPortfolioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvestmentPortfolioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPortfolioPayload>
          }
          findMany: {
            args: Prisma.InvestmentPortfolioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPortfolioPayload>[]
          }
          create: {
            args: Prisma.InvestmentPortfolioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPortfolioPayload>
          }
          createMany: {
            args: Prisma.InvestmentPortfolioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvestmentPortfolioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPortfolioPayload>[]
          }
          delete: {
            args: Prisma.InvestmentPortfolioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPortfolioPayload>
          }
          update: {
            args: Prisma.InvestmentPortfolioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPortfolioPayload>
          }
          deleteMany: {
            args: Prisma.InvestmentPortfolioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvestmentPortfolioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvestmentPortfolioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPortfolioPayload>[]
          }
          upsert: {
            args: Prisma.InvestmentPortfolioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPortfolioPayload>
          }
          aggregate: {
            args: Prisma.InvestmentPortfolioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvestmentPortfolio>
          }
          groupBy: {
            args: Prisma.InvestmentPortfolioGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvestmentPortfolioGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvestmentPortfolioCountArgs<ExtArgs>
            result: $Utils.Optional<InvestmentPortfolioCountAggregateOutputType> | number
          }
        }
      }
      Investment: {
        payload: Prisma.$InvestmentPayload<ExtArgs>
        fields: Prisma.InvestmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvestmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvestmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>
          }
          findFirst: {
            args: Prisma.InvestmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvestmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>
          }
          findMany: {
            args: Prisma.InvestmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>[]
          }
          create: {
            args: Prisma.InvestmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>
          }
          createMany: {
            args: Prisma.InvestmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvestmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>[]
          }
          delete: {
            args: Prisma.InvestmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>
          }
          update: {
            args: Prisma.InvestmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>
          }
          deleteMany: {
            args: Prisma.InvestmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvestmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvestmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>[]
          }
          upsert: {
            args: Prisma.InvestmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>
          }
          aggregate: {
            args: Prisma.InvestmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvestment>
          }
          groupBy: {
            args: Prisma.InvestmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvestmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvestmentCountArgs<ExtArgs>
            result: $Utils.Optional<InvestmentCountAggregateOutputType> | number
          }
        }
      }
      FinancialInstrument: {
        payload: Prisma.$FinancialInstrumentPayload<ExtArgs>
        fields: Prisma.FinancialInstrumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FinancialInstrumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialInstrumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FinancialInstrumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialInstrumentPayload>
          }
          findFirst: {
            args: Prisma.FinancialInstrumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialInstrumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FinancialInstrumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialInstrumentPayload>
          }
          findMany: {
            args: Prisma.FinancialInstrumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialInstrumentPayload>[]
          }
          create: {
            args: Prisma.FinancialInstrumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialInstrumentPayload>
          }
          createMany: {
            args: Prisma.FinancialInstrumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FinancialInstrumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialInstrumentPayload>[]
          }
          delete: {
            args: Prisma.FinancialInstrumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialInstrumentPayload>
          }
          update: {
            args: Prisma.FinancialInstrumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialInstrumentPayload>
          }
          deleteMany: {
            args: Prisma.FinancialInstrumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FinancialInstrumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FinancialInstrumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialInstrumentPayload>[]
          }
          upsert: {
            args: Prisma.FinancialInstrumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialInstrumentPayload>
          }
          aggregate: {
            args: Prisma.FinancialInstrumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFinancialInstrument>
          }
          groupBy: {
            args: Prisma.FinancialInstrumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<FinancialInstrumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.FinancialInstrumentCountArgs<ExtArgs>
            result: $Utils.Optional<FinancialInstrumentCountAggregateOutputType> | number
          }
        }
      }
      News: {
        payload: Prisma.$NewsPayload<ExtArgs>
        fields: Prisma.NewsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NewsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NewsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          findFirst: {
            args: Prisma.NewsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NewsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          findMany: {
            args: Prisma.NewsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>[]
          }
          create: {
            args: Prisma.NewsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          createMany: {
            args: Prisma.NewsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NewsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>[]
          }
          delete: {
            args: Prisma.NewsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          update: {
            args: Prisma.NewsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          deleteMany: {
            args: Prisma.NewsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NewsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NewsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>[]
          }
          upsert: {
            args: Prisma.NewsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsPayload>
          }
          aggregate: {
            args: Prisma.NewsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNews>
          }
          groupBy: {
            args: Prisma.NewsGroupByArgs<ExtArgs>
            result: $Utils.Optional<NewsGroupByOutputType>[]
          }
          count: {
            args: Prisma.NewsCountArgs<ExtArgs>
            result: $Utils.Optional<NewsCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      wallet: {
        payload: Prisma.$walletPayload<ExtArgs>
        fields: Prisma.walletFieldRefs
        operations: {
          findUnique: {
            args: Prisma.walletFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.walletFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletPayload>
          }
          findFirst: {
            args: Prisma.walletFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.walletFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletPayload>
          }
          findMany: {
            args: Prisma.walletFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletPayload>[]
          }
          create: {
            args: Prisma.walletCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletPayload>
          }
          createMany: {
            args: Prisma.walletCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.walletCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletPayload>[]
          }
          delete: {
            args: Prisma.walletDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletPayload>
          }
          update: {
            args: Prisma.walletUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletPayload>
          }
          deleteMany: {
            args: Prisma.walletDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.walletUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.walletUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletPayload>[]
          }
          upsert: {
            args: Prisma.walletUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletPayload>
          }
          aggregate: {
            args: Prisma.WalletAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWallet>
          }
          groupBy: {
            args: Prisma.walletGroupByArgs<ExtArgs>
            result: $Utils.Optional<WalletGroupByOutputType>[]
          }
          count: {
            args: Prisma.walletCountArgs<ExtArgs>
            result: $Utils.Optional<WalletCountAggregateOutputType> | number
          }
        }
      }
      WalletTransaction: {
        payload: Prisma.$WalletTransactionPayload<ExtArgs>
        fields: Prisma.WalletTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WalletTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WalletTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>
          }
          findFirst: {
            args: Prisma.WalletTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WalletTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>
          }
          findMany: {
            args: Prisma.WalletTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>[]
          }
          create: {
            args: Prisma.WalletTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>
          }
          createMany: {
            args: Prisma.WalletTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WalletTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>[]
          }
          delete: {
            args: Prisma.WalletTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>
          }
          update: {
            args: Prisma.WalletTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>
          }
          deleteMany: {
            args: Prisma.WalletTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WalletTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WalletTransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>[]
          }
          upsert: {
            args: Prisma.WalletTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletTransactionPayload>
          }
          aggregate: {
            args: Prisma.WalletTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWalletTransaction>
          }
          groupBy: {
            args: Prisma.WalletTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<WalletTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.WalletTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<WalletTransactionCountAggregateOutputType> | number
          }
        }
      }
      Administrador: {
        payload: Prisma.$AdministradorPayload<ExtArgs>
        fields: Prisma.AdministradorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdministradorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministradorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdministradorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministradorPayload>
          }
          findFirst: {
            args: Prisma.AdministradorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministradorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdministradorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministradorPayload>
          }
          findMany: {
            args: Prisma.AdministradorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministradorPayload>[]
          }
          create: {
            args: Prisma.AdministradorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministradorPayload>
          }
          createMany: {
            args: Prisma.AdministradorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdministradorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministradorPayload>[]
          }
          delete: {
            args: Prisma.AdministradorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministradorPayload>
          }
          update: {
            args: Prisma.AdministradorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministradorPayload>
          }
          deleteMany: {
            args: Prisma.AdministradorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdministradorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdministradorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministradorPayload>[]
          }
          upsert: {
            args: Prisma.AdministradorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdministradorPayload>
          }
          aggregate: {
            args: Prisma.AdministradorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdministrador>
          }
          groupBy: {
            args: Prisma.AdministradorGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdministradorGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdministradorCountArgs<ExtArgs>
            result: $Utils.Optional<AdministradorCountAggregateOutputType> | number
          }
        }
      }
      Support: {
        payload: Prisma.$SupportPayload<ExtArgs>
        fields: Prisma.SupportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SupportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SupportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportPayload>
          }
          findFirst: {
            args: Prisma.SupportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SupportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportPayload>
          }
          findMany: {
            args: Prisma.SupportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportPayload>[]
          }
          create: {
            args: Prisma.SupportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportPayload>
          }
          createMany: {
            args: Prisma.SupportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SupportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportPayload>[]
          }
          delete: {
            args: Prisma.SupportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportPayload>
          }
          update: {
            args: Prisma.SupportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportPayload>
          }
          deleteMany: {
            args: Prisma.SupportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SupportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SupportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportPayload>[]
          }
          upsert: {
            args: Prisma.SupportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SupportPayload>
          }
          aggregate: {
            args: Prisma.SupportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSupport>
          }
          groupBy: {
            args: Prisma.SupportGroupByArgs<ExtArgs>
            result: $Utils.Optional<SupportGroupByOutputType>[]
          }
          count: {
            args: Prisma.SupportCountArgs<ExtArgs>
            result: $Utils.Optional<SupportCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      Customization: {
        payload: Prisma.$CustomizationPayload<ExtArgs>
        fields: Prisma.CustomizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomizationPayload>
          }
          findFirst: {
            args: Prisma.CustomizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomizationPayload>
          }
          findMany: {
            args: Prisma.CustomizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomizationPayload>[]
          }
          create: {
            args: Prisma.CustomizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomizationPayload>
          }
          createMany: {
            args: Prisma.CustomizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomizationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomizationPayload>[]
          }
          delete: {
            args: Prisma.CustomizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomizationPayload>
          }
          update: {
            args: Prisma.CustomizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomizationPayload>
          }
          deleteMany: {
            args: Prisma.CustomizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomizationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomizationPayload>[]
          }
          upsert: {
            args: Prisma.CustomizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomizationPayload>
          }
          aggregate: {
            args: Prisma.CustomizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomization>
          }
          groupBy: {
            args: Prisma.CustomizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomizationCountArgs<ExtArgs>
            result: $Utils.Optional<CustomizationCountAggregateOutputType> | number
          }
        }
      }
      Stock: {
        payload: Prisma.$StockPayload<ExtArgs>
        fields: Prisma.StockFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StockFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StockFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          findFirst: {
            args: Prisma.StockFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StockFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          findMany: {
            args: Prisma.StockFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>[]
          }
          create: {
            args: Prisma.StockCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          createMany: {
            args: Prisma.StockCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StockCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>[]
          }
          delete: {
            args: Prisma.StockDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          update: {
            args: Prisma.StockUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          deleteMany: {
            args: Prisma.StockDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StockUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StockUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>[]
          }
          upsert: {
            args: Prisma.StockUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          aggregate: {
            args: Prisma.StockAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStock>
          }
          groupBy: {
            args: Prisma.StockGroupByArgs<ExtArgs>
            result: $Utils.Optional<StockGroupByOutputType>[]
          }
          count: {
            args: Prisma.StockCountArgs<ExtArgs>
            result: $Utils.Optional<StockCountAggregateOutputType> | number
          }
        }
      }
      Price: {
        payload: Prisma.$PricePayload<ExtArgs>
        fields: Prisma.PriceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PriceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PricePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PriceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PricePayload>
          }
          findFirst: {
            args: Prisma.PriceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PricePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PriceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PricePayload>
          }
          findMany: {
            args: Prisma.PriceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PricePayload>[]
          }
          create: {
            args: Prisma.PriceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PricePayload>
          }
          createMany: {
            args: Prisma.PriceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PriceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PricePayload>[]
          }
          delete: {
            args: Prisma.PriceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PricePayload>
          }
          update: {
            args: Prisma.PriceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PricePayload>
          }
          deleteMany: {
            args: Prisma.PriceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PriceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PriceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PricePayload>[]
          }
          upsert: {
            args: Prisma.PriceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PricePayload>
          }
          aggregate: {
            args: Prisma.PriceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrice>
          }
          groupBy: {
            args: Prisma.PriceGroupByArgs<ExtArgs>
            result: $Utils.Optional<PriceGroupByOutputType>[]
          }
          count: {
            args: Prisma.PriceCountArgs<ExtArgs>
            result: $Utils.Optional<PriceCountAggregateOutputType> | number
          }
        }
      }
      Volume: {
        payload: Prisma.$VolumePayload<ExtArgs>
        fields: Prisma.VolumeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VolumeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolumePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VolumeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolumePayload>
          }
          findFirst: {
            args: Prisma.VolumeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolumePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VolumeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolumePayload>
          }
          findMany: {
            args: Prisma.VolumeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolumePayload>[]
          }
          create: {
            args: Prisma.VolumeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolumePayload>
          }
          createMany: {
            args: Prisma.VolumeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VolumeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolumePayload>[]
          }
          delete: {
            args: Prisma.VolumeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolumePayload>
          }
          update: {
            args: Prisma.VolumeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolumePayload>
          }
          deleteMany: {
            args: Prisma.VolumeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VolumeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VolumeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolumePayload>[]
          }
          upsert: {
            args: Prisma.VolumeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VolumePayload>
          }
          aggregate: {
            args: Prisma.VolumeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVolume>
          }
          groupBy: {
            args: Prisma.VolumeGroupByArgs<ExtArgs>
            result: $Utils.Optional<VolumeGroupByOutputType>[]
          }
          count: {
            args: Prisma.VolumeCountArgs<ExtArgs>
            result: $Utils.Optional<VolumeCountAggregateOutputType> | number
          }
        }
      }
      Week52: {
        payload: Prisma.$Week52Payload<ExtArgs>
        fields: Prisma.Week52FieldRefs
        operations: {
          findUnique: {
            args: Prisma.Week52FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Week52Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Week52FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Week52Payload>
          }
          findFirst: {
            args: Prisma.Week52FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Week52Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Week52FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Week52Payload>
          }
          findMany: {
            args: Prisma.Week52FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Week52Payload>[]
          }
          create: {
            args: Prisma.Week52CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Week52Payload>
          }
          createMany: {
            args: Prisma.Week52CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Week52CreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Week52Payload>[]
          }
          delete: {
            args: Prisma.Week52DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Week52Payload>
          }
          update: {
            args: Prisma.Week52UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Week52Payload>
          }
          deleteMany: {
            args: Prisma.Week52DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Week52UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.Week52UpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Week52Payload>[]
          }
          upsert: {
            args: Prisma.Week52UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Week52Payload>
          }
          aggregate: {
            args: Prisma.Week52AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWeek52>
          }
          groupBy: {
            args: Prisma.Week52GroupByArgs<ExtArgs>
            result: $Utils.Optional<Week52GroupByOutputType>[]
          }
          count: {
            args: Prisma.Week52CountArgs<ExtArgs>
            result: $Utils.Optional<Week52CountAggregateOutputType> | number
          }
        }
      }
      Dividend: {
        payload: Prisma.$DividendPayload<ExtArgs>
        fields: Prisma.DividendFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DividendFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DividendPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DividendFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DividendPayload>
          }
          findFirst: {
            args: Prisma.DividendFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DividendPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DividendFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DividendPayload>
          }
          findMany: {
            args: Prisma.DividendFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DividendPayload>[]
          }
          create: {
            args: Prisma.DividendCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DividendPayload>
          }
          createMany: {
            args: Prisma.DividendCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DividendCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DividendPayload>[]
          }
          delete: {
            args: Prisma.DividendDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DividendPayload>
          }
          update: {
            args: Prisma.DividendUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DividendPayload>
          }
          deleteMany: {
            args: Prisma.DividendDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DividendUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DividendUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DividendPayload>[]
          }
          upsert: {
            args: Prisma.DividendUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DividendPayload>
          }
          aggregate: {
            args: Prisma.DividendAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDividend>
          }
          groupBy: {
            args: Prisma.DividendGroupByArgs<ExtArgs>
            result: $Utils.Optional<DividendGroupByOutputType>[]
          }
          count: {
            args: Prisma.DividendCountArgs<ExtArgs>
            result: $Utils.Optional<DividendCountAggregateOutputType> | number
          }
        }
      }
      Earnings: {
        payload: Prisma.$EarningsPayload<ExtArgs>
        fields: Prisma.EarningsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EarningsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EarningsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EarningsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EarningsPayload>
          }
          findFirst: {
            args: Prisma.EarningsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EarningsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EarningsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EarningsPayload>
          }
          findMany: {
            args: Prisma.EarningsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EarningsPayload>[]
          }
          create: {
            args: Prisma.EarningsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EarningsPayload>
          }
          createMany: {
            args: Prisma.EarningsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EarningsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EarningsPayload>[]
          }
          delete: {
            args: Prisma.EarningsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EarningsPayload>
          }
          update: {
            args: Prisma.EarningsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EarningsPayload>
          }
          deleteMany: {
            args: Prisma.EarningsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EarningsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EarningsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EarningsPayload>[]
          }
          upsert: {
            args: Prisma.EarningsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EarningsPayload>
          }
          aggregate: {
            args: Prisma.EarningsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEarnings>
          }
          groupBy: {
            args: Prisma.EarningsGroupByArgs<ExtArgs>
            result: $Utils.Optional<EarningsGroupByOutputType>[]
          }
          count: {
            args: Prisma.EarningsCountArgs<ExtArgs>
            result: $Utils.Optional<EarningsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    target?: TargetOmit
    financialRadiograp?: FinancialRadiograpOmit
    investmentPortfolio?: InvestmentPortfolioOmit
    investment?: InvestmentOmit
    financialInstrument?: FinancialInstrumentOmit
    news?: NewsOmit
    comment?: CommentOmit
    wallet?: walletOmit
    walletTransaction?: WalletTransactionOmit
    administrador?: AdministradorOmit
    support?: SupportOmit
    profile?: ProfileOmit
    customization?: CustomizationOmit
    stock?: StockOmit
    price?: PriceOmit
    volume?: VolumeOmit
    week52?: Week52Omit
    dividend?: DividendOmit
    earnings?: EarningsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    comment: number
    Support: number
    wallet: number
    target: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | UserCountOutputTypeCountCommentArgs
    Support?: boolean | UserCountOutputTypeCountSupportArgs
    wallet?: boolean | UserCountOutputTypeCountWalletArgs
    target?: boolean | UserCountOutputTypeCountTargetArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSupportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWalletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: walletWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTargetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TargetWhereInput
  }


  /**
   * Count Type InvestmentPortfolioCountOutputType
   */

  export type InvestmentPortfolioCountOutputType = {
    investments: number
  }

  export type InvestmentPortfolioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    investments?: boolean | InvestmentPortfolioCountOutputTypeCountInvestmentsArgs
  }

  // Custom InputTypes
  /**
   * InvestmentPortfolioCountOutputType without action
   */
  export type InvestmentPortfolioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvestmentPortfolioCountOutputType
     */
    select?: InvestmentPortfolioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InvestmentPortfolioCountOutputType without action
   */
  export type InvestmentPortfolioCountOutputTypeCountInvestmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvestmentWhereInput
  }


  /**
   * Count Type FinancialInstrumentCountOutputType
   */

  export type FinancialInstrumentCountOutputType = {
    Investments: number
  }

  export type FinancialInstrumentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Investments?: boolean | FinancialInstrumentCountOutputTypeCountInvestmentsArgs
  }

  // Custom InputTypes
  /**
   * FinancialInstrumentCountOutputType without action
   */
  export type FinancialInstrumentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialInstrumentCountOutputType
     */
    select?: FinancialInstrumentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FinancialInstrumentCountOutputType without action
   */
  export type FinancialInstrumentCountOutputTypeCountInvestmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvestmentWhereInput
  }


  /**
   * Count Type NewsCountOutputType
   */

  export type NewsCountOutputType = {
    comment: number
  }

  export type NewsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | NewsCountOutputTypeCountCommentArgs
  }

  // Custom InputTypes
  /**
   * NewsCountOutputType without action
   */
  export type NewsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NewsCountOutputType
     */
    select?: NewsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NewsCountOutputType without action
   */
  export type NewsCountOutputTypeCountCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type WalletCountOutputType
   */

  export type WalletCountOutputType = {
    transactions: number
  }

  export type WalletCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | WalletCountOutputTypeCountTransactionsArgs
  }

  // Custom InputTypes
  /**
   * WalletCountOutputType without action
   */
  export type WalletCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletCountOutputType
     */
    select?: WalletCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WalletCountOutputType without action
   */
  export type WalletCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WalletTransactionWhereInput
  }


  /**
   * Count Type StockCountOutputType
   */

  export type StockCountOutputType = {
    Investment: number
  }

  export type StockCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Investment?: boolean | StockCountOutputTypeCountInvestmentArgs
  }

  // Custom InputTypes
  /**
   * StockCountOutputType without action
   */
  export type StockCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StockCountOutputType
     */
    select?: StockCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StockCountOutputType without action
   */
  export type StockCountOutputTypeCountInvestmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvestmentWhereInput
  }


  /**
   * Count Type PriceCountOutputType
   */

  export type PriceCountOutputType = {
    Stock: number
  }

  export type PriceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Stock?: boolean | PriceCountOutputTypeCountStockArgs
  }

  // Custom InputTypes
  /**
   * PriceCountOutputType without action
   */
  export type PriceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PriceCountOutputType
     */
    select?: PriceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PriceCountOutputType without action
   */
  export type PriceCountOutputTypeCountStockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockWhereInput
  }


  /**
   * Count Type VolumeCountOutputType
   */

  export type VolumeCountOutputType = {
    Stock: number
  }

  export type VolumeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Stock?: boolean | VolumeCountOutputTypeCountStockArgs
  }

  // Custom InputTypes
  /**
   * VolumeCountOutputType without action
   */
  export type VolumeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VolumeCountOutputType
     */
    select?: VolumeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VolumeCountOutputType without action
   */
  export type VolumeCountOutputTypeCountStockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockWhereInput
  }


  /**
   * Count Type Week52CountOutputType
   */

  export type Week52CountOutputType = {
    Stock: number
  }

  export type Week52CountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Stock?: boolean | Week52CountOutputTypeCountStockArgs
  }

  // Custom InputTypes
  /**
   * Week52CountOutputType without action
   */
  export type Week52CountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week52CountOutputType
     */
    select?: Week52CountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Week52CountOutputType without action
   */
  export type Week52CountOutputTypeCountStockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockWhereInput
  }


  /**
   * Count Type DividendCountOutputType
   */

  export type DividendCountOutputType = {
    Stock: number
  }

  export type DividendCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Stock?: boolean | DividendCountOutputTypeCountStockArgs
  }

  // Custom InputTypes
  /**
   * DividendCountOutputType without action
   */
  export type DividendCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DividendCountOutputType
     */
    select?: DividendCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DividendCountOutputType without action
   */
  export type DividendCountOutputTypeCountStockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockWhereInput
  }


  /**
   * Count Type EarningsCountOutputType
   */

  export type EarningsCountOutputType = {
    Stock: number
  }

  export type EarningsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Stock?: boolean | EarningsCountOutputTypeCountStockArgs
  }

  // Custom InputTypes
  /**
   * EarningsCountOutputType without action
   */
  export type EarningsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EarningsCountOutputType
     */
    select?: EarningsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EarningsCountOutputType without action
   */
  export type EarningsCountOutputTypeCountStockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    password: string | null
    avatarUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isEmailVerified: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    firstName: string | null
    lastName: string | null
    password: string | null
    avatarUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isEmailVerified: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    firstName: number
    lastName: number
    password: number
    avatarUrl: number
    createdAt: number
    updatedAt: number
    isEmailVerified: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    password?: true
    avatarUrl?: true
    createdAt?: true
    updatedAt?: true
    isEmailVerified?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    password?: true
    avatarUrl?: true
    createdAt?: true
    updatedAt?: true
    isEmailVerified?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    firstName?: true
    lastName?: true
    password?: true
    avatarUrl?: true
    createdAt?: true
    updatedAt?: true
    isEmailVerified?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    firstName: string | null
    lastName: string | null
    password: string
    avatarUrl: string | null
    createdAt: Date
    updatedAt: Date
    isEmailVerified: boolean
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    avatarUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isEmailVerified?: boolean
    comment?: boolean | User$commentArgs<ExtArgs>
    financialRadiographies?: boolean | User$financialRadiographiesArgs<ExtArgs>
    profile?: boolean | User$profileArgs<ExtArgs>
    customization?: boolean | User$customizationArgs<ExtArgs>
    Support?: boolean | User$SupportArgs<ExtArgs>
    wallet?: boolean | User$walletArgs<ExtArgs>
    target?: boolean | User$targetArgs<ExtArgs>
    investmentPortfolio?: boolean | User$investmentPortfolioArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    avatarUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isEmailVerified?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    avatarUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isEmailVerified?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    firstName?: boolean
    lastName?: boolean
    password?: boolean
    avatarUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isEmailVerified?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "firstName" | "lastName" | "password" | "avatarUrl" | "createdAt" | "updatedAt" | "isEmailVerified", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | User$commentArgs<ExtArgs>
    financialRadiographies?: boolean | User$financialRadiographiesArgs<ExtArgs>
    profile?: boolean | User$profileArgs<ExtArgs>
    customization?: boolean | User$customizationArgs<ExtArgs>
    Support?: boolean | User$SupportArgs<ExtArgs>
    wallet?: boolean | User$walletArgs<ExtArgs>
    target?: boolean | User$targetArgs<ExtArgs>
    investmentPortfolio?: boolean | User$investmentPortfolioArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      comment: Prisma.$CommentPayload<ExtArgs>[]
      financialRadiographies: Prisma.$FinancialRadiograpPayload<ExtArgs> | null
      profile: Prisma.$ProfilePayload<ExtArgs> | null
      customization: Prisma.$CustomizationPayload<ExtArgs> | null
      Support: Prisma.$SupportPayload<ExtArgs>[]
      wallet: Prisma.$walletPayload<ExtArgs>[]
      target: Prisma.$TargetPayload<ExtArgs>[]
      investmentPortfolio: Prisma.$InvestmentPortfolioPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      firstName: string | null
      lastName: string | null
      password: string
      avatarUrl: string | null
      createdAt: Date
      updatedAt: Date
      isEmailVerified: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    comment<T extends User$commentArgs<ExtArgs> = {}>(args?: Subset<T, User$commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    financialRadiographies<T extends User$financialRadiographiesArgs<ExtArgs> = {}>(args?: Subset<T, User$financialRadiographiesArgs<ExtArgs>>): Prisma__FinancialRadiograpClient<$Result.GetResult<Prisma.$FinancialRadiograpPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    customization<T extends User$customizationArgs<ExtArgs> = {}>(args?: Subset<T, User$customizationArgs<ExtArgs>>): Prisma__CustomizationClient<$Result.GetResult<Prisma.$CustomizationPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    Support<T extends User$SupportArgs<ExtArgs> = {}>(args?: Subset<T, User$SupportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    wallet<T extends User$walletArgs<ExtArgs> = {}>(args?: Subset<T, User$walletArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$walletPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    target<T extends User$targetArgs<ExtArgs> = {}>(args?: Subset<T, User$targetArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TargetPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    investmentPortfolio<T extends User$investmentPortfolioArgs<ExtArgs> = {}>(args?: Subset<T, User$investmentPortfolioArgs<ExtArgs>>): Prisma__InvestmentPortfolioClient<$Result.GetResult<Prisma.$InvestmentPortfolioPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly isEmailVerified: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.comment
   */
  export type User$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.financialRadiographies
   */
  export type User$financialRadiographiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialRadiograp
     */
    select?: FinancialRadiograpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialRadiograp
     */
    omit?: FinancialRadiograpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialRadiograpInclude<ExtArgs> | null
    where?: FinancialRadiograpWhereInput
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }

  /**
   * User.customization
   */
  export type User$customizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customization
     */
    select?: CustomizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customization
     */
    omit?: CustomizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomizationInclude<ExtArgs> | null
    where?: CustomizationWhereInput
  }

  /**
   * User.Support
   */
  export type User$SupportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Support
     */
    select?: SupportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Support
     */
    omit?: SupportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportInclude<ExtArgs> | null
    where?: SupportWhereInput
    orderBy?: SupportOrderByWithRelationInput | SupportOrderByWithRelationInput[]
    cursor?: SupportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SupportScalarFieldEnum | SupportScalarFieldEnum[]
  }

  /**
   * User.wallet
   */
  export type User$walletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet
     */
    select?: walletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet
     */
    omit?: walletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletInclude<ExtArgs> | null
    where?: walletWhereInput
    orderBy?: walletOrderByWithRelationInput | walletOrderByWithRelationInput[]
    cursor?: walletWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * User.target
   */
  export type User$targetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Target
     */
    select?: TargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Target
     */
    omit?: TargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TargetInclude<ExtArgs> | null
    where?: TargetWhereInput
    orderBy?: TargetOrderByWithRelationInput | TargetOrderByWithRelationInput[]
    cursor?: TargetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TargetScalarFieldEnum | TargetScalarFieldEnum[]
  }

  /**
   * User.investmentPortfolio
   */
  export type User$investmentPortfolioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvestmentPortfolio
     */
    select?: InvestmentPortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvestmentPortfolio
     */
    omit?: InvestmentPortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentPortfolioInclude<ExtArgs> | null
    where?: InvestmentPortfolioWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Target
   */

  export type AggregateTarget = {
    _count: TargetCountAggregateOutputType | null
    _avg: TargetAvgAggregateOutputType | null
    _sum: TargetSumAggregateOutputType | null
    _min: TargetMinAggregateOutputType | null
    _max: TargetMaxAggregateOutputType | null
  }

  export type TargetAvgAggregateOutputType = {
    progress: Decimal | null
    amount: Decimal | null
  }

  export type TargetSumAggregateOutputType = {
    progress: Decimal | null
    amount: Decimal | null
  }

  export type TargetMinAggregateOutputType = {
    id: string | null
    name: string | null
    progress: Decimal | null
    amount: Decimal | null
    isActive: boolean | null
    category: string | null
    dateTarget: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type TargetMaxAggregateOutputType = {
    id: string | null
    name: string | null
    progress: Decimal | null
    amount: Decimal | null
    isActive: boolean | null
    category: string | null
    dateTarget: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type TargetCountAggregateOutputType = {
    id: number
    name: number
    progress: number
    amount: number
    isActive: number
    category: number
    dateTarget: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type TargetAvgAggregateInputType = {
    progress?: true
    amount?: true
  }

  export type TargetSumAggregateInputType = {
    progress?: true
    amount?: true
  }

  export type TargetMinAggregateInputType = {
    id?: true
    name?: true
    progress?: true
    amount?: true
    isActive?: true
    category?: true
    dateTarget?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type TargetMaxAggregateInputType = {
    id?: true
    name?: true
    progress?: true
    amount?: true
    isActive?: true
    category?: true
    dateTarget?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type TargetCountAggregateInputType = {
    id?: true
    name?: true
    progress?: true
    amount?: true
    isActive?: true
    category?: true
    dateTarget?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type TargetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Target to aggregate.
     */
    where?: TargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Targets to fetch.
     */
    orderBy?: TargetOrderByWithRelationInput | TargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Targets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Targets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Targets
    **/
    _count?: true | TargetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TargetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TargetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TargetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TargetMaxAggregateInputType
  }

  export type GetTargetAggregateType<T extends TargetAggregateArgs> = {
        [P in keyof T & keyof AggregateTarget]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTarget[P]>
      : GetScalarType<T[P], AggregateTarget[P]>
  }




  export type TargetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TargetWhereInput
    orderBy?: TargetOrderByWithAggregationInput | TargetOrderByWithAggregationInput[]
    by: TargetScalarFieldEnum[] | TargetScalarFieldEnum
    having?: TargetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TargetCountAggregateInputType | true
    _avg?: TargetAvgAggregateInputType
    _sum?: TargetSumAggregateInputType
    _min?: TargetMinAggregateInputType
    _max?: TargetMaxAggregateInputType
  }

  export type TargetGroupByOutputType = {
    id: string
    name: string
    progress: Decimal
    amount: Decimal
    isActive: boolean
    category: string
    dateTarget: Date
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: TargetCountAggregateOutputType | null
    _avg: TargetAvgAggregateOutputType | null
    _sum: TargetSumAggregateOutputType | null
    _min: TargetMinAggregateOutputType | null
    _max: TargetMaxAggregateOutputType | null
  }

  type GetTargetGroupByPayload<T extends TargetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TargetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TargetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TargetGroupByOutputType[P]>
            : GetScalarType<T[P], TargetGroupByOutputType[P]>
        }
      >
    >


  export type TargetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    progress?: boolean
    amount?: boolean
    isActive?: boolean
    category?: boolean
    dateTarget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["target"]>

  export type TargetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    progress?: boolean
    amount?: boolean
    isActive?: boolean
    category?: boolean
    dateTarget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["target"]>

  export type TargetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    progress?: boolean
    amount?: boolean
    isActive?: boolean
    category?: boolean
    dateTarget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["target"]>

  export type TargetSelectScalar = {
    id?: boolean
    name?: boolean
    progress?: boolean
    amount?: boolean
    isActive?: boolean
    category?: boolean
    dateTarget?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type TargetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "progress" | "amount" | "isActive" | "category" | "dateTarget" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["target"]>
  export type TargetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TargetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TargetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TargetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Target"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      progress: Prisma.Decimal
      amount: Prisma.Decimal
      isActive: boolean
      category: string
      dateTarget: Date
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["target"]>
    composites: {}
  }

  type TargetGetPayload<S extends boolean | null | undefined | TargetDefaultArgs> = $Result.GetResult<Prisma.$TargetPayload, S>

  type TargetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TargetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TargetCountAggregateInputType | true
    }

  export interface TargetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Target'], meta: { name: 'Target' } }
    /**
     * Find zero or one Target that matches the filter.
     * @param {TargetFindUniqueArgs} args - Arguments to find a Target
     * @example
     * // Get one Target
     * const target = await prisma.target.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TargetFindUniqueArgs>(args: SelectSubset<T, TargetFindUniqueArgs<ExtArgs>>): Prisma__TargetClient<$Result.GetResult<Prisma.$TargetPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Target that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TargetFindUniqueOrThrowArgs} args - Arguments to find a Target
     * @example
     * // Get one Target
     * const target = await prisma.target.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TargetFindUniqueOrThrowArgs>(args: SelectSubset<T, TargetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TargetClient<$Result.GetResult<Prisma.$TargetPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Target that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TargetFindFirstArgs} args - Arguments to find a Target
     * @example
     * // Get one Target
     * const target = await prisma.target.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TargetFindFirstArgs>(args?: SelectSubset<T, TargetFindFirstArgs<ExtArgs>>): Prisma__TargetClient<$Result.GetResult<Prisma.$TargetPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Target that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TargetFindFirstOrThrowArgs} args - Arguments to find a Target
     * @example
     * // Get one Target
     * const target = await prisma.target.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TargetFindFirstOrThrowArgs>(args?: SelectSubset<T, TargetFindFirstOrThrowArgs<ExtArgs>>): Prisma__TargetClient<$Result.GetResult<Prisma.$TargetPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Targets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TargetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Targets
     * const targets = await prisma.target.findMany()
     * 
     * // Get first 10 Targets
     * const targets = await prisma.target.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const targetWithIdOnly = await prisma.target.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TargetFindManyArgs>(args?: SelectSubset<T, TargetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TargetPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Target.
     * @param {TargetCreateArgs} args - Arguments to create a Target.
     * @example
     * // Create one Target
     * const Target = await prisma.target.create({
     *   data: {
     *     // ... data to create a Target
     *   }
     * })
     * 
     */
    create<T extends TargetCreateArgs>(args: SelectSubset<T, TargetCreateArgs<ExtArgs>>): Prisma__TargetClient<$Result.GetResult<Prisma.$TargetPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Targets.
     * @param {TargetCreateManyArgs} args - Arguments to create many Targets.
     * @example
     * // Create many Targets
     * const target = await prisma.target.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TargetCreateManyArgs>(args?: SelectSubset<T, TargetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Targets and returns the data saved in the database.
     * @param {TargetCreateManyAndReturnArgs} args - Arguments to create many Targets.
     * @example
     * // Create many Targets
     * const target = await prisma.target.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Targets and only return the `id`
     * const targetWithIdOnly = await prisma.target.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TargetCreateManyAndReturnArgs>(args?: SelectSubset<T, TargetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TargetPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Target.
     * @param {TargetDeleteArgs} args - Arguments to delete one Target.
     * @example
     * // Delete one Target
     * const Target = await prisma.target.delete({
     *   where: {
     *     // ... filter to delete one Target
     *   }
     * })
     * 
     */
    delete<T extends TargetDeleteArgs>(args: SelectSubset<T, TargetDeleteArgs<ExtArgs>>): Prisma__TargetClient<$Result.GetResult<Prisma.$TargetPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Target.
     * @param {TargetUpdateArgs} args - Arguments to update one Target.
     * @example
     * // Update one Target
     * const target = await prisma.target.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TargetUpdateArgs>(args: SelectSubset<T, TargetUpdateArgs<ExtArgs>>): Prisma__TargetClient<$Result.GetResult<Prisma.$TargetPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Targets.
     * @param {TargetDeleteManyArgs} args - Arguments to filter Targets to delete.
     * @example
     * // Delete a few Targets
     * const { count } = await prisma.target.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TargetDeleteManyArgs>(args?: SelectSubset<T, TargetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Targets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TargetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Targets
     * const target = await prisma.target.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TargetUpdateManyArgs>(args: SelectSubset<T, TargetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Targets and returns the data updated in the database.
     * @param {TargetUpdateManyAndReturnArgs} args - Arguments to update many Targets.
     * @example
     * // Update many Targets
     * const target = await prisma.target.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Targets and only return the `id`
     * const targetWithIdOnly = await prisma.target.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TargetUpdateManyAndReturnArgs>(args: SelectSubset<T, TargetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TargetPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Target.
     * @param {TargetUpsertArgs} args - Arguments to update or create a Target.
     * @example
     * // Update or create a Target
     * const target = await prisma.target.upsert({
     *   create: {
     *     // ... data to create a Target
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Target we want to update
     *   }
     * })
     */
    upsert<T extends TargetUpsertArgs>(args: SelectSubset<T, TargetUpsertArgs<ExtArgs>>): Prisma__TargetClient<$Result.GetResult<Prisma.$TargetPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Targets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TargetCountArgs} args - Arguments to filter Targets to count.
     * @example
     * // Count the number of Targets
     * const count = await prisma.target.count({
     *   where: {
     *     // ... the filter for the Targets we want to count
     *   }
     * })
    **/
    count<T extends TargetCountArgs>(
      args?: Subset<T, TargetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TargetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Target.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TargetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TargetAggregateArgs>(args: Subset<T, TargetAggregateArgs>): Prisma.PrismaPromise<GetTargetAggregateType<T>>

    /**
     * Group by Target.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TargetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TargetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TargetGroupByArgs['orderBy'] }
        : { orderBy?: TargetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TargetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTargetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Target model
   */
  readonly fields: TargetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Target.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TargetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Target model
   */ 
  interface TargetFieldRefs {
    readonly id: FieldRef<"Target", 'String'>
    readonly name: FieldRef<"Target", 'String'>
    readonly progress: FieldRef<"Target", 'Decimal'>
    readonly amount: FieldRef<"Target", 'Decimal'>
    readonly isActive: FieldRef<"Target", 'Boolean'>
    readonly category: FieldRef<"Target", 'String'>
    readonly dateTarget: FieldRef<"Target", 'DateTime'>
    readonly createdAt: FieldRef<"Target", 'DateTime'>
    readonly updatedAt: FieldRef<"Target", 'DateTime'>
    readonly userId: FieldRef<"Target", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Target findUnique
   */
  export type TargetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Target
     */
    select?: TargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Target
     */
    omit?: TargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TargetInclude<ExtArgs> | null
    /**
     * Filter, which Target to fetch.
     */
    where: TargetWhereUniqueInput
  }

  /**
   * Target findUniqueOrThrow
   */
  export type TargetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Target
     */
    select?: TargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Target
     */
    omit?: TargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TargetInclude<ExtArgs> | null
    /**
     * Filter, which Target to fetch.
     */
    where: TargetWhereUniqueInput
  }

  /**
   * Target findFirst
   */
  export type TargetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Target
     */
    select?: TargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Target
     */
    omit?: TargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TargetInclude<ExtArgs> | null
    /**
     * Filter, which Target to fetch.
     */
    where?: TargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Targets to fetch.
     */
    orderBy?: TargetOrderByWithRelationInput | TargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Targets.
     */
    cursor?: TargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Targets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Targets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Targets.
     */
    distinct?: TargetScalarFieldEnum | TargetScalarFieldEnum[]
  }

  /**
   * Target findFirstOrThrow
   */
  export type TargetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Target
     */
    select?: TargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Target
     */
    omit?: TargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TargetInclude<ExtArgs> | null
    /**
     * Filter, which Target to fetch.
     */
    where?: TargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Targets to fetch.
     */
    orderBy?: TargetOrderByWithRelationInput | TargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Targets.
     */
    cursor?: TargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Targets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Targets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Targets.
     */
    distinct?: TargetScalarFieldEnum | TargetScalarFieldEnum[]
  }

  /**
   * Target findMany
   */
  export type TargetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Target
     */
    select?: TargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Target
     */
    omit?: TargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TargetInclude<ExtArgs> | null
    /**
     * Filter, which Targets to fetch.
     */
    where?: TargetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Targets to fetch.
     */
    orderBy?: TargetOrderByWithRelationInput | TargetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Targets.
     */
    cursor?: TargetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Targets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Targets.
     */
    skip?: number
    distinct?: TargetScalarFieldEnum | TargetScalarFieldEnum[]
  }

  /**
   * Target create
   */
  export type TargetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Target
     */
    select?: TargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Target
     */
    omit?: TargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TargetInclude<ExtArgs> | null
    /**
     * The data needed to create a Target.
     */
    data: XOR<TargetCreateInput, TargetUncheckedCreateInput>
  }

  /**
   * Target createMany
   */
  export type TargetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Targets.
     */
    data: TargetCreateManyInput | TargetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Target createManyAndReturn
   */
  export type TargetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Target
     */
    select?: TargetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Target
     */
    omit?: TargetOmit<ExtArgs> | null
    /**
     * The data used to create many Targets.
     */
    data: TargetCreateManyInput | TargetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TargetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Target update
   */
  export type TargetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Target
     */
    select?: TargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Target
     */
    omit?: TargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TargetInclude<ExtArgs> | null
    /**
     * The data needed to update a Target.
     */
    data: XOR<TargetUpdateInput, TargetUncheckedUpdateInput>
    /**
     * Choose, which Target to update.
     */
    where: TargetWhereUniqueInput
  }

  /**
   * Target updateMany
   */
  export type TargetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Targets.
     */
    data: XOR<TargetUpdateManyMutationInput, TargetUncheckedUpdateManyInput>
    /**
     * Filter which Targets to update
     */
    where?: TargetWhereInput
  }

  /**
   * Target updateManyAndReturn
   */
  export type TargetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Target
     */
    select?: TargetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Target
     */
    omit?: TargetOmit<ExtArgs> | null
    /**
     * The data used to update Targets.
     */
    data: XOR<TargetUpdateManyMutationInput, TargetUncheckedUpdateManyInput>
    /**
     * Filter which Targets to update
     */
    where?: TargetWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TargetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Target upsert
   */
  export type TargetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Target
     */
    select?: TargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Target
     */
    omit?: TargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TargetInclude<ExtArgs> | null
    /**
     * The filter to search for the Target to update in case it exists.
     */
    where: TargetWhereUniqueInput
    /**
     * In case the Target found by the `where` argument doesn't exist, create a new Target with this data.
     */
    create: XOR<TargetCreateInput, TargetUncheckedCreateInput>
    /**
     * In case the Target was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TargetUpdateInput, TargetUncheckedUpdateInput>
  }

  /**
   * Target delete
   */
  export type TargetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Target
     */
    select?: TargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Target
     */
    omit?: TargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TargetInclude<ExtArgs> | null
    /**
     * Filter which Target to delete.
     */
    where: TargetWhereUniqueInput
  }

  /**
   * Target deleteMany
   */
  export type TargetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Targets to delete
     */
    where?: TargetWhereInput
  }

  /**
   * Target without action
   */
  export type TargetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Target
     */
    select?: TargetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Target
     */
    omit?: TargetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TargetInclude<ExtArgs> | null
  }


  /**
   * Model FinancialRadiograp
   */

  export type AggregateFinancialRadiograp = {
    _count: FinancialRadiograpCountAggregateOutputType | null
    _avg: FinancialRadiograpAvgAggregateOutputType | null
    _sum: FinancialRadiograpSumAggregateOutputType | null
    _min: FinancialRadiograpMinAggregateOutputType | null
    _max: FinancialRadiograpMaxAggregateOutputType | null
  }

  export type FinancialRadiograpAvgAggregateOutputType = {
    monthlyIncome: Decimal | null
    monthlyExpenses: Decimal | null
    savingCapacity: Decimal | null
    debts: Decimal | null
    savings: Decimal | null
  }

  export type FinancialRadiograpSumAggregateOutputType = {
    monthlyIncome: Decimal | null
    monthlyExpenses: Decimal | null
    savingCapacity: Decimal | null
    debts: Decimal | null
    savings: Decimal | null
  }

  export type FinancialRadiograpMinAggregateOutputType = {
    id: string | null
    monthlyIncome: Decimal | null
    monthlyExpenses: Decimal | null
    savingCapacity: Decimal | null
    debts: Decimal | null
    savings: Decimal | null
    userId: string | null
  }

  export type FinancialRadiograpMaxAggregateOutputType = {
    id: string | null
    monthlyIncome: Decimal | null
    monthlyExpenses: Decimal | null
    savingCapacity: Decimal | null
    debts: Decimal | null
    savings: Decimal | null
    userId: string | null
  }

  export type FinancialRadiograpCountAggregateOutputType = {
    id: number
    monthlyIncome: number
    monthlyExpenses: number
    savingCapacity: number
    debts: number
    savings: number
    userId: number
    _all: number
  }


  export type FinancialRadiograpAvgAggregateInputType = {
    monthlyIncome?: true
    monthlyExpenses?: true
    savingCapacity?: true
    debts?: true
    savings?: true
  }

  export type FinancialRadiograpSumAggregateInputType = {
    monthlyIncome?: true
    monthlyExpenses?: true
    savingCapacity?: true
    debts?: true
    savings?: true
  }

  export type FinancialRadiograpMinAggregateInputType = {
    id?: true
    monthlyIncome?: true
    monthlyExpenses?: true
    savingCapacity?: true
    debts?: true
    savings?: true
    userId?: true
  }

  export type FinancialRadiograpMaxAggregateInputType = {
    id?: true
    monthlyIncome?: true
    monthlyExpenses?: true
    savingCapacity?: true
    debts?: true
    savings?: true
    userId?: true
  }

  export type FinancialRadiograpCountAggregateInputType = {
    id?: true
    monthlyIncome?: true
    monthlyExpenses?: true
    savingCapacity?: true
    debts?: true
    savings?: true
    userId?: true
    _all?: true
  }

  export type FinancialRadiograpAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FinancialRadiograp to aggregate.
     */
    where?: FinancialRadiograpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialRadiograps to fetch.
     */
    orderBy?: FinancialRadiograpOrderByWithRelationInput | FinancialRadiograpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FinancialRadiograpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialRadiograps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialRadiograps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FinancialRadiograps
    **/
    _count?: true | FinancialRadiograpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FinancialRadiograpAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FinancialRadiograpSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FinancialRadiograpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FinancialRadiograpMaxAggregateInputType
  }

  export type GetFinancialRadiograpAggregateType<T extends FinancialRadiograpAggregateArgs> = {
        [P in keyof T & keyof AggregateFinancialRadiograp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFinancialRadiograp[P]>
      : GetScalarType<T[P], AggregateFinancialRadiograp[P]>
  }




  export type FinancialRadiograpGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinancialRadiograpWhereInput
    orderBy?: FinancialRadiograpOrderByWithAggregationInput | FinancialRadiograpOrderByWithAggregationInput[]
    by: FinancialRadiograpScalarFieldEnum[] | FinancialRadiograpScalarFieldEnum
    having?: FinancialRadiograpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FinancialRadiograpCountAggregateInputType | true
    _avg?: FinancialRadiograpAvgAggregateInputType
    _sum?: FinancialRadiograpSumAggregateInputType
    _min?: FinancialRadiograpMinAggregateInputType
    _max?: FinancialRadiograpMaxAggregateInputType
  }

  export type FinancialRadiograpGroupByOutputType = {
    id: string
    monthlyIncome: Decimal | null
    monthlyExpenses: Decimal | null
    savingCapacity: Decimal | null
    debts: Decimal | null
    savings: Decimal | null
    userId: string | null
    _count: FinancialRadiograpCountAggregateOutputType | null
    _avg: FinancialRadiograpAvgAggregateOutputType | null
    _sum: FinancialRadiograpSumAggregateOutputType | null
    _min: FinancialRadiograpMinAggregateOutputType | null
    _max: FinancialRadiograpMaxAggregateOutputType | null
  }

  type GetFinancialRadiograpGroupByPayload<T extends FinancialRadiograpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FinancialRadiograpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FinancialRadiograpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FinancialRadiograpGroupByOutputType[P]>
            : GetScalarType<T[P], FinancialRadiograpGroupByOutputType[P]>
        }
      >
    >


  export type FinancialRadiograpSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    monthlyIncome?: boolean
    monthlyExpenses?: boolean
    savingCapacity?: boolean
    debts?: boolean
    savings?: boolean
    userId?: boolean
    user?: boolean | FinancialRadiograp$userArgs<ExtArgs>
  }, ExtArgs["result"]["financialRadiograp"]>

  export type FinancialRadiograpSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    monthlyIncome?: boolean
    monthlyExpenses?: boolean
    savingCapacity?: boolean
    debts?: boolean
    savings?: boolean
    userId?: boolean
    user?: boolean | FinancialRadiograp$userArgs<ExtArgs>
  }, ExtArgs["result"]["financialRadiograp"]>

  export type FinancialRadiograpSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    monthlyIncome?: boolean
    monthlyExpenses?: boolean
    savingCapacity?: boolean
    debts?: boolean
    savings?: boolean
    userId?: boolean
    user?: boolean | FinancialRadiograp$userArgs<ExtArgs>
  }, ExtArgs["result"]["financialRadiograp"]>

  export type FinancialRadiograpSelectScalar = {
    id?: boolean
    monthlyIncome?: boolean
    monthlyExpenses?: boolean
    savingCapacity?: boolean
    debts?: boolean
    savings?: boolean
    userId?: boolean
  }

  export type FinancialRadiograpOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "monthlyIncome" | "monthlyExpenses" | "savingCapacity" | "debts" | "savings" | "userId", ExtArgs["result"]["financialRadiograp"]>
  export type FinancialRadiograpInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | FinancialRadiograp$userArgs<ExtArgs>
  }
  export type FinancialRadiograpIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | FinancialRadiograp$userArgs<ExtArgs>
  }
  export type FinancialRadiograpIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | FinancialRadiograp$userArgs<ExtArgs>
  }

  export type $FinancialRadiograpPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FinancialRadiograp"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      monthlyIncome: Prisma.Decimal | null
      monthlyExpenses: Prisma.Decimal | null
      savingCapacity: Prisma.Decimal | null
      debts: Prisma.Decimal | null
      savings: Prisma.Decimal | null
      userId: string | null
    }, ExtArgs["result"]["financialRadiograp"]>
    composites: {}
  }

  type FinancialRadiograpGetPayload<S extends boolean | null | undefined | FinancialRadiograpDefaultArgs> = $Result.GetResult<Prisma.$FinancialRadiograpPayload, S>

  type FinancialRadiograpCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FinancialRadiograpFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FinancialRadiograpCountAggregateInputType | true
    }

  export interface FinancialRadiograpDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FinancialRadiograp'], meta: { name: 'FinancialRadiograp' } }
    /**
     * Find zero or one FinancialRadiograp that matches the filter.
     * @param {FinancialRadiograpFindUniqueArgs} args - Arguments to find a FinancialRadiograp
     * @example
     * // Get one FinancialRadiograp
     * const financialRadiograp = await prisma.financialRadiograp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FinancialRadiograpFindUniqueArgs>(args: SelectSubset<T, FinancialRadiograpFindUniqueArgs<ExtArgs>>): Prisma__FinancialRadiograpClient<$Result.GetResult<Prisma.$FinancialRadiograpPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one FinancialRadiograp that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FinancialRadiograpFindUniqueOrThrowArgs} args - Arguments to find a FinancialRadiograp
     * @example
     * // Get one FinancialRadiograp
     * const financialRadiograp = await prisma.financialRadiograp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FinancialRadiograpFindUniqueOrThrowArgs>(args: SelectSubset<T, FinancialRadiograpFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FinancialRadiograpClient<$Result.GetResult<Prisma.$FinancialRadiograpPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first FinancialRadiograp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialRadiograpFindFirstArgs} args - Arguments to find a FinancialRadiograp
     * @example
     * // Get one FinancialRadiograp
     * const financialRadiograp = await prisma.financialRadiograp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FinancialRadiograpFindFirstArgs>(args?: SelectSubset<T, FinancialRadiograpFindFirstArgs<ExtArgs>>): Prisma__FinancialRadiograpClient<$Result.GetResult<Prisma.$FinancialRadiograpPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first FinancialRadiograp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialRadiograpFindFirstOrThrowArgs} args - Arguments to find a FinancialRadiograp
     * @example
     * // Get one FinancialRadiograp
     * const financialRadiograp = await prisma.financialRadiograp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FinancialRadiograpFindFirstOrThrowArgs>(args?: SelectSubset<T, FinancialRadiograpFindFirstOrThrowArgs<ExtArgs>>): Prisma__FinancialRadiograpClient<$Result.GetResult<Prisma.$FinancialRadiograpPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more FinancialRadiograps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialRadiograpFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FinancialRadiograps
     * const financialRadiograps = await prisma.financialRadiograp.findMany()
     * 
     * // Get first 10 FinancialRadiograps
     * const financialRadiograps = await prisma.financialRadiograp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const financialRadiograpWithIdOnly = await prisma.financialRadiograp.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FinancialRadiograpFindManyArgs>(args?: SelectSubset<T, FinancialRadiograpFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialRadiograpPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a FinancialRadiograp.
     * @param {FinancialRadiograpCreateArgs} args - Arguments to create a FinancialRadiograp.
     * @example
     * // Create one FinancialRadiograp
     * const FinancialRadiograp = await prisma.financialRadiograp.create({
     *   data: {
     *     // ... data to create a FinancialRadiograp
     *   }
     * })
     * 
     */
    create<T extends FinancialRadiograpCreateArgs>(args: SelectSubset<T, FinancialRadiograpCreateArgs<ExtArgs>>): Prisma__FinancialRadiograpClient<$Result.GetResult<Prisma.$FinancialRadiograpPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many FinancialRadiograps.
     * @param {FinancialRadiograpCreateManyArgs} args - Arguments to create many FinancialRadiograps.
     * @example
     * // Create many FinancialRadiograps
     * const financialRadiograp = await prisma.financialRadiograp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FinancialRadiograpCreateManyArgs>(args?: SelectSubset<T, FinancialRadiograpCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FinancialRadiograps and returns the data saved in the database.
     * @param {FinancialRadiograpCreateManyAndReturnArgs} args - Arguments to create many FinancialRadiograps.
     * @example
     * // Create many FinancialRadiograps
     * const financialRadiograp = await prisma.financialRadiograp.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FinancialRadiograps and only return the `id`
     * const financialRadiograpWithIdOnly = await prisma.financialRadiograp.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FinancialRadiograpCreateManyAndReturnArgs>(args?: SelectSubset<T, FinancialRadiograpCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialRadiograpPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a FinancialRadiograp.
     * @param {FinancialRadiograpDeleteArgs} args - Arguments to delete one FinancialRadiograp.
     * @example
     * // Delete one FinancialRadiograp
     * const FinancialRadiograp = await prisma.financialRadiograp.delete({
     *   where: {
     *     // ... filter to delete one FinancialRadiograp
     *   }
     * })
     * 
     */
    delete<T extends FinancialRadiograpDeleteArgs>(args: SelectSubset<T, FinancialRadiograpDeleteArgs<ExtArgs>>): Prisma__FinancialRadiograpClient<$Result.GetResult<Prisma.$FinancialRadiograpPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one FinancialRadiograp.
     * @param {FinancialRadiograpUpdateArgs} args - Arguments to update one FinancialRadiograp.
     * @example
     * // Update one FinancialRadiograp
     * const financialRadiograp = await prisma.financialRadiograp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FinancialRadiograpUpdateArgs>(args: SelectSubset<T, FinancialRadiograpUpdateArgs<ExtArgs>>): Prisma__FinancialRadiograpClient<$Result.GetResult<Prisma.$FinancialRadiograpPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more FinancialRadiograps.
     * @param {FinancialRadiograpDeleteManyArgs} args - Arguments to filter FinancialRadiograps to delete.
     * @example
     * // Delete a few FinancialRadiograps
     * const { count } = await prisma.financialRadiograp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FinancialRadiograpDeleteManyArgs>(args?: SelectSubset<T, FinancialRadiograpDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FinancialRadiograps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialRadiograpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FinancialRadiograps
     * const financialRadiograp = await prisma.financialRadiograp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FinancialRadiograpUpdateManyArgs>(args: SelectSubset<T, FinancialRadiograpUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FinancialRadiograps and returns the data updated in the database.
     * @param {FinancialRadiograpUpdateManyAndReturnArgs} args - Arguments to update many FinancialRadiograps.
     * @example
     * // Update many FinancialRadiograps
     * const financialRadiograp = await prisma.financialRadiograp.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FinancialRadiograps and only return the `id`
     * const financialRadiograpWithIdOnly = await prisma.financialRadiograp.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FinancialRadiograpUpdateManyAndReturnArgs>(args: SelectSubset<T, FinancialRadiograpUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialRadiograpPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one FinancialRadiograp.
     * @param {FinancialRadiograpUpsertArgs} args - Arguments to update or create a FinancialRadiograp.
     * @example
     * // Update or create a FinancialRadiograp
     * const financialRadiograp = await prisma.financialRadiograp.upsert({
     *   create: {
     *     // ... data to create a FinancialRadiograp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FinancialRadiograp we want to update
     *   }
     * })
     */
    upsert<T extends FinancialRadiograpUpsertArgs>(args: SelectSubset<T, FinancialRadiograpUpsertArgs<ExtArgs>>): Prisma__FinancialRadiograpClient<$Result.GetResult<Prisma.$FinancialRadiograpPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of FinancialRadiograps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialRadiograpCountArgs} args - Arguments to filter FinancialRadiograps to count.
     * @example
     * // Count the number of FinancialRadiograps
     * const count = await prisma.financialRadiograp.count({
     *   where: {
     *     // ... the filter for the FinancialRadiograps we want to count
     *   }
     * })
    **/
    count<T extends FinancialRadiograpCountArgs>(
      args?: Subset<T, FinancialRadiograpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FinancialRadiograpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FinancialRadiograp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialRadiograpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FinancialRadiograpAggregateArgs>(args: Subset<T, FinancialRadiograpAggregateArgs>): Prisma.PrismaPromise<GetFinancialRadiograpAggregateType<T>>

    /**
     * Group by FinancialRadiograp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialRadiograpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FinancialRadiograpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FinancialRadiograpGroupByArgs['orderBy'] }
        : { orderBy?: FinancialRadiograpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FinancialRadiograpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFinancialRadiograpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FinancialRadiograp model
   */
  readonly fields: FinancialRadiograpFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FinancialRadiograp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FinancialRadiograpClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends FinancialRadiograp$userArgs<ExtArgs> = {}>(args?: Subset<T, FinancialRadiograp$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FinancialRadiograp model
   */ 
  interface FinancialRadiograpFieldRefs {
    readonly id: FieldRef<"FinancialRadiograp", 'String'>
    readonly monthlyIncome: FieldRef<"FinancialRadiograp", 'Decimal'>
    readonly monthlyExpenses: FieldRef<"FinancialRadiograp", 'Decimal'>
    readonly savingCapacity: FieldRef<"FinancialRadiograp", 'Decimal'>
    readonly debts: FieldRef<"FinancialRadiograp", 'Decimal'>
    readonly savings: FieldRef<"FinancialRadiograp", 'Decimal'>
    readonly userId: FieldRef<"FinancialRadiograp", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FinancialRadiograp findUnique
   */
  export type FinancialRadiograpFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialRadiograp
     */
    select?: FinancialRadiograpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialRadiograp
     */
    omit?: FinancialRadiograpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialRadiograpInclude<ExtArgs> | null
    /**
     * Filter, which FinancialRadiograp to fetch.
     */
    where: FinancialRadiograpWhereUniqueInput
  }

  /**
   * FinancialRadiograp findUniqueOrThrow
   */
  export type FinancialRadiograpFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialRadiograp
     */
    select?: FinancialRadiograpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialRadiograp
     */
    omit?: FinancialRadiograpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialRadiograpInclude<ExtArgs> | null
    /**
     * Filter, which FinancialRadiograp to fetch.
     */
    where: FinancialRadiograpWhereUniqueInput
  }

  /**
   * FinancialRadiograp findFirst
   */
  export type FinancialRadiograpFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialRadiograp
     */
    select?: FinancialRadiograpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialRadiograp
     */
    omit?: FinancialRadiograpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialRadiograpInclude<ExtArgs> | null
    /**
     * Filter, which FinancialRadiograp to fetch.
     */
    where?: FinancialRadiograpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialRadiograps to fetch.
     */
    orderBy?: FinancialRadiograpOrderByWithRelationInput | FinancialRadiograpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FinancialRadiograps.
     */
    cursor?: FinancialRadiograpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialRadiograps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialRadiograps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FinancialRadiograps.
     */
    distinct?: FinancialRadiograpScalarFieldEnum | FinancialRadiograpScalarFieldEnum[]
  }

  /**
   * FinancialRadiograp findFirstOrThrow
   */
  export type FinancialRadiograpFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialRadiograp
     */
    select?: FinancialRadiograpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialRadiograp
     */
    omit?: FinancialRadiograpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialRadiograpInclude<ExtArgs> | null
    /**
     * Filter, which FinancialRadiograp to fetch.
     */
    where?: FinancialRadiograpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialRadiograps to fetch.
     */
    orderBy?: FinancialRadiograpOrderByWithRelationInput | FinancialRadiograpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FinancialRadiograps.
     */
    cursor?: FinancialRadiograpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialRadiograps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialRadiograps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FinancialRadiograps.
     */
    distinct?: FinancialRadiograpScalarFieldEnum | FinancialRadiograpScalarFieldEnum[]
  }

  /**
   * FinancialRadiograp findMany
   */
  export type FinancialRadiograpFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialRadiograp
     */
    select?: FinancialRadiograpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialRadiograp
     */
    omit?: FinancialRadiograpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialRadiograpInclude<ExtArgs> | null
    /**
     * Filter, which FinancialRadiograps to fetch.
     */
    where?: FinancialRadiograpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialRadiograps to fetch.
     */
    orderBy?: FinancialRadiograpOrderByWithRelationInput | FinancialRadiograpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FinancialRadiograps.
     */
    cursor?: FinancialRadiograpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialRadiograps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialRadiograps.
     */
    skip?: number
    distinct?: FinancialRadiograpScalarFieldEnum | FinancialRadiograpScalarFieldEnum[]
  }

  /**
   * FinancialRadiograp create
   */
  export type FinancialRadiograpCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialRadiograp
     */
    select?: FinancialRadiograpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialRadiograp
     */
    omit?: FinancialRadiograpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialRadiograpInclude<ExtArgs> | null
    /**
     * The data needed to create a FinancialRadiograp.
     */
    data?: XOR<FinancialRadiograpCreateInput, FinancialRadiograpUncheckedCreateInput>
  }

  /**
   * FinancialRadiograp createMany
   */
  export type FinancialRadiograpCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FinancialRadiograps.
     */
    data: FinancialRadiograpCreateManyInput | FinancialRadiograpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FinancialRadiograp createManyAndReturn
   */
  export type FinancialRadiograpCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialRadiograp
     */
    select?: FinancialRadiograpSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialRadiograp
     */
    omit?: FinancialRadiograpOmit<ExtArgs> | null
    /**
     * The data used to create many FinancialRadiograps.
     */
    data: FinancialRadiograpCreateManyInput | FinancialRadiograpCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialRadiograpIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FinancialRadiograp update
   */
  export type FinancialRadiograpUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialRadiograp
     */
    select?: FinancialRadiograpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialRadiograp
     */
    omit?: FinancialRadiograpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialRadiograpInclude<ExtArgs> | null
    /**
     * The data needed to update a FinancialRadiograp.
     */
    data: XOR<FinancialRadiograpUpdateInput, FinancialRadiograpUncheckedUpdateInput>
    /**
     * Choose, which FinancialRadiograp to update.
     */
    where: FinancialRadiograpWhereUniqueInput
  }

  /**
   * FinancialRadiograp updateMany
   */
  export type FinancialRadiograpUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FinancialRadiograps.
     */
    data: XOR<FinancialRadiograpUpdateManyMutationInput, FinancialRadiograpUncheckedUpdateManyInput>
    /**
     * Filter which FinancialRadiograps to update
     */
    where?: FinancialRadiograpWhereInput
  }

  /**
   * FinancialRadiograp updateManyAndReturn
   */
  export type FinancialRadiograpUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialRadiograp
     */
    select?: FinancialRadiograpSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialRadiograp
     */
    omit?: FinancialRadiograpOmit<ExtArgs> | null
    /**
     * The data used to update FinancialRadiograps.
     */
    data: XOR<FinancialRadiograpUpdateManyMutationInput, FinancialRadiograpUncheckedUpdateManyInput>
    /**
     * Filter which FinancialRadiograps to update
     */
    where?: FinancialRadiograpWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialRadiograpIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FinancialRadiograp upsert
   */
  export type FinancialRadiograpUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialRadiograp
     */
    select?: FinancialRadiograpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialRadiograp
     */
    omit?: FinancialRadiograpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialRadiograpInclude<ExtArgs> | null
    /**
     * The filter to search for the FinancialRadiograp to update in case it exists.
     */
    where: FinancialRadiograpWhereUniqueInput
    /**
     * In case the FinancialRadiograp found by the `where` argument doesn't exist, create a new FinancialRadiograp with this data.
     */
    create: XOR<FinancialRadiograpCreateInput, FinancialRadiograpUncheckedCreateInput>
    /**
     * In case the FinancialRadiograp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FinancialRadiograpUpdateInput, FinancialRadiograpUncheckedUpdateInput>
  }

  /**
   * FinancialRadiograp delete
   */
  export type FinancialRadiograpDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialRadiograp
     */
    select?: FinancialRadiograpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialRadiograp
     */
    omit?: FinancialRadiograpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialRadiograpInclude<ExtArgs> | null
    /**
     * Filter which FinancialRadiograp to delete.
     */
    where: FinancialRadiograpWhereUniqueInput
  }

  /**
   * FinancialRadiograp deleteMany
   */
  export type FinancialRadiograpDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FinancialRadiograps to delete
     */
    where?: FinancialRadiograpWhereInput
  }

  /**
   * FinancialRadiograp.user
   */
  export type FinancialRadiograp$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * FinancialRadiograp without action
   */
  export type FinancialRadiograpDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialRadiograp
     */
    select?: FinancialRadiograpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialRadiograp
     */
    omit?: FinancialRadiograpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialRadiograpInclude<ExtArgs> | null
  }


  /**
   * Model InvestmentPortfolio
   */

  export type AggregateInvestmentPortfolio = {
    _count: InvestmentPortfolioCountAggregateOutputType | null
    _min: InvestmentPortfolioMinAggregateOutputType | null
    _max: InvestmentPortfolioMaxAggregateOutputType | null
  }

  export type InvestmentPortfolioMinAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
  }

  export type InvestmentPortfolioMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    name: string | null
  }

  export type InvestmentPortfolioCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    _all: number
  }


  export type InvestmentPortfolioMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
  }

  export type InvestmentPortfolioMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
  }

  export type InvestmentPortfolioCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    _all?: true
  }

  export type InvestmentPortfolioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvestmentPortfolio to aggregate.
     */
    where?: InvestmentPortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvestmentPortfolios to fetch.
     */
    orderBy?: InvestmentPortfolioOrderByWithRelationInput | InvestmentPortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvestmentPortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvestmentPortfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvestmentPortfolios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InvestmentPortfolios
    **/
    _count?: true | InvestmentPortfolioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvestmentPortfolioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvestmentPortfolioMaxAggregateInputType
  }

  export type GetInvestmentPortfolioAggregateType<T extends InvestmentPortfolioAggregateArgs> = {
        [P in keyof T & keyof AggregateInvestmentPortfolio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvestmentPortfolio[P]>
      : GetScalarType<T[P], AggregateInvestmentPortfolio[P]>
  }




  export type InvestmentPortfolioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvestmentPortfolioWhereInput
    orderBy?: InvestmentPortfolioOrderByWithAggregationInput | InvestmentPortfolioOrderByWithAggregationInput[]
    by: InvestmentPortfolioScalarFieldEnum[] | InvestmentPortfolioScalarFieldEnum
    having?: InvestmentPortfolioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvestmentPortfolioCountAggregateInputType | true
    _min?: InvestmentPortfolioMinAggregateInputType
    _max?: InvestmentPortfolioMaxAggregateInputType
  }

  export type InvestmentPortfolioGroupByOutputType = {
    id: string
    userId: string
    name: string | null
    _count: InvestmentPortfolioCountAggregateOutputType | null
    _min: InvestmentPortfolioMinAggregateOutputType | null
    _max: InvestmentPortfolioMaxAggregateOutputType | null
  }

  type GetInvestmentPortfolioGroupByPayload<T extends InvestmentPortfolioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvestmentPortfolioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvestmentPortfolioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvestmentPortfolioGroupByOutputType[P]>
            : GetScalarType<T[P], InvestmentPortfolioGroupByOutputType[P]>
        }
      >
    >


  export type InvestmentPortfolioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    investments?: boolean | InvestmentPortfolio$investmentsArgs<ExtArgs>
    _count?: boolean | InvestmentPortfolioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["investmentPortfolio"]>

  export type InvestmentPortfolioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["investmentPortfolio"]>

  export type InvestmentPortfolioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["investmentPortfolio"]>

  export type InvestmentPortfolioSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
  }

  export type InvestmentPortfolioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "name", ExtArgs["result"]["investmentPortfolio"]>
  export type InvestmentPortfolioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    investments?: boolean | InvestmentPortfolio$investmentsArgs<ExtArgs>
    _count?: boolean | InvestmentPortfolioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InvestmentPortfolioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InvestmentPortfolioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InvestmentPortfolioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InvestmentPortfolio"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      investments: Prisma.$InvestmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      name: string | null
    }, ExtArgs["result"]["investmentPortfolio"]>
    composites: {}
  }

  type InvestmentPortfolioGetPayload<S extends boolean | null | undefined | InvestmentPortfolioDefaultArgs> = $Result.GetResult<Prisma.$InvestmentPortfolioPayload, S>

  type InvestmentPortfolioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvestmentPortfolioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvestmentPortfolioCountAggregateInputType | true
    }

  export interface InvestmentPortfolioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InvestmentPortfolio'], meta: { name: 'InvestmentPortfolio' } }
    /**
     * Find zero or one InvestmentPortfolio that matches the filter.
     * @param {InvestmentPortfolioFindUniqueArgs} args - Arguments to find a InvestmentPortfolio
     * @example
     * // Get one InvestmentPortfolio
     * const investmentPortfolio = await prisma.investmentPortfolio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvestmentPortfolioFindUniqueArgs>(args: SelectSubset<T, InvestmentPortfolioFindUniqueArgs<ExtArgs>>): Prisma__InvestmentPortfolioClient<$Result.GetResult<Prisma.$InvestmentPortfolioPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one InvestmentPortfolio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvestmentPortfolioFindUniqueOrThrowArgs} args - Arguments to find a InvestmentPortfolio
     * @example
     * // Get one InvestmentPortfolio
     * const investmentPortfolio = await prisma.investmentPortfolio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvestmentPortfolioFindUniqueOrThrowArgs>(args: SelectSubset<T, InvestmentPortfolioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvestmentPortfolioClient<$Result.GetResult<Prisma.$InvestmentPortfolioPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first InvestmentPortfolio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentPortfolioFindFirstArgs} args - Arguments to find a InvestmentPortfolio
     * @example
     * // Get one InvestmentPortfolio
     * const investmentPortfolio = await prisma.investmentPortfolio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvestmentPortfolioFindFirstArgs>(args?: SelectSubset<T, InvestmentPortfolioFindFirstArgs<ExtArgs>>): Prisma__InvestmentPortfolioClient<$Result.GetResult<Prisma.$InvestmentPortfolioPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first InvestmentPortfolio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentPortfolioFindFirstOrThrowArgs} args - Arguments to find a InvestmentPortfolio
     * @example
     * // Get one InvestmentPortfolio
     * const investmentPortfolio = await prisma.investmentPortfolio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvestmentPortfolioFindFirstOrThrowArgs>(args?: SelectSubset<T, InvestmentPortfolioFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvestmentPortfolioClient<$Result.GetResult<Prisma.$InvestmentPortfolioPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more InvestmentPortfolios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentPortfolioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InvestmentPortfolios
     * const investmentPortfolios = await prisma.investmentPortfolio.findMany()
     * 
     * // Get first 10 InvestmentPortfolios
     * const investmentPortfolios = await prisma.investmentPortfolio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const investmentPortfolioWithIdOnly = await prisma.investmentPortfolio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvestmentPortfolioFindManyArgs>(args?: SelectSubset<T, InvestmentPortfolioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvestmentPortfolioPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a InvestmentPortfolio.
     * @param {InvestmentPortfolioCreateArgs} args - Arguments to create a InvestmentPortfolio.
     * @example
     * // Create one InvestmentPortfolio
     * const InvestmentPortfolio = await prisma.investmentPortfolio.create({
     *   data: {
     *     // ... data to create a InvestmentPortfolio
     *   }
     * })
     * 
     */
    create<T extends InvestmentPortfolioCreateArgs>(args: SelectSubset<T, InvestmentPortfolioCreateArgs<ExtArgs>>): Prisma__InvestmentPortfolioClient<$Result.GetResult<Prisma.$InvestmentPortfolioPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many InvestmentPortfolios.
     * @param {InvestmentPortfolioCreateManyArgs} args - Arguments to create many InvestmentPortfolios.
     * @example
     * // Create many InvestmentPortfolios
     * const investmentPortfolio = await prisma.investmentPortfolio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvestmentPortfolioCreateManyArgs>(args?: SelectSubset<T, InvestmentPortfolioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InvestmentPortfolios and returns the data saved in the database.
     * @param {InvestmentPortfolioCreateManyAndReturnArgs} args - Arguments to create many InvestmentPortfolios.
     * @example
     * // Create many InvestmentPortfolios
     * const investmentPortfolio = await prisma.investmentPortfolio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InvestmentPortfolios and only return the `id`
     * const investmentPortfolioWithIdOnly = await prisma.investmentPortfolio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvestmentPortfolioCreateManyAndReturnArgs>(args?: SelectSubset<T, InvestmentPortfolioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvestmentPortfolioPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a InvestmentPortfolio.
     * @param {InvestmentPortfolioDeleteArgs} args - Arguments to delete one InvestmentPortfolio.
     * @example
     * // Delete one InvestmentPortfolio
     * const InvestmentPortfolio = await prisma.investmentPortfolio.delete({
     *   where: {
     *     // ... filter to delete one InvestmentPortfolio
     *   }
     * })
     * 
     */
    delete<T extends InvestmentPortfolioDeleteArgs>(args: SelectSubset<T, InvestmentPortfolioDeleteArgs<ExtArgs>>): Prisma__InvestmentPortfolioClient<$Result.GetResult<Prisma.$InvestmentPortfolioPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one InvestmentPortfolio.
     * @param {InvestmentPortfolioUpdateArgs} args - Arguments to update one InvestmentPortfolio.
     * @example
     * // Update one InvestmentPortfolio
     * const investmentPortfolio = await prisma.investmentPortfolio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvestmentPortfolioUpdateArgs>(args: SelectSubset<T, InvestmentPortfolioUpdateArgs<ExtArgs>>): Prisma__InvestmentPortfolioClient<$Result.GetResult<Prisma.$InvestmentPortfolioPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more InvestmentPortfolios.
     * @param {InvestmentPortfolioDeleteManyArgs} args - Arguments to filter InvestmentPortfolios to delete.
     * @example
     * // Delete a few InvestmentPortfolios
     * const { count } = await prisma.investmentPortfolio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvestmentPortfolioDeleteManyArgs>(args?: SelectSubset<T, InvestmentPortfolioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvestmentPortfolios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentPortfolioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InvestmentPortfolios
     * const investmentPortfolio = await prisma.investmentPortfolio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvestmentPortfolioUpdateManyArgs>(args: SelectSubset<T, InvestmentPortfolioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InvestmentPortfolios and returns the data updated in the database.
     * @param {InvestmentPortfolioUpdateManyAndReturnArgs} args - Arguments to update many InvestmentPortfolios.
     * @example
     * // Update many InvestmentPortfolios
     * const investmentPortfolio = await prisma.investmentPortfolio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InvestmentPortfolios and only return the `id`
     * const investmentPortfolioWithIdOnly = await prisma.investmentPortfolio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvestmentPortfolioUpdateManyAndReturnArgs>(args: SelectSubset<T, InvestmentPortfolioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvestmentPortfolioPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one InvestmentPortfolio.
     * @param {InvestmentPortfolioUpsertArgs} args - Arguments to update or create a InvestmentPortfolio.
     * @example
     * // Update or create a InvestmentPortfolio
     * const investmentPortfolio = await prisma.investmentPortfolio.upsert({
     *   create: {
     *     // ... data to create a InvestmentPortfolio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InvestmentPortfolio we want to update
     *   }
     * })
     */
    upsert<T extends InvestmentPortfolioUpsertArgs>(args: SelectSubset<T, InvestmentPortfolioUpsertArgs<ExtArgs>>): Prisma__InvestmentPortfolioClient<$Result.GetResult<Prisma.$InvestmentPortfolioPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of InvestmentPortfolios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentPortfolioCountArgs} args - Arguments to filter InvestmentPortfolios to count.
     * @example
     * // Count the number of InvestmentPortfolios
     * const count = await prisma.investmentPortfolio.count({
     *   where: {
     *     // ... the filter for the InvestmentPortfolios we want to count
     *   }
     * })
    **/
    count<T extends InvestmentPortfolioCountArgs>(
      args?: Subset<T, InvestmentPortfolioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvestmentPortfolioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InvestmentPortfolio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentPortfolioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvestmentPortfolioAggregateArgs>(args: Subset<T, InvestmentPortfolioAggregateArgs>): Prisma.PrismaPromise<GetInvestmentPortfolioAggregateType<T>>

    /**
     * Group by InvestmentPortfolio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentPortfolioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvestmentPortfolioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvestmentPortfolioGroupByArgs['orderBy'] }
        : { orderBy?: InvestmentPortfolioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvestmentPortfolioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvestmentPortfolioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InvestmentPortfolio model
   */
  readonly fields: InvestmentPortfolioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InvestmentPortfolio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvestmentPortfolioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    investments<T extends InvestmentPortfolio$investmentsArgs<ExtArgs> = {}>(args?: Subset<T, InvestmentPortfolio$investmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InvestmentPortfolio model
   */ 
  interface InvestmentPortfolioFieldRefs {
    readonly id: FieldRef<"InvestmentPortfolio", 'String'>
    readonly userId: FieldRef<"InvestmentPortfolio", 'String'>
    readonly name: FieldRef<"InvestmentPortfolio", 'String'>
  }
    

  // Custom InputTypes
  /**
   * InvestmentPortfolio findUnique
   */
  export type InvestmentPortfolioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvestmentPortfolio
     */
    select?: InvestmentPortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvestmentPortfolio
     */
    omit?: InvestmentPortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentPortfolioInclude<ExtArgs> | null
    /**
     * Filter, which InvestmentPortfolio to fetch.
     */
    where: InvestmentPortfolioWhereUniqueInput
  }

  /**
   * InvestmentPortfolio findUniqueOrThrow
   */
  export type InvestmentPortfolioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvestmentPortfolio
     */
    select?: InvestmentPortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvestmentPortfolio
     */
    omit?: InvestmentPortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentPortfolioInclude<ExtArgs> | null
    /**
     * Filter, which InvestmentPortfolio to fetch.
     */
    where: InvestmentPortfolioWhereUniqueInput
  }

  /**
   * InvestmentPortfolio findFirst
   */
  export type InvestmentPortfolioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvestmentPortfolio
     */
    select?: InvestmentPortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvestmentPortfolio
     */
    omit?: InvestmentPortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentPortfolioInclude<ExtArgs> | null
    /**
     * Filter, which InvestmentPortfolio to fetch.
     */
    where?: InvestmentPortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvestmentPortfolios to fetch.
     */
    orderBy?: InvestmentPortfolioOrderByWithRelationInput | InvestmentPortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvestmentPortfolios.
     */
    cursor?: InvestmentPortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvestmentPortfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvestmentPortfolios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvestmentPortfolios.
     */
    distinct?: InvestmentPortfolioScalarFieldEnum | InvestmentPortfolioScalarFieldEnum[]
  }

  /**
   * InvestmentPortfolio findFirstOrThrow
   */
  export type InvestmentPortfolioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvestmentPortfolio
     */
    select?: InvestmentPortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvestmentPortfolio
     */
    omit?: InvestmentPortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentPortfolioInclude<ExtArgs> | null
    /**
     * Filter, which InvestmentPortfolio to fetch.
     */
    where?: InvestmentPortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvestmentPortfolios to fetch.
     */
    orderBy?: InvestmentPortfolioOrderByWithRelationInput | InvestmentPortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InvestmentPortfolios.
     */
    cursor?: InvestmentPortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvestmentPortfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvestmentPortfolios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InvestmentPortfolios.
     */
    distinct?: InvestmentPortfolioScalarFieldEnum | InvestmentPortfolioScalarFieldEnum[]
  }

  /**
   * InvestmentPortfolio findMany
   */
  export type InvestmentPortfolioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvestmentPortfolio
     */
    select?: InvestmentPortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvestmentPortfolio
     */
    omit?: InvestmentPortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentPortfolioInclude<ExtArgs> | null
    /**
     * Filter, which InvestmentPortfolios to fetch.
     */
    where?: InvestmentPortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InvestmentPortfolios to fetch.
     */
    orderBy?: InvestmentPortfolioOrderByWithRelationInput | InvestmentPortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InvestmentPortfolios.
     */
    cursor?: InvestmentPortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InvestmentPortfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InvestmentPortfolios.
     */
    skip?: number
    distinct?: InvestmentPortfolioScalarFieldEnum | InvestmentPortfolioScalarFieldEnum[]
  }

  /**
   * InvestmentPortfolio create
   */
  export type InvestmentPortfolioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvestmentPortfolio
     */
    select?: InvestmentPortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvestmentPortfolio
     */
    omit?: InvestmentPortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentPortfolioInclude<ExtArgs> | null
    /**
     * The data needed to create a InvestmentPortfolio.
     */
    data: XOR<InvestmentPortfolioCreateInput, InvestmentPortfolioUncheckedCreateInput>
  }

  /**
   * InvestmentPortfolio createMany
   */
  export type InvestmentPortfolioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InvestmentPortfolios.
     */
    data: InvestmentPortfolioCreateManyInput | InvestmentPortfolioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InvestmentPortfolio createManyAndReturn
   */
  export type InvestmentPortfolioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvestmentPortfolio
     */
    select?: InvestmentPortfolioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InvestmentPortfolio
     */
    omit?: InvestmentPortfolioOmit<ExtArgs> | null
    /**
     * The data used to create many InvestmentPortfolios.
     */
    data: InvestmentPortfolioCreateManyInput | InvestmentPortfolioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentPortfolioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InvestmentPortfolio update
   */
  export type InvestmentPortfolioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvestmentPortfolio
     */
    select?: InvestmentPortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvestmentPortfolio
     */
    omit?: InvestmentPortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentPortfolioInclude<ExtArgs> | null
    /**
     * The data needed to update a InvestmentPortfolio.
     */
    data: XOR<InvestmentPortfolioUpdateInput, InvestmentPortfolioUncheckedUpdateInput>
    /**
     * Choose, which InvestmentPortfolio to update.
     */
    where: InvestmentPortfolioWhereUniqueInput
  }

  /**
   * InvestmentPortfolio updateMany
   */
  export type InvestmentPortfolioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InvestmentPortfolios.
     */
    data: XOR<InvestmentPortfolioUpdateManyMutationInput, InvestmentPortfolioUncheckedUpdateManyInput>
    /**
     * Filter which InvestmentPortfolios to update
     */
    where?: InvestmentPortfolioWhereInput
  }

  /**
   * InvestmentPortfolio updateManyAndReturn
   */
  export type InvestmentPortfolioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvestmentPortfolio
     */
    select?: InvestmentPortfolioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InvestmentPortfolio
     */
    omit?: InvestmentPortfolioOmit<ExtArgs> | null
    /**
     * The data used to update InvestmentPortfolios.
     */
    data: XOR<InvestmentPortfolioUpdateManyMutationInput, InvestmentPortfolioUncheckedUpdateManyInput>
    /**
     * Filter which InvestmentPortfolios to update
     */
    where?: InvestmentPortfolioWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentPortfolioIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InvestmentPortfolio upsert
   */
  export type InvestmentPortfolioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvestmentPortfolio
     */
    select?: InvestmentPortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvestmentPortfolio
     */
    omit?: InvestmentPortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentPortfolioInclude<ExtArgs> | null
    /**
     * The filter to search for the InvestmentPortfolio to update in case it exists.
     */
    where: InvestmentPortfolioWhereUniqueInput
    /**
     * In case the InvestmentPortfolio found by the `where` argument doesn't exist, create a new InvestmentPortfolio with this data.
     */
    create: XOR<InvestmentPortfolioCreateInput, InvestmentPortfolioUncheckedCreateInput>
    /**
     * In case the InvestmentPortfolio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvestmentPortfolioUpdateInput, InvestmentPortfolioUncheckedUpdateInput>
  }

  /**
   * InvestmentPortfolio delete
   */
  export type InvestmentPortfolioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvestmentPortfolio
     */
    select?: InvestmentPortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvestmentPortfolio
     */
    omit?: InvestmentPortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentPortfolioInclude<ExtArgs> | null
    /**
     * Filter which InvestmentPortfolio to delete.
     */
    where: InvestmentPortfolioWhereUniqueInput
  }

  /**
   * InvestmentPortfolio deleteMany
   */
  export type InvestmentPortfolioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InvestmentPortfolios to delete
     */
    where?: InvestmentPortfolioWhereInput
  }

  /**
   * InvestmentPortfolio.investments
   */
  export type InvestmentPortfolio$investmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    where?: InvestmentWhereInput
    orderBy?: InvestmentOrderByWithRelationInput | InvestmentOrderByWithRelationInput[]
    cursor?: InvestmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvestmentScalarFieldEnum | InvestmentScalarFieldEnum[]
  }

  /**
   * InvestmentPortfolio without action
   */
  export type InvestmentPortfolioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvestmentPortfolio
     */
    select?: InvestmentPortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvestmentPortfolio
     */
    omit?: InvestmentPortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentPortfolioInclude<ExtArgs> | null
  }


  /**
   * Model Investment
   */

  export type AggregateInvestment = {
    _count: InvestmentCountAggregateOutputType | null
    _avg: InvestmentAvgAggregateOutputType | null
    _sum: InvestmentSumAggregateOutputType | null
    _min: InvestmentMinAggregateOutputType | null
    _max: InvestmentMaxAggregateOutputType | null
  }

  export type InvestmentAvgAggregateOutputType = {
    amountInvested: number | null
  }

  export type InvestmentSumAggregateOutputType = {
    amountInvested: number | null
  }

  export type InvestmentMinAggregateOutputType = {
    id: string | null
    amountInvested: number | null
    portfolioId: string | null
    financialInstrumentId: string | null
    stockSymbol: string | null
  }

  export type InvestmentMaxAggregateOutputType = {
    id: string | null
    amountInvested: number | null
    portfolioId: string | null
    financialInstrumentId: string | null
    stockSymbol: string | null
  }

  export type InvestmentCountAggregateOutputType = {
    id: number
    amountInvested: number
    portfolioId: number
    financialInstrumentId: number
    stockSymbol: number
    _all: number
  }


  export type InvestmentAvgAggregateInputType = {
    amountInvested?: true
  }

  export type InvestmentSumAggregateInputType = {
    amountInvested?: true
  }

  export type InvestmentMinAggregateInputType = {
    id?: true
    amountInvested?: true
    portfolioId?: true
    financialInstrumentId?: true
    stockSymbol?: true
  }

  export type InvestmentMaxAggregateInputType = {
    id?: true
    amountInvested?: true
    portfolioId?: true
    financialInstrumentId?: true
    stockSymbol?: true
  }

  export type InvestmentCountAggregateInputType = {
    id?: true
    amountInvested?: true
    portfolioId?: true
    financialInstrumentId?: true
    stockSymbol?: true
    _all?: true
  }

  export type InvestmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Investment to aggregate.
     */
    where?: InvestmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Investments to fetch.
     */
    orderBy?: InvestmentOrderByWithRelationInput | InvestmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvestmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Investments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Investments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Investments
    **/
    _count?: true | InvestmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvestmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvestmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvestmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvestmentMaxAggregateInputType
  }

  export type GetInvestmentAggregateType<T extends InvestmentAggregateArgs> = {
        [P in keyof T & keyof AggregateInvestment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvestment[P]>
      : GetScalarType<T[P], AggregateInvestment[P]>
  }




  export type InvestmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvestmentWhereInput
    orderBy?: InvestmentOrderByWithAggregationInput | InvestmentOrderByWithAggregationInput[]
    by: InvestmentScalarFieldEnum[] | InvestmentScalarFieldEnum
    having?: InvestmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvestmentCountAggregateInputType | true
    _avg?: InvestmentAvgAggregateInputType
    _sum?: InvestmentSumAggregateInputType
    _min?: InvestmentMinAggregateInputType
    _max?: InvestmentMaxAggregateInputType
  }

  export type InvestmentGroupByOutputType = {
    id: string
    amountInvested: number
    portfolioId: string
    financialInstrumentId: string | null
    stockSymbol: string | null
    _count: InvestmentCountAggregateOutputType | null
    _avg: InvestmentAvgAggregateOutputType | null
    _sum: InvestmentSumAggregateOutputType | null
    _min: InvestmentMinAggregateOutputType | null
    _max: InvestmentMaxAggregateOutputType | null
  }

  type GetInvestmentGroupByPayload<T extends InvestmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvestmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvestmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvestmentGroupByOutputType[P]>
            : GetScalarType<T[P], InvestmentGroupByOutputType[P]>
        }
      >
    >


  export type InvestmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amountInvested?: boolean
    portfolioId?: boolean
    financialInstrumentId?: boolean
    stockSymbol?: boolean
    stock?: boolean | Investment$stockArgs<ExtArgs>
    portfolio?: boolean | Investment$portfolioArgs<ExtArgs>
    FinancialInstrument?: boolean | Investment$FinancialInstrumentArgs<ExtArgs>
  }, ExtArgs["result"]["investment"]>

  export type InvestmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amountInvested?: boolean
    portfolioId?: boolean
    financialInstrumentId?: boolean
    stockSymbol?: boolean
    stock?: boolean | Investment$stockArgs<ExtArgs>
    portfolio?: boolean | Investment$portfolioArgs<ExtArgs>
    FinancialInstrument?: boolean | Investment$FinancialInstrumentArgs<ExtArgs>
  }, ExtArgs["result"]["investment"]>

  export type InvestmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amountInvested?: boolean
    portfolioId?: boolean
    financialInstrumentId?: boolean
    stockSymbol?: boolean
    stock?: boolean | Investment$stockArgs<ExtArgs>
    portfolio?: boolean | Investment$portfolioArgs<ExtArgs>
    FinancialInstrument?: boolean | Investment$FinancialInstrumentArgs<ExtArgs>
  }, ExtArgs["result"]["investment"]>

  export type InvestmentSelectScalar = {
    id?: boolean
    amountInvested?: boolean
    portfolioId?: boolean
    financialInstrumentId?: boolean
    stockSymbol?: boolean
  }

  export type InvestmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "amountInvested" | "portfolioId" | "financialInstrumentId" | "stockSymbol", ExtArgs["result"]["investment"]>
  export type InvestmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stock?: boolean | Investment$stockArgs<ExtArgs>
    portfolio?: boolean | Investment$portfolioArgs<ExtArgs>
    FinancialInstrument?: boolean | Investment$FinancialInstrumentArgs<ExtArgs>
  }
  export type InvestmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stock?: boolean | Investment$stockArgs<ExtArgs>
    portfolio?: boolean | Investment$portfolioArgs<ExtArgs>
    FinancialInstrument?: boolean | Investment$FinancialInstrumentArgs<ExtArgs>
  }
  export type InvestmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stock?: boolean | Investment$stockArgs<ExtArgs>
    portfolio?: boolean | Investment$portfolioArgs<ExtArgs>
    FinancialInstrument?: boolean | Investment$FinancialInstrumentArgs<ExtArgs>
  }

  export type $InvestmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Investment"
    objects: {
      stock: Prisma.$StockPayload<ExtArgs> | null
      portfolio: Prisma.$InvestmentPortfolioPayload<ExtArgs> | null
      FinancialInstrument: Prisma.$FinancialInstrumentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      amountInvested: number
      portfolioId: string
      financialInstrumentId: string | null
      stockSymbol: string | null
    }, ExtArgs["result"]["investment"]>
    composites: {}
  }

  type InvestmentGetPayload<S extends boolean | null | undefined | InvestmentDefaultArgs> = $Result.GetResult<Prisma.$InvestmentPayload, S>

  type InvestmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvestmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvestmentCountAggregateInputType | true
    }

  export interface InvestmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Investment'], meta: { name: 'Investment' } }
    /**
     * Find zero or one Investment that matches the filter.
     * @param {InvestmentFindUniqueArgs} args - Arguments to find a Investment
     * @example
     * // Get one Investment
     * const investment = await prisma.investment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvestmentFindUniqueArgs>(args: SelectSubset<T, InvestmentFindUniqueArgs<ExtArgs>>): Prisma__InvestmentClient<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Investment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvestmentFindUniqueOrThrowArgs} args - Arguments to find a Investment
     * @example
     * // Get one Investment
     * const investment = await prisma.investment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvestmentFindUniqueOrThrowArgs>(args: SelectSubset<T, InvestmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvestmentClient<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Investment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentFindFirstArgs} args - Arguments to find a Investment
     * @example
     * // Get one Investment
     * const investment = await prisma.investment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvestmentFindFirstArgs>(args?: SelectSubset<T, InvestmentFindFirstArgs<ExtArgs>>): Prisma__InvestmentClient<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Investment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentFindFirstOrThrowArgs} args - Arguments to find a Investment
     * @example
     * // Get one Investment
     * const investment = await prisma.investment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvestmentFindFirstOrThrowArgs>(args?: SelectSubset<T, InvestmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvestmentClient<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Investments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Investments
     * const investments = await prisma.investment.findMany()
     * 
     * // Get first 10 Investments
     * const investments = await prisma.investment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const investmentWithIdOnly = await prisma.investment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InvestmentFindManyArgs>(args?: SelectSubset<T, InvestmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Investment.
     * @param {InvestmentCreateArgs} args - Arguments to create a Investment.
     * @example
     * // Create one Investment
     * const Investment = await prisma.investment.create({
     *   data: {
     *     // ... data to create a Investment
     *   }
     * })
     * 
     */
    create<T extends InvestmentCreateArgs>(args: SelectSubset<T, InvestmentCreateArgs<ExtArgs>>): Prisma__InvestmentClient<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Investments.
     * @param {InvestmentCreateManyArgs} args - Arguments to create many Investments.
     * @example
     * // Create many Investments
     * const investment = await prisma.investment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvestmentCreateManyArgs>(args?: SelectSubset<T, InvestmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Investments and returns the data saved in the database.
     * @param {InvestmentCreateManyAndReturnArgs} args - Arguments to create many Investments.
     * @example
     * // Create many Investments
     * const investment = await prisma.investment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Investments and only return the `id`
     * const investmentWithIdOnly = await prisma.investment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvestmentCreateManyAndReturnArgs>(args?: SelectSubset<T, InvestmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Investment.
     * @param {InvestmentDeleteArgs} args - Arguments to delete one Investment.
     * @example
     * // Delete one Investment
     * const Investment = await prisma.investment.delete({
     *   where: {
     *     // ... filter to delete one Investment
     *   }
     * })
     * 
     */
    delete<T extends InvestmentDeleteArgs>(args: SelectSubset<T, InvestmentDeleteArgs<ExtArgs>>): Prisma__InvestmentClient<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Investment.
     * @param {InvestmentUpdateArgs} args - Arguments to update one Investment.
     * @example
     * // Update one Investment
     * const investment = await prisma.investment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvestmentUpdateArgs>(args: SelectSubset<T, InvestmentUpdateArgs<ExtArgs>>): Prisma__InvestmentClient<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Investments.
     * @param {InvestmentDeleteManyArgs} args - Arguments to filter Investments to delete.
     * @example
     * // Delete a few Investments
     * const { count } = await prisma.investment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvestmentDeleteManyArgs>(args?: SelectSubset<T, InvestmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Investments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Investments
     * const investment = await prisma.investment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvestmentUpdateManyArgs>(args: SelectSubset<T, InvestmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Investments and returns the data updated in the database.
     * @param {InvestmentUpdateManyAndReturnArgs} args - Arguments to update many Investments.
     * @example
     * // Update many Investments
     * const investment = await prisma.investment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Investments and only return the `id`
     * const investmentWithIdOnly = await prisma.investment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvestmentUpdateManyAndReturnArgs>(args: SelectSubset<T, InvestmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Investment.
     * @param {InvestmentUpsertArgs} args - Arguments to update or create a Investment.
     * @example
     * // Update or create a Investment
     * const investment = await prisma.investment.upsert({
     *   create: {
     *     // ... data to create a Investment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Investment we want to update
     *   }
     * })
     */
    upsert<T extends InvestmentUpsertArgs>(args: SelectSubset<T, InvestmentUpsertArgs<ExtArgs>>): Prisma__InvestmentClient<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Investments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentCountArgs} args - Arguments to filter Investments to count.
     * @example
     * // Count the number of Investments
     * const count = await prisma.investment.count({
     *   where: {
     *     // ... the filter for the Investments we want to count
     *   }
     * })
    **/
    count<T extends InvestmentCountArgs>(
      args?: Subset<T, InvestmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvestmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Investment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvestmentAggregateArgs>(args: Subset<T, InvestmentAggregateArgs>): Prisma.PrismaPromise<GetInvestmentAggregateType<T>>

    /**
     * Group by Investment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvestmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvestmentGroupByArgs['orderBy'] }
        : { orderBy?: InvestmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvestmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvestmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Investment model
   */
  readonly fields: InvestmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Investment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvestmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stock<T extends Investment$stockArgs<ExtArgs> = {}>(args?: Subset<T, Investment$stockArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    portfolio<T extends Investment$portfolioArgs<ExtArgs> = {}>(args?: Subset<T, Investment$portfolioArgs<ExtArgs>>): Prisma__InvestmentPortfolioClient<$Result.GetResult<Prisma.$InvestmentPortfolioPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    FinancialInstrument<T extends Investment$FinancialInstrumentArgs<ExtArgs> = {}>(args?: Subset<T, Investment$FinancialInstrumentArgs<ExtArgs>>): Prisma__FinancialInstrumentClient<$Result.GetResult<Prisma.$FinancialInstrumentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Investment model
   */ 
  interface InvestmentFieldRefs {
    readonly id: FieldRef<"Investment", 'String'>
    readonly amountInvested: FieldRef<"Investment", 'Int'>
    readonly portfolioId: FieldRef<"Investment", 'String'>
    readonly financialInstrumentId: FieldRef<"Investment", 'String'>
    readonly stockSymbol: FieldRef<"Investment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Investment findUnique
   */
  export type InvestmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * Filter, which Investment to fetch.
     */
    where: InvestmentWhereUniqueInput
  }

  /**
   * Investment findUniqueOrThrow
   */
  export type InvestmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * Filter, which Investment to fetch.
     */
    where: InvestmentWhereUniqueInput
  }

  /**
   * Investment findFirst
   */
  export type InvestmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * Filter, which Investment to fetch.
     */
    where?: InvestmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Investments to fetch.
     */
    orderBy?: InvestmentOrderByWithRelationInput | InvestmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Investments.
     */
    cursor?: InvestmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Investments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Investments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Investments.
     */
    distinct?: InvestmentScalarFieldEnum | InvestmentScalarFieldEnum[]
  }

  /**
   * Investment findFirstOrThrow
   */
  export type InvestmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * Filter, which Investment to fetch.
     */
    where?: InvestmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Investments to fetch.
     */
    orderBy?: InvestmentOrderByWithRelationInput | InvestmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Investments.
     */
    cursor?: InvestmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Investments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Investments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Investments.
     */
    distinct?: InvestmentScalarFieldEnum | InvestmentScalarFieldEnum[]
  }

  /**
   * Investment findMany
   */
  export type InvestmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * Filter, which Investments to fetch.
     */
    where?: InvestmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Investments to fetch.
     */
    orderBy?: InvestmentOrderByWithRelationInput | InvestmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Investments.
     */
    cursor?: InvestmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Investments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Investments.
     */
    skip?: number
    distinct?: InvestmentScalarFieldEnum | InvestmentScalarFieldEnum[]
  }

  /**
   * Investment create
   */
  export type InvestmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Investment.
     */
    data: XOR<InvestmentCreateInput, InvestmentUncheckedCreateInput>
  }

  /**
   * Investment createMany
   */
  export type InvestmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Investments.
     */
    data: InvestmentCreateManyInput | InvestmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Investment createManyAndReturn
   */
  export type InvestmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * The data used to create many Investments.
     */
    data: InvestmentCreateManyInput | InvestmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Investment update
   */
  export type InvestmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Investment.
     */
    data: XOR<InvestmentUpdateInput, InvestmentUncheckedUpdateInput>
    /**
     * Choose, which Investment to update.
     */
    where: InvestmentWhereUniqueInput
  }

  /**
   * Investment updateMany
   */
  export type InvestmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Investments.
     */
    data: XOR<InvestmentUpdateManyMutationInput, InvestmentUncheckedUpdateManyInput>
    /**
     * Filter which Investments to update
     */
    where?: InvestmentWhereInput
  }

  /**
   * Investment updateManyAndReturn
   */
  export type InvestmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * The data used to update Investments.
     */
    data: XOR<InvestmentUpdateManyMutationInput, InvestmentUncheckedUpdateManyInput>
    /**
     * Filter which Investments to update
     */
    where?: InvestmentWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Investment upsert
   */
  export type InvestmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Investment to update in case it exists.
     */
    where: InvestmentWhereUniqueInput
    /**
     * In case the Investment found by the `where` argument doesn't exist, create a new Investment with this data.
     */
    create: XOR<InvestmentCreateInput, InvestmentUncheckedCreateInput>
    /**
     * In case the Investment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvestmentUpdateInput, InvestmentUncheckedUpdateInput>
  }

  /**
   * Investment delete
   */
  export type InvestmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * Filter which Investment to delete.
     */
    where: InvestmentWhereUniqueInput
  }

  /**
   * Investment deleteMany
   */
  export type InvestmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Investments to delete
     */
    where?: InvestmentWhereInput
  }

  /**
   * Investment.stock
   */
  export type Investment$stockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    where?: StockWhereInput
  }

  /**
   * Investment.portfolio
   */
  export type Investment$portfolioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvestmentPortfolio
     */
    select?: InvestmentPortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the InvestmentPortfolio
     */
    omit?: InvestmentPortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentPortfolioInclude<ExtArgs> | null
    where?: InvestmentPortfolioWhereInput
  }

  /**
   * Investment.FinancialInstrument
   */
  export type Investment$FinancialInstrumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialInstrument
     */
    select?: FinancialInstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialInstrument
     */
    omit?: FinancialInstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialInstrumentInclude<ExtArgs> | null
    where?: FinancialInstrumentWhereInput
  }

  /**
   * Investment without action
   */
  export type InvestmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
  }


  /**
   * Model FinancialInstrument
   */

  export type AggregateFinancialInstrument = {
    _count: FinancialInstrumentCountAggregateOutputType | null
    _avg: FinancialInstrumentAvgAggregateOutputType | null
    _sum: FinancialInstrumentSumAggregateOutputType | null
    _min: FinancialInstrumentMinAggregateOutputType | null
    _max: FinancialInstrumentMaxAggregateOutputType | null
  }

  export type FinancialInstrumentAvgAggregateOutputType = {
    performance: number | null
    levelRisk: number | null
    deadline: number | null
  }

  export type FinancialInstrumentSumAggregateOutputType = {
    performance: number | null
    levelRisk: number | null
    deadline: number | null
  }

  export type FinancialInstrumentMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    category: string | null
    performance: number | null
    levelRisk: number | null
    deadline: number | null
    currency: $Enums.CurrencyType | null
  }

  export type FinancialInstrumentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    category: string | null
    performance: number | null
    levelRisk: number | null
    deadline: number | null
    currency: $Enums.CurrencyType | null
  }

  export type FinancialInstrumentCountAggregateOutputType = {
    id: number
    name: number
    type: number
    category: number
    performance: number
    levelRisk: number
    deadline: number
    currency: number
    _all: number
  }


  export type FinancialInstrumentAvgAggregateInputType = {
    performance?: true
    levelRisk?: true
    deadline?: true
  }

  export type FinancialInstrumentSumAggregateInputType = {
    performance?: true
    levelRisk?: true
    deadline?: true
  }

  export type FinancialInstrumentMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    category?: true
    performance?: true
    levelRisk?: true
    deadline?: true
    currency?: true
  }

  export type FinancialInstrumentMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    category?: true
    performance?: true
    levelRisk?: true
    deadline?: true
    currency?: true
  }

  export type FinancialInstrumentCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    category?: true
    performance?: true
    levelRisk?: true
    deadline?: true
    currency?: true
    _all?: true
  }

  export type FinancialInstrumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FinancialInstrument to aggregate.
     */
    where?: FinancialInstrumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialInstruments to fetch.
     */
    orderBy?: FinancialInstrumentOrderByWithRelationInput | FinancialInstrumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FinancialInstrumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialInstruments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialInstruments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FinancialInstruments
    **/
    _count?: true | FinancialInstrumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FinancialInstrumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FinancialInstrumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FinancialInstrumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FinancialInstrumentMaxAggregateInputType
  }

  export type GetFinancialInstrumentAggregateType<T extends FinancialInstrumentAggregateArgs> = {
        [P in keyof T & keyof AggregateFinancialInstrument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFinancialInstrument[P]>
      : GetScalarType<T[P], AggregateFinancialInstrument[P]>
  }




  export type FinancialInstrumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinancialInstrumentWhereInput
    orderBy?: FinancialInstrumentOrderByWithAggregationInput | FinancialInstrumentOrderByWithAggregationInput[]
    by: FinancialInstrumentScalarFieldEnum[] | FinancialInstrumentScalarFieldEnum
    having?: FinancialInstrumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FinancialInstrumentCountAggregateInputType | true
    _avg?: FinancialInstrumentAvgAggregateInputType
    _sum?: FinancialInstrumentSumAggregateInputType
    _min?: FinancialInstrumentMinAggregateInputType
    _max?: FinancialInstrumentMaxAggregateInputType
  }

  export type FinancialInstrumentGroupByOutputType = {
    id: string
    name: string
    type: string
    category: string
    performance: number
    levelRisk: number
    deadline: number
    currency: $Enums.CurrencyType
    _count: FinancialInstrumentCountAggregateOutputType | null
    _avg: FinancialInstrumentAvgAggregateOutputType | null
    _sum: FinancialInstrumentSumAggregateOutputType | null
    _min: FinancialInstrumentMinAggregateOutputType | null
    _max: FinancialInstrumentMaxAggregateOutputType | null
  }

  type GetFinancialInstrumentGroupByPayload<T extends FinancialInstrumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FinancialInstrumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FinancialInstrumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FinancialInstrumentGroupByOutputType[P]>
            : GetScalarType<T[P], FinancialInstrumentGroupByOutputType[P]>
        }
      >
    >


  export type FinancialInstrumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    category?: boolean
    performance?: boolean
    levelRisk?: boolean
    deadline?: boolean
    currency?: boolean
    Investments?: boolean | FinancialInstrument$InvestmentsArgs<ExtArgs>
    _count?: boolean | FinancialInstrumentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["financialInstrument"]>

  export type FinancialInstrumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    category?: boolean
    performance?: boolean
    levelRisk?: boolean
    deadline?: boolean
    currency?: boolean
  }, ExtArgs["result"]["financialInstrument"]>

  export type FinancialInstrumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    category?: boolean
    performance?: boolean
    levelRisk?: boolean
    deadline?: boolean
    currency?: boolean
  }, ExtArgs["result"]["financialInstrument"]>

  export type FinancialInstrumentSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    category?: boolean
    performance?: boolean
    levelRisk?: boolean
    deadline?: boolean
    currency?: boolean
  }

  export type FinancialInstrumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "category" | "performance" | "levelRisk" | "deadline" | "currency", ExtArgs["result"]["financialInstrument"]>
  export type FinancialInstrumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Investments?: boolean | FinancialInstrument$InvestmentsArgs<ExtArgs>
    _count?: boolean | FinancialInstrumentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FinancialInstrumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type FinancialInstrumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FinancialInstrumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FinancialInstrument"
    objects: {
      Investments: Prisma.$InvestmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: string
      category: string
      performance: number
      levelRisk: number
      deadline: number
      currency: $Enums.CurrencyType
    }, ExtArgs["result"]["financialInstrument"]>
    composites: {}
  }

  type FinancialInstrumentGetPayload<S extends boolean | null | undefined | FinancialInstrumentDefaultArgs> = $Result.GetResult<Prisma.$FinancialInstrumentPayload, S>

  type FinancialInstrumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FinancialInstrumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FinancialInstrumentCountAggregateInputType | true
    }

  export interface FinancialInstrumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FinancialInstrument'], meta: { name: 'FinancialInstrument' } }
    /**
     * Find zero or one FinancialInstrument that matches the filter.
     * @param {FinancialInstrumentFindUniqueArgs} args - Arguments to find a FinancialInstrument
     * @example
     * // Get one FinancialInstrument
     * const financialInstrument = await prisma.financialInstrument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FinancialInstrumentFindUniqueArgs>(args: SelectSubset<T, FinancialInstrumentFindUniqueArgs<ExtArgs>>): Prisma__FinancialInstrumentClient<$Result.GetResult<Prisma.$FinancialInstrumentPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one FinancialInstrument that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FinancialInstrumentFindUniqueOrThrowArgs} args - Arguments to find a FinancialInstrument
     * @example
     * // Get one FinancialInstrument
     * const financialInstrument = await prisma.financialInstrument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FinancialInstrumentFindUniqueOrThrowArgs>(args: SelectSubset<T, FinancialInstrumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FinancialInstrumentClient<$Result.GetResult<Prisma.$FinancialInstrumentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first FinancialInstrument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialInstrumentFindFirstArgs} args - Arguments to find a FinancialInstrument
     * @example
     * // Get one FinancialInstrument
     * const financialInstrument = await prisma.financialInstrument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FinancialInstrumentFindFirstArgs>(args?: SelectSubset<T, FinancialInstrumentFindFirstArgs<ExtArgs>>): Prisma__FinancialInstrumentClient<$Result.GetResult<Prisma.$FinancialInstrumentPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first FinancialInstrument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialInstrumentFindFirstOrThrowArgs} args - Arguments to find a FinancialInstrument
     * @example
     * // Get one FinancialInstrument
     * const financialInstrument = await prisma.financialInstrument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FinancialInstrumentFindFirstOrThrowArgs>(args?: SelectSubset<T, FinancialInstrumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__FinancialInstrumentClient<$Result.GetResult<Prisma.$FinancialInstrumentPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more FinancialInstruments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialInstrumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FinancialInstruments
     * const financialInstruments = await prisma.financialInstrument.findMany()
     * 
     * // Get first 10 FinancialInstruments
     * const financialInstruments = await prisma.financialInstrument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const financialInstrumentWithIdOnly = await prisma.financialInstrument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FinancialInstrumentFindManyArgs>(args?: SelectSubset<T, FinancialInstrumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialInstrumentPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a FinancialInstrument.
     * @param {FinancialInstrumentCreateArgs} args - Arguments to create a FinancialInstrument.
     * @example
     * // Create one FinancialInstrument
     * const FinancialInstrument = await prisma.financialInstrument.create({
     *   data: {
     *     // ... data to create a FinancialInstrument
     *   }
     * })
     * 
     */
    create<T extends FinancialInstrumentCreateArgs>(args: SelectSubset<T, FinancialInstrumentCreateArgs<ExtArgs>>): Prisma__FinancialInstrumentClient<$Result.GetResult<Prisma.$FinancialInstrumentPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many FinancialInstruments.
     * @param {FinancialInstrumentCreateManyArgs} args - Arguments to create many FinancialInstruments.
     * @example
     * // Create many FinancialInstruments
     * const financialInstrument = await prisma.financialInstrument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FinancialInstrumentCreateManyArgs>(args?: SelectSubset<T, FinancialInstrumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FinancialInstruments and returns the data saved in the database.
     * @param {FinancialInstrumentCreateManyAndReturnArgs} args - Arguments to create many FinancialInstruments.
     * @example
     * // Create many FinancialInstruments
     * const financialInstrument = await prisma.financialInstrument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FinancialInstruments and only return the `id`
     * const financialInstrumentWithIdOnly = await prisma.financialInstrument.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FinancialInstrumentCreateManyAndReturnArgs>(args?: SelectSubset<T, FinancialInstrumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialInstrumentPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a FinancialInstrument.
     * @param {FinancialInstrumentDeleteArgs} args - Arguments to delete one FinancialInstrument.
     * @example
     * // Delete one FinancialInstrument
     * const FinancialInstrument = await prisma.financialInstrument.delete({
     *   where: {
     *     // ... filter to delete one FinancialInstrument
     *   }
     * })
     * 
     */
    delete<T extends FinancialInstrumentDeleteArgs>(args: SelectSubset<T, FinancialInstrumentDeleteArgs<ExtArgs>>): Prisma__FinancialInstrumentClient<$Result.GetResult<Prisma.$FinancialInstrumentPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one FinancialInstrument.
     * @param {FinancialInstrumentUpdateArgs} args - Arguments to update one FinancialInstrument.
     * @example
     * // Update one FinancialInstrument
     * const financialInstrument = await prisma.financialInstrument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FinancialInstrumentUpdateArgs>(args: SelectSubset<T, FinancialInstrumentUpdateArgs<ExtArgs>>): Prisma__FinancialInstrumentClient<$Result.GetResult<Prisma.$FinancialInstrumentPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more FinancialInstruments.
     * @param {FinancialInstrumentDeleteManyArgs} args - Arguments to filter FinancialInstruments to delete.
     * @example
     * // Delete a few FinancialInstruments
     * const { count } = await prisma.financialInstrument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FinancialInstrumentDeleteManyArgs>(args?: SelectSubset<T, FinancialInstrumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FinancialInstruments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialInstrumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FinancialInstruments
     * const financialInstrument = await prisma.financialInstrument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FinancialInstrumentUpdateManyArgs>(args: SelectSubset<T, FinancialInstrumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FinancialInstruments and returns the data updated in the database.
     * @param {FinancialInstrumentUpdateManyAndReturnArgs} args - Arguments to update many FinancialInstruments.
     * @example
     * // Update many FinancialInstruments
     * const financialInstrument = await prisma.financialInstrument.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FinancialInstruments and only return the `id`
     * const financialInstrumentWithIdOnly = await prisma.financialInstrument.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FinancialInstrumentUpdateManyAndReturnArgs>(args: SelectSubset<T, FinancialInstrumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialInstrumentPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one FinancialInstrument.
     * @param {FinancialInstrumentUpsertArgs} args - Arguments to update or create a FinancialInstrument.
     * @example
     * // Update or create a FinancialInstrument
     * const financialInstrument = await prisma.financialInstrument.upsert({
     *   create: {
     *     // ... data to create a FinancialInstrument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FinancialInstrument we want to update
     *   }
     * })
     */
    upsert<T extends FinancialInstrumentUpsertArgs>(args: SelectSubset<T, FinancialInstrumentUpsertArgs<ExtArgs>>): Prisma__FinancialInstrumentClient<$Result.GetResult<Prisma.$FinancialInstrumentPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of FinancialInstruments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialInstrumentCountArgs} args - Arguments to filter FinancialInstruments to count.
     * @example
     * // Count the number of FinancialInstruments
     * const count = await prisma.financialInstrument.count({
     *   where: {
     *     // ... the filter for the FinancialInstruments we want to count
     *   }
     * })
    **/
    count<T extends FinancialInstrumentCountArgs>(
      args?: Subset<T, FinancialInstrumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FinancialInstrumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FinancialInstrument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialInstrumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FinancialInstrumentAggregateArgs>(args: Subset<T, FinancialInstrumentAggregateArgs>): Prisma.PrismaPromise<GetFinancialInstrumentAggregateType<T>>

    /**
     * Group by FinancialInstrument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialInstrumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FinancialInstrumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FinancialInstrumentGroupByArgs['orderBy'] }
        : { orderBy?: FinancialInstrumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FinancialInstrumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFinancialInstrumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FinancialInstrument model
   */
  readonly fields: FinancialInstrumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FinancialInstrument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FinancialInstrumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Investments<T extends FinancialInstrument$InvestmentsArgs<ExtArgs> = {}>(args?: Subset<T, FinancialInstrument$InvestmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FinancialInstrument model
   */ 
  interface FinancialInstrumentFieldRefs {
    readonly id: FieldRef<"FinancialInstrument", 'String'>
    readonly name: FieldRef<"FinancialInstrument", 'String'>
    readonly type: FieldRef<"FinancialInstrument", 'String'>
    readonly category: FieldRef<"FinancialInstrument", 'String'>
    readonly performance: FieldRef<"FinancialInstrument", 'Float'>
    readonly levelRisk: FieldRef<"FinancialInstrument", 'Int'>
    readonly deadline: FieldRef<"FinancialInstrument", 'Int'>
    readonly currency: FieldRef<"FinancialInstrument", 'CurrencyType'>
  }
    

  // Custom InputTypes
  /**
   * FinancialInstrument findUnique
   */
  export type FinancialInstrumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialInstrument
     */
    select?: FinancialInstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialInstrument
     */
    omit?: FinancialInstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialInstrumentInclude<ExtArgs> | null
    /**
     * Filter, which FinancialInstrument to fetch.
     */
    where: FinancialInstrumentWhereUniqueInput
  }

  /**
   * FinancialInstrument findUniqueOrThrow
   */
  export type FinancialInstrumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialInstrument
     */
    select?: FinancialInstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialInstrument
     */
    omit?: FinancialInstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialInstrumentInclude<ExtArgs> | null
    /**
     * Filter, which FinancialInstrument to fetch.
     */
    where: FinancialInstrumentWhereUniqueInput
  }

  /**
   * FinancialInstrument findFirst
   */
  export type FinancialInstrumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialInstrument
     */
    select?: FinancialInstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialInstrument
     */
    omit?: FinancialInstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialInstrumentInclude<ExtArgs> | null
    /**
     * Filter, which FinancialInstrument to fetch.
     */
    where?: FinancialInstrumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialInstruments to fetch.
     */
    orderBy?: FinancialInstrumentOrderByWithRelationInput | FinancialInstrumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FinancialInstruments.
     */
    cursor?: FinancialInstrumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialInstruments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialInstruments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FinancialInstruments.
     */
    distinct?: FinancialInstrumentScalarFieldEnum | FinancialInstrumentScalarFieldEnum[]
  }

  /**
   * FinancialInstrument findFirstOrThrow
   */
  export type FinancialInstrumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialInstrument
     */
    select?: FinancialInstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialInstrument
     */
    omit?: FinancialInstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialInstrumentInclude<ExtArgs> | null
    /**
     * Filter, which FinancialInstrument to fetch.
     */
    where?: FinancialInstrumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialInstruments to fetch.
     */
    orderBy?: FinancialInstrumentOrderByWithRelationInput | FinancialInstrumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FinancialInstruments.
     */
    cursor?: FinancialInstrumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialInstruments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialInstruments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FinancialInstruments.
     */
    distinct?: FinancialInstrumentScalarFieldEnum | FinancialInstrumentScalarFieldEnum[]
  }

  /**
   * FinancialInstrument findMany
   */
  export type FinancialInstrumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialInstrument
     */
    select?: FinancialInstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialInstrument
     */
    omit?: FinancialInstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialInstrumentInclude<ExtArgs> | null
    /**
     * Filter, which FinancialInstruments to fetch.
     */
    where?: FinancialInstrumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialInstruments to fetch.
     */
    orderBy?: FinancialInstrumentOrderByWithRelationInput | FinancialInstrumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FinancialInstruments.
     */
    cursor?: FinancialInstrumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialInstruments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialInstruments.
     */
    skip?: number
    distinct?: FinancialInstrumentScalarFieldEnum | FinancialInstrumentScalarFieldEnum[]
  }

  /**
   * FinancialInstrument create
   */
  export type FinancialInstrumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialInstrument
     */
    select?: FinancialInstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialInstrument
     */
    omit?: FinancialInstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialInstrumentInclude<ExtArgs> | null
    /**
     * The data needed to create a FinancialInstrument.
     */
    data: XOR<FinancialInstrumentCreateInput, FinancialInstrumentUncheckedCreateInput>
  }

  /**
   * FinancialInstrument createMany
   */
  export type FinancialInstrumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FinancialInstruments.
     */
    data: FinancialInstrumentCreateManyInput | FinancialInstrumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FinancialInstrument createManyAndReturn
   */
  export type FinancialInstrumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialInstrument
     */
    select?: FinancialInstrumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialInstrument
     */
    omit?: FinancialInstrumentOmit<ExtArgs> | null
    /**
     * The data used to create many FinancialInstruments.
     */
    data: FinancialInstrumentCreateManyInput | FinancialInstrumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FinancialInstrument update
   */
  export type FinancialInstrumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialInstrument
     */
    select?: FinancialInstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialInstrument
     */
    omit?: FinancialInstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialInstrumentInclude<ExtArgs> | null
    /**
     * The data needed to update a FinancialInstrument.
     */
    data: XOR<FinancialInstrumentUpdateInput, FinancialInstrumentUncheckedUpdateInput>
    /**
     * Choose, which FinancialInstrument to update.
     */
    where: FinancialInstrumentWhereUniqueInput
  }

  /**
   * FinancialInstrument updateMany
   */
  export type FinancialInstrumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FinancialInstruments.
     */
    data: XOR<FinancialInstrumentUpdateManyMutationInput, FinancialInstrumentUncheckedUpdateManyInput>
    /**
     * Filter which FinancialInstruments to update
     */
    where?: FinancialInstrumentWhereInput
  }

  /**
   * FinancialInstrument updateManyAndReturn
   */
  export type FinancialInstrumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialInstrument
     */
    select?: FinancialInstrumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialInstrument
     */
    omit?: FinancialInstrumentOmit<ExtArgs> | null
    /**
     * The data used to update FinancialInstruments.
     */
    data: XOR<FinancialInstrumentUpdateManyMutationInput, FinancialInstrumentUncheckedUpdateManyInput>
    /**
     * Filter which FinancialInstruments to update
     */
    where?: FinancialInstrumentWhereInput
  }

  /**
   * FinancialInstrument upsert
   */
  export type FinancialInstrumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialInstrument
     */
    select?: FinancialInstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialInstrument
     */
    omit?: FinancialInstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialInstrumentInclude<ExtArgs> | null
    /**
     * The filter to search for the FinancialInstrument to update in case it exists.
     */
    where: FinancialInstrumentWhereUniqueInput
    /**
     * In case the FinancialInstrument found by the `where` argument doesn't exist, create a new FinancialInstrument with this data.
     */
    create: XOR<FinancialInstrumentCreateInput, FinancialInstrumentUncheckedCreateInput>
    /**
     * In case the FinancialInstrument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FinancialInstrumentUpdateInput, FinancialInstrumentUncheckedUpdateInput>
  }

  /**
   * FinancialInstrument delete
   */
  export type FinancialInstrumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialInstrument
     */
    select?: FinancialInstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialInstrument
     */
    omit?: FinancialInstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialInstrumentInclude<ExtArgs> | null
    /**
     * Filter which FinancialInstrument to delete.
     */
    where: FinancialInstrumentWhereUniqueInput
  }

  /**
   * FinancialInstrument deleteMany
   */
  export type FinancialInstrumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FinancialInstruments to delete
     */
    where?: FinancialInstrumentWhereInput
  }

  /**
   * FinancialInstrument.Investments
   */
  export type FinancialInstrument$InvestmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    where?: InvestmentWhereInput
    orderBy?: InvestmentOrderByWithRelationInput | InvestmentOrderByWithRelationInput[]
    cursor?: InvestmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvestmentScalarFieldEnum | InvestmentScalarFieldEnum[]
  }

  /**
   * FinancialInstrument without action
   */
  export type FinancialInstrumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialInstrument
     */
    select?: FinancialInstrumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialInstrument
     */
    omit?: FinancialInstrumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialInstrumentInclude<ExtArgs> | null
  }


  /**
   * Model News
   */

  export type AggregateNews = {
    _count: NewsCountAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  export type NewsMinAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    source: string | null
    dateNews: Date | null
    category: string | null
    createdAt: Date | null
  }

  export type NewsMaxAggregateOutputType = {
    id: string | null
    title: string | null
    content: string | null
    source: string | null
    dateNews: Date | null
    category: string | null
    createdAt: Date | null
  }

  export type NewsCountAggregateOutputType = {
    id: number
    title: number
    content: number
    source: number
    dateNews: number
    category: number
    createdAt: number
    _all: number
  }


  export type NewsMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    source?: true
    dateNews?: true
    category?: true
    createdAt?: true
  }

  export type NewsMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    source?: true
    dateNews?: true
    category?: true
    createdAt?: true
  }

  export type NewsCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    source?: true
    dateNews?: true
    category?: true
    createdAt?: true
    _all?: true
  }

  export type NewsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which News to aggregate.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: NewsOrderByWithRelationInput | NewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned News
    **/
    _count?: true | NewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsMaxAggregateInputType
  }

  export type GetNewsAggregateType<T extends NewsAggregateArgs> = {
        [P in keyof T & keyof AggregateNews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNews[P]>
      : GetScalarType<T[P], AggregateNews[P]>
  }




  export type NewsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewsWhereInput
    orderBy?: NewsOrderByWithAggregationInput | NewsOrderByWithAggregationInput[]
    by: NewsScalarFieldEnum[] | NewsScalarFieldEnum
    having?: NewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsCountAggregateInputType | true
    _min?: NewsMinAggregateInputType
    _max?: NewsMaxAggregateInputType
  }

  export type NewsGroupByOutputType = {
    id: string
    title: string
    content: string
    source: string
    dateNews: Date
    category: string
    createdAt: Date
    _count: NewsCountAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  type GetNewsGroupByPayload<T extends NewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsGroupByOutputType[P]>
            : GetScalarType<T[P], NewsGroupByOutputType[P]>
        }
      >
    >


  export type NewsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    source?: boolean
    dateNews?: boolean
    category?: boolean
    createdAt?: boolean
    comment?: boolean | News$commentArgs<ExtArgs>
    _count?: boolean | NewsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["news"]>

  export type NewsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    source?: boolean
    dateNews?: boolean
    category?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["news"]>

  export type NewsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    source?: boolean
    dateNews?: boolean
    category?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["news"]>

  export type NewsSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    source?: boolean
    dateNews?: boolean
    category?: boolean
    createdAt?: boolean
  }

  export type NewsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "content" | "source" | "dateNews" | "category" | "createdAt", ExtArgs["result"]["news"]>
  export type NewsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comment?: boolean | News$commentArgs<ExtArgs>
    _count?: boolean | NewsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NewsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type NewsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $NewsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "News"
    objects: {
      comment: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      content: string
      source: string
      dateNews: Date
      category: string
      createdAt: Date
    }, ExtArgs["result"]["news"]>
    composites: {}
  }

  type NewsGetPayload<S extends boolean | null | undefined | NewsDefaultArgs> = $Result.GetResult<Prisma.$NewsPayload, S>

  type NewsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NewsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NewsCountAggregateInputType | true
    }

  export interface NewsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['News'], meta: { name: 'News' } }
    /**
     * Find zero or one News that matches the filter.
     * @param {NewsFindUniqueArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NewsFindUniqueArgs>(args: SelectSubset<T, NewsFindUniqueArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one News that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NewsFindUniqueOrThrowArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NewsFindUniqueOrThrowArgs>(args: SelectSubset<T, NewsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindFirstArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NewsFindFirstArgs>(args?: SelectSubset<T, NewsFindFirstArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first News that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindFirstOrThrowArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NewsFindFirstOrThrowArgs>(args?: SelectSubset<T, NewsFindFirstOrThrowArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all News
     * const news = await prisma.news.findMany()
     * 
     * // Get first 10 News
     * const news = await prisma.news.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsWithIdOnly = await prisma.news.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NewsFindManyArgs>(args?: SelectSubset<T, NewsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a News.
     * @param {NewsCreateArgs} args - Arguments to create a News.
     * @example
     * // Create one News
     * const News = await prisma.news.create({
     *   data: {
     *     // ... data to create a News
     *   }
     * })
     * 
     */
    create<T extends NewsCreateArgs>(args: SelectSubset<T, NewsCreateArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many News.
     * @param {NewsCreateManyArgs} args - Arguments to create many News.
     * @example
     * // Create many News
     * const news = await prisma.news.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NewsCreateManyArgs>(args?: SelectSubset<T, NewsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many News and returns the data saved in the database.
     * @param {NewsCreateManyAndReturnArgs} args - Arguments to create many News.
     * @example
     * // Create many News
     * const news = await prisma.news.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many News and only return the `id`
     * const newsWithIdOnly = await prisma.news.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NewsCreateManyAndReturnArgs>(args?: SelectSubset<T, NewsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a News.
     * @param {NewsDeleteArgs} args - Arguments to delete one News.
     * @example
     * // Delete one News
     * const News = await prisma.news.delete({
     *   where: {
     *     // ... filter to delete one News
     *   }
     * })
     * 
     */
    delete<T extends NewsDeleteArgs>(args: SelectSubset<T, NewsDeleteArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one News.
     * @param {NewsUpdateArgs} args - Arguments to update one News.
     * @example
     * // Update one News
     * const news = await prisma.news.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NewsUpdateArgs>(args: SelectSubset<T, NewsUpdateArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more News.
     * @param {NewsDeleteManyArgs} args - Arguments to filter News to delete.
     * @example
     * // Delete a few News
     * const { count } = await prisma.news.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NewsDeleteManyArgs>(args?: SelectSubset<T, NewsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many News
     * const news = await prisma.news.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NewsUpdateManyArgs>(args: SelectSubset<T, NewsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more News and returns the data updated in the database.
     * @param {NewsUpdateManyAndReturnArgs} args - Arguments to update many News.
     * @example
     * // Update many News
     * const news = await prisma.news.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more News and only return the `id`
     * const newsWithIdOnly = await prisma.news.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NewsUpdateManyAndReturnArgs>(args: SelectSubset<T, NewsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one News.
     * @param {NewsUpsertArgs} args - Arguments to update or create a News.
     * @example
     * // Update or create a News
     * const news = await prisma.news.upsert({
     *   create: {
     *     // ... data to create a News
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the News we want to update
     *   }
     * })
     */
    upsert<T extends NewsUpsertArgs>(args: SelectSubset<T, NewsUpsertArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCountArgs} args - Arguments to filter News to count.
     * @example
     * // Count the number of News
     * const count = await prisma.news.count({
     *   where: {
     *     // ... the filter for the News we want to count
     *   }
     * })
    **/
    count<T extends NewsCountArgs>(
      args?: Subset<T, NewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsAggregateArgs>(args: Subset<T, NewsAggregateArgs>): Prisma.PrismaPromise<GetNewsAggregateType<T>>

    /**
     * Group by News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewsGroupByArgs['orderBy'] }
        : { orderBy?: NewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the News model
   */
  readonly fields: NewsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for News.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NewsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    comment<T extends News$commentArgs<ExtArgs> = {}>(args?: Subset<T, News$commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the News model
   */ 
  interface NewsFieldRefs {
    readonly id: FieldRef<"News", 'String'>
    readonly title: FieldRef<"News", 'String'>
    readonly content: FieldRef<"News", 'String'>
    readonly source: FieldRef<"News", 'String'>
    readonly dateNews: FieldRef<"News", 'DateTime'>
    readonly category: FieldRef<"News", 'String'>
    readonly createdAt: FieldRef<"News", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * News findUnique
   */
  export type NewsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the News
     */
    omit?: NewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * Filter, which News to fetch.
     */
    where: NewsWhereUniqueInput
  }

  /**
   * News findUniqueOrThrow
   */
  export type NewsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the News
     */
    omit?: NewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * Filter, which News to fetch.
     */
    where: NewsWhereUniqueInput
  }

  /**
   * News findFirst
   */
  export type NewsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the News
     */
    omit?: NewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * Filter, which News to fetch.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: NewsOrderByWithRelationInput | NewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for News.
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of News.
     */
    distinct?: NewsScalarFieldEnum | NewsScalarFieldEnum[]
  }

  /**
   * News findFirstOrThrow
   */
  export type NewsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the News
     */
    omit?: NewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * Filter, which News to fetch.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: NewsOrderByWithRelationInput | NewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for News.
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of News.
     */
    distinct?: NewsScalarFieldEnum | NewsScalarFieldEnum[]
  }

  /**
   * News findMany
   */
  export type NewsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the News
     */
    omit?: NewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * Filter, which News to fetch.
     */
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     */
    orderBy?: NewsOrderByWithRelationInput | NewsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing News.
     */
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     */
    skip?: number
    distinct?: NewsScalarFieldEnum | NewsScalarFieldEnum[]
  }

  /**
   * News create
   */
  export type NewsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the News
     */
    omit?: NewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * The data needed to create a News.
     */
    data: XOR<NewsCreateInput, NewsUncheckedCreateInput>
  }

  /**
   * News createMany
   */
  export type NewsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many News.
     */
    data: NewsCreateManyInput | NewsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * News createManyAndReturn
   */
  export type NewsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the News
     */
    omit?: NewsOmit<ExtArgs> | null
    /**
     * The data used to create many News.
     */
    data: NewsCreateManyInput | NewsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * News update
   */
  export type NewsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the News
     */
    omit?: NewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * The data needed to update a News.
     */
    data: XOR<NewsUpdateInput, NewsUncheckedUpdateInput>
    /**
     * Choose, which News to update.
     */
    where: NewsWhereUniqueInput
  }

  /**
   * News updateMany
   */
  export type NewsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update News.
     */
    data: XOR<NewsUpdateManyMutationInput, NewsUncheckedUpdateManyInput>
    /**
     * Filter which News to update
     */
    where?: NewsWhereInput
  }

  /**
   * News updateManyAndReturn
   */
  export type NewsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the News
     */
    omit?: NewsOmit<ExtArgs> | null
    /**
     * The data used to update News.
     */
    data: XOR<NewsUpdateManyMutationInput, NewsUncheckedUpdateManyInput>
    /**
     * Filter which News to update
     */
    where?: NewsWhereInput
  }

  /**
   * News upsert
   */
  export type NewsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the News
     */
    omit?: NewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * The filter to search for the News to update in case it exists.
     */
    where: NewsWhereUniqueInput
    /**
     * In case the News found by the `where` argument doesn't exist, create a new News with this data.
     */
    create: XOR<NewsCreateInput, NewsUncheckedCreateInput>
    /**
     * In case the News was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NewsUpdateInput, NewsUncheckedUpdateInput>
  }

  /**
   * News delete
   */
  export type NewsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the News
     */
    omit?: NewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    /**
     * Filter which News to delete.
     */
    where: NewsWhereUniqueInput
  }

  /**
   * News deleteMany
   */
  export type NewsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which News to delete
     */
    where?: NewsWhereInput
  }

  /**
   * News.comment
   */
  export type News$commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * News without action
   */
  export type NewsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the News
     */
    omit?: NewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    dateComment: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    newsId: string | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    dateComment: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    newsId: string | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    content: number
    dateComment: number
    createdAt: number
    updatedAt: number
    userId: number
    newsId: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    content?: true
    dateComment?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    newsId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    content?: true
    dateComment?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    newsId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    content?: true
    dateComment?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    newsId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    content: string
    dateComment: Date
    createdAt: Date
    updatedAt: Date
    userId: string | null
    newsId: string | null
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    dateComment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    newsId?: boolean
    news?: boolean | Comment$newsArgs<ExtArgs>
    user?: boolean | Comment$userArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    dateComment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    newsId?: boolean
    news?: boolean | Comment$newsArgs<ExtArgs>
    user?: boolean | Comment$userArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    dateComment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    newsId?: boolean
    news?: boolean | Comment$newsArgs<ExtArgs>
    user?: boolean | Comment$userArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    content?: boolean
    dateComment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    newsId?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "dateComment" | "createdAt" | "updatedAt" | "userId" | "newsId", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    news?: boolean | Comment$newsArgs<ExtArgs>
    user?: boolean | Comment$userArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    news?: boolean | Comment$newsArgs<ExtArgs>
    user?: boolean | Comment$userArgs<ExtArgs>
  }
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    news?: boolean | Comment$newsArgs<ExtArgs>
    user?: boolean | Comment$userArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      news: Prisma.$NewsPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      dateComment: Date
      createdAt: Date
      updatedAt: Date
      userId: string | null
      newsId: string | null
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    news<T extends Comment$newsArgs<ExtArgs> = {}>(args?: Subset<T, Comment$newsArgs<ExtArgs>>): Prisma__NewsClient<$Result.GetResult<Prisma.$NewsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    user<T extends Comment$userArgs<ExtArgs> = {}>(args?: Subset<T, Comment$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly dateComment: FieldRef<"Comment", 'DateTime'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
    readonly userId: FieldRef<"Comment", 'String'>
    readonly newsId: FieldRef<"Comment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }

  /**
   * Comment.news
   */
  export type Comment$newsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the News
     */
    select?: NewsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the News
     */
    omit?: NewsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NewsInclude<ExtArgs> | null
    where?: NewsWhereInput
  }

  /**
   * Comment.user
   */
  export type Comment$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model wallet
   */

  export type AggregateWallet = {
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  export type WalletAvgAggregateOutputType = {
    balancePesos: number | null
    balanceDollars: number | null
  }

  export type WalletSumAggregateOutputType = {
    balancePesos: number | null
    balanceDollars: number | null
  }

  export type WalletMinAggregateOutputType = {
    id: string | null
    userId: string | null
    balancePesos: number | null
    balanceDollars: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WalletMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    balancePesos: number | null
    balanceDollars: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WalletCountAggregateOutputType = {
    id: number
    userId: number
    balancePesos: number
    balanceDollars: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WalletAvgAggregateInputType = {
    balancePesos?: true
    balanceDollars?: true
  }

  export type WalletSumAggregateInputType = {
    balancePesos?: true
    balanceDollars?: true
  }

  export type WalletMinAggregateInputType = {
    id?: true
    userId?: true
    balancePesos?: true
    balanceDollars?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WalletMaxAggregateInputType = {
    id?: true
    userId?: true
    balancePesos?: true
    balanceDollars?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WalletCountAggregateInputType = {
    id?: true
    userId?: true
    balancePesos?: true
    balanceDollars?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WalletAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which wallet to aggregate.
     */
    where?: walletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets to fetch.
     */
    orderBy?: walletOrderByWithRelationInput | walletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: walletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned wallets
    **/
    _count?: true | WalletCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WalletAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WalletSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletMaxAggregateInputType
  }

  export type GetWalletAggregateType<T extends WalletAggregateArgs> = {
        [P in keyof T & keyof AggregateWallet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWallet[P]>
      : GetScalarType<T[P], AggregateWallet[P]>
  }




  export type walletGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: walletWhereInput
    orderBy?: walletOrderByWithAggregationInput | walletOrderByWithAggregationInput[]
    by: WalletScalarFieldEnum[] | WalletScalarFieldEnum
    having?: walletScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletCountAggregateInputType | true
    _avg?: WalletAvgAggregateInputType
    _sum?: WalletSumAggregateInputType
    _min?: WalletMinAggregateInputType
    _max?: WalletMaxAggregateInputType
  }

  export type WalletGroupByOutputType = {
    id: string
    userId: string
    balancePesos: number
    balanceDollars: number
    createdAt: Date
    updatedAt: Date
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  type GetWalletGroupByPayload<T extends walletGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WalletGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletGroupByOutputType[P]>
            : GetScalarType<T[P], WalletGroupByOutputType[P]>
        }
      >
    >


  export type walletSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    balancePesos?: boolean
    balanceDollars?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transactions?: boolean | wallet$transactionsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | WalletCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type walletSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    balancePesos?: boolean
    balanceDollars?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type walletSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    balancePesos?: boolean
    balanceDollars?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type walletSelectScalar = {
    id?: boolean
    userId?: boolean
    balancePesos?: boolean
    balanceDollars?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type walletOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "balancePesos" | "balanceDollars" | "createdAt" | "updatedAt", ExtArgs["result"]["wallet"]>
  export type walletInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | wallet$transactionsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | WalletCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type walletIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type walletIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $walletPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "wallet"
    objects: {
      transactions: Prisma.$WalletTransactionPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      balancePesos: number
      balanceDollars: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["wallet"]>
    composites: {}
  }

  type walletGetPayload<S extends boolean | null | undefined | walletDefaultArgs> = $Result.GetResult<Prisma.$walletPayload, S>

  type walletCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<walletFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WalletCountAggregateInputType | true
    }

  export interface walletDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['wallet'], meta: { name: 'wallet' } }
    /**
     * Find zero or one Wallet that matches the filter.
     * @param {walletFindUniqueArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends walletFindUniqueArgs>(args: SelectSubset<T, walletFindUniqueArgs<ExtArgs>>): Prisma__walletClient<$Result.GetResult<Prisma.$walletPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Wallet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {walletFindUniqueOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends walletFindUniqueOrThrowArgs>(args: SelectSubset<T, walletFindUniqueOrThrowArgs<ExtArgs>>): Prisma__walletClient<$Result.GetResult<Prisma.$walletPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Wallet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walletFindFirstArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends walletFindFirstArgs>(args?: SelectSubset<T, walletFindFirstArgs<ExtArgs>>): Prisma__walletClient<$Result.GetResult<Prisma.$walletPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Wallet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walletFindFirstOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends walletFindFirstOrThrowArgs>(args?: SelectSubset<T, walletFindFirstOrThrowArgs<ExtArgs>>): Prisma__walletClient<$Result.GetResult<Prisma.$walletPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Wallets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walletFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wallets
     * const wallets = await prisma.wallet.findMany()
     * 
     * // Get first 10 Wallets
     * const wallets = await prisma.wallet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const walletWithIdOnly = await prisma.wallet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends walletFindManyArgs>(args?: SelectSubset<T, walletFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$walletPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Wallet.
     * @param {walletCreateArgs} args - Arguments to create a Wallet.
     * @example
     * // Create one Wallet
     * const Wallet = await prisma.wallet.create({
     *   data: {
     *     // ... data to create a Wallet
     *   }
     * })
     * 
     */
    create<T extends walletCreateArgs>(args: SelectSubset<T, walletCreateArgs<ExtArgs>>): Prisma__walletClient<$Result.GetResult<Prisma.$walletPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Wallets.
     * @param {walletCreateManyArgs} args - Arguments to create many Wallets.
     * @example
     * // Create many Wallets
     * const wallet = await prisma.wallet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends walletCreateManyArgs>(args?: SelectSubset<T, walletCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Wallets and returns the data saved in the database.
     * @param {walletCreateManyAndReturnArgs} args - Arguments to create many Wallets.
     * @example
     * // Create many Wallets
     * const wallet = await prisma.wallet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Wallets and only return the `id`
     * const walletWithIdOnly = await prisma.wallet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends walletCreateManyAndReturnArgs>(args?: SelectSubset<T, walletCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$walletPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Wallet.
     * @param {walletDeleteArgs} args - Arguments to delete one Wallet.
     * @example
     * // Delete one Wallet
     * const Wallet = await prisma.wallet.delete({
     *   where: {
     *     // ... filter to delete one Wallet
     *   }
     * })
     * 
     */
    delete<T extends walletDeleteArgs>(args: SelectSubset<T, walletDeleteArgs<ExtArgs>>): Prisma__walletClient<$Result.GetResult<Prisma.$walletPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Wallet.
     * @param {walletUpdateArgs} args - Arguments to update one Wallet.
     * @example
     * // Update one Wallet
     * const wallet = await prisma.wallet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends walletUpdateArgs>(args: SelectSubset<T, walletUpdateArgs<ExtArgs>>): Prisma__walletClient<$Result.GetResult<Prisma.$walletPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Wallets.
     * @param {walletDeleteManyArgs} args - Arguments to filter Wallets to delete.
     * @example
     * // Delete a few Wallets
     * const { count } = await prisma.wallet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends walletDeleteManyArgs>(args?: SelectSubset<T, walletDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walletUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wallets
     * const wallet = await prisma.wallet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends walletUpdateManyArgs>(args: SelectSubset<T, walletUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets and returns the data updated in the database.
     * @param {walletUpdateManyAndReturnArgs} args - Arguments to update many Wallets.
     * @example
     * // Update many Wallets
     * const wallet = await prisma.wallet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Wallets and only return the `id`
     * const walletWithIdOnly = await prisma.wallet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends walletUpdateManyAndReturnArgs>(args: SelectSubset<T, walletUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$walletPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Wallet.
     * @param {walletUpsertArgs} args - Arguments to update or create a Wallet.
     * @example
     * // Update or create a Wallet
     * const wallet = await prisma.wallet.upsert({
     *   create: {
     *     // ... data to create a Wallet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wallet we want to update
     *   }
     * })
     */
    upsert<T extends walletUpsertArgs>(args: SelectSubset<T, walletUpsertArgs<ExtArgs>>): Prisma__walletClient<$Result.GetResult<Prisma.$walletPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walletCountArgs} args - Arguments to filter Wallets to count.
     * @example
     * // Count the number of Wallets
     * const count = await prisma.wallet.count({
     *   where: {
     *     // ... the filter for the Wallets we want to count
     *   }
     * })
    **/
    count<T extends walletCountArgs>(
      args?: Subset<T, walletCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletAggregateArgs>(args: Subset<T, WalletAggregateArgs>): Prisma.PrismaPromise<GetWalletAggregateType<T>>

    /**
     * Group by Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walletGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends walletGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: walletGroupByArgs['orderBy'] }
        : { orderBy?: walletGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, walletGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the wallet model
   */
  readonly fields: walletFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for wallet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__walletClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transactions<T extends wallet$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, wallet$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the wallet model
   */ 
  interface walletFieldRefs {
    readonly id: FieldRef<"wallet", 'String'>
    readonly userId: FieldRef<"wallet", 'String'>
    readonly balancePesos: FieldRef<"wallet", 'Int'>
    readonly balanceDollars: FieldRef<"wallet", 'Int'>
    readonly createdAt: FieldRef<"wallet", 'DateTime'>
    readonly updatedAt: FieldRef<"wallet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * wallet findUnique
   */
  export type walletFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet
     */
    select?: walletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet
     */
    omit?: walletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletInclude<ExtArgs> | null
    /**
     * Filter, which wallet to fetch.
     */
    where: walletWhereUniqueInput
  }

  /**
   * wallet findUniqueOrThrow
   */
  export type walletFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet
     */
    select?: walletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet
     */
    omit?: walletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletInclude<ExtArgs> | null
    /**
     * Filter, which wallet to fetch.
     */
    where: walletWhereUniqueInput
  }

  /**
   * wallet findFirst
   */
  export type walletFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet
     */
    select?: walletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet
     */
    omit?: walletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletInclude<ExtArgs> | null
    /**
     * Filter, which wallet to fetch.
     */
    where?: walletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets to fetch.
     */
    orderBy?: walletOrderByWithRelationInput | walletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for wallets.
     */
    cursor?: walletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of wallets.
     */
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * wallet findFirstOrThrow
   */
  export type walletFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet
     */
    select?: walletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet
     */
    omit?: walletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletInclude<ExtArgs> | null
    /**
     * Filter, which wallet to fetch.
     */
    where?: walletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets to fetch.
     */
    orderBy?: walletOrderByWithRelationInput | walletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for wallets.
     */
    cursor?: walletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of wallets.
     */
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * wallet findMany
   */
  export type walletFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet
     */
    select?: walletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet
     */
    omit?: walletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletInclude<ExtArgs> | null
    /**
     * Filter, which wallets to fetch.
     */
    where?: walletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets to fetch.
     */
    orderBy?: walletOrderByWithRelationInput | walletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing wallets.
     */
    cursor?: walletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets.
     */
    skip?: number
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * wallet create
   */
  export type walletCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet
     */
    select?: walletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet
     */
    omit?: walletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletInclude<ExtArgs> | null
    /**
     * The data needed to create a wallet.
     */
    data: XOR<walletCreateInput, walletUncheckedCreateInput>
  }

  /**
   * wallet createMany
   */
  export type walletCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many wallets.
     */
    data: walletCreateManyInput | walletCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * wallet createManyAndReturn
   */
  export type walletCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet
     */
    select?: walletSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the wallet
     */
    omit?: walletOmit<ExtArgs> | null
    /**
     * The data used to create many wallets.
     */
    data: walletCreateManyInput | walletCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * wallet update
   */
  export type walletUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet
     */
    select?: walletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet
     */
    omit?: walletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletInclude<ExtArgs> | null
    /**
     * The data needed to update a wallet.
     */
    data: XOR<walletUpdateInput, walletUncheckedUpdateInput>
    /**
     * Choose, which wallet to update.
     */
    where: walletWhereUniqueInput
  }

  /**
   * wallet updateMany
   */
  export type walletUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update wallets.
     */
    data: XOR<walletUpdateManyMutationInput, walletUncheckedUpdateManyInput>
    /**
     * Filter which wallets to update
     */
    where?: walletWhereInput
  }

  /**
   * wallet updateManyAndReturn
   */
  export type walletUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet
     */
    select?: walletSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the wallet
     */
    omit?: walletOmit<ExtArgs> | null
    /**
     * The data used to update wallets.
     */
    data: XOR<walletUpdateManyMutationInput, walletUncheckedUpdateManyInput>
    /**
     * Filter which wallets to update
     */
    where?: walletWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * wallet upsert
   */
  export type walletUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet
     */
    select?: walletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet
     */
    omit?: walletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletInclude<ExtArgs> | null
    /**
     * The filter to search for the wallet to update in case it exists.
     */
    where: walletWhereUniqueInput
    /**
     * In case the wallet found by the `where` argument doesn't exist, create a new wallet with this data.
     */
    create: XOR<walletCreateInput, walletUncheckedCreateInput>
    /**
     * In case the wallet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<walletUpdateInput, walletUncheckedUpdateInput>
  }

  /**
   * wallet delete
   */
  export type walletDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet
     */
    select?: walletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet
     */
    omit?: walletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletInclude<ExtArgs> | null
    /**
     * Filter which wallet to delete.
     */
    where: walletWhereUniqueInput
  }

  /**
   * wallet deleteMany
   */
  export type walletDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which wallets to delete
     */
    where?: walletWhereInput
  }

  /**
   * wallet.transactions
   */
  export type wallet$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    where?: WalletTransactionWhereInput
    orderBy?: WalletTransactionOrderByWithRelationInput | WalletTransactionOrderByWithRelationInput[]
    cursor?: WalletTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WalletTransactionScalarFieldEnum | WalletTransactionScalarFieldEnum[]
  }

  /**
   * wallet without action
   */
  export type walletDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet
     */
    select?: walletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet
     */
    omit?: walletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletInclude<ExtArgs> | null
  }


  /**
   * Model WalletTransaction
   */

  export type AggregateWalletTransaction = {
    _count: WalletTransactionCountAggregateOutputType | null
    _avg: WalletTransactionAvgAggregateOutputType | null
    _sum: WalletTransactionSumAggregateOutputType | null
    _min: WalletTransactionMinAggregateOutputType | null
    _max: WalletTransactionMaxAggregateOutputType | null
  }

  export type WalletTransactionAvgAggregateOutputType = {
    amount: number | null
  }

  export type WalletTransactionSumAggregateOutputType = {
    amount: number | null
  }

  export type WalletTransactionMinAggregateOutputType = {
    id: string | null
    walletId: string | null
    type: $Enums.TransactionType | null
    amount: number | null
    currency: $Enums.CurrencyType | null
    description: string | null
    createdAt: Date | null
  }

  export type WalletTransactionMaxAggregateOutputType = {
    id: string | null
    walletId: string | null
    type: $Enums.TransactionType | null
    amount: number | null
    currency: $Enums.CurrencyType | null
    description: string | null
    createdAt: Date | null
  }

  export type WalletTransactionCountAggregateOutputType = {
    id: number
    walletId: number
    type: number
    amount: number
    currency: number
    description: number
    createdAt: number
    _all: number
  }


  export type WalletTransactionAvgAggregateInputType = {
    amount?: true
  }

  export type WalletTransactionSumAggregateInputType = {
    amount?: true
  }

  export type WalletTransactionMinAggregateInputType = {
    id?: true
    walletId?: true
    type?: true
    amount?: true
    currency?: true
    description?: true
    createdAt?: true
  }

  export type WalletTransactionMaxAggregateInputType = {
    id?: true
    walletId?: true
    type?: true
    amount?: true
    currency?: true
    description?: true
    createdAt?: true
  }

  export type WalletTransactionCountAggregateInputType = {
    id?: true
    walletId?: true
    type?: true
    amount?: true
    currency?: true
    description?: true
    createdAt?: true
    _all?: true
  }

  export type WalletTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WalletTransaction to aggregate.
     */
    where?: WalletTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletTransactions to fetch.
     */
    orderBy?: WalletTransactionOrderByWithRelationInput | WalletTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WalletTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WalletTransactions
    **/
    _count?: true | WalletTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WalletTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WalletTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletTransactionMaxAggregateInputType
  }

  export type GetWalletTransactionAggregateType<T extends WalletTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateWalletTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWalletTransaction[P]>
      : GetScalarType<T[P], AggregateWalletTransaction[P]>
  }




  export type WalletTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WalletTransactionWhereInput
    orderBy?: WalletTransactionOrderByWithAggregationInput | WalletTransactionOrderByWithAggregationInput[]
    by: WalletTransactionScalarFieldEnum[] | WalletTransactionScalarFieldEnum
    having?: WalletTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletTransactionCountAggregateInputType | true
    _avg?: WalletTransactionAvgAggregateInputType
    _sum?: WalletTransactionSumAggregateInputType
    _min?: WalletTransactionMinAggregateInputType
    _max?: WalletTransactionMaxAggregateInputType
  }

  export type WalletTransactionGroupByOutputType = {
    id: string
    walletId: string
    type: $Enums.TransactionType
    amount: number
    currency: $Enums.CurrencyType
    description: string | null
    createdAt: Date
    _count: WalletTransactionCountAggregateOutputType | null
    _avg: WalletTransactionAvgAggregateOutputType | null
    _sum: WalletTransactionSumAggregateOutputType | null
    _min: WalletTransactionMinAggregateOutputType | null
    _max: WalletTransactionMaxAggregateOutputType | null
  }

  type GetWalletTransactionGroupByPayload<T extends WalletTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WalletTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], WalletTransactionGroupByOutputType[P]>
        }
      >
    >


  export type WalletTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletId?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    description?: boolean
    createdAt?: boolean
    wallet?: boolean | walletDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["walletTransaction"]>

  export type WalletTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletId?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    description?: boolean
    createdAt?: boolean
    wallet?: boolean | walletDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["walletTransaction"]>

  export type WalletTransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletId?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    description?: boolean
    createdAt?: boolean
    wallet?: boolean | walletDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["walletTransaction"]>

  export type WalletTransactionSelectScalar = {
    id?: boolean
    walletId?: boolean
    type?: boolean
    amount?: boolean
    currency?: boolean
    description?: boolean
    createdAt?: boolean
  }

  export type WalletTransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "walletId" | "type" | "amount" | "currency" | "description" | "createdAt", ExtArgs["result"]["walletTransaction"]>
  export type WalletTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wallet?: boolean | walletDefaultArgs<ExtArgs>
  }
  export type WalletTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wallet?: boolean | walletDefaultArgs<ExtArgs>
  }
  export type WalletTransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wallet?: boolean | walletDefaultArgs<ExtArgs>
  }

  export type $WalletTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WalletTransaction"
    objects: {
      wallet: Prisma.$walletPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      walletId: string
      type: $Enums.TransactionType
      amount: number
      currency: $Enums.CurrencyType
      description: string | null
      createdAt: Date
    }, ExtArgs["result"]["walletTransaction"]>
    composites: {}
  }

  type WalletTransactionGetPayload<S extends boolean | null | undefined | WalletTransactionDefaultArgs> = $Result.GetResult<Prisma.$WalletTransactionPayload, S>

  type WalletTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WalletTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WalletTransactionCountAggregateInputType | true
    }

  export interface WalletTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WalletTransaction'], meta: { name: 'WalletTransaction' } }
    /**
     * Find zero or one WalletTransaction that matches the filter.
     * @param {WalletTransactionFindUniqueArgs} args - Arguments to find a WalletTransaction
     * @example
     * // Get one WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WalletTransactionFindUniqueArgs>(args: SelectSubset<T, WalletTransactionFindUniqueArgs<ExtArgs>>): Prisma__WalletTransactionClient<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one WalletTransaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WalletTransactionFindUniqueOrThrowArgs} args - Arguments to find a WalletTransaction
     * @example
     * // Get one WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WalletTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, WalletTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WalletTransactionClient<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first WalletTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionFindFirstArgs} args - Arguments to find a WalletTransaction
     * @example
     * // Get one WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WalletTransactionFindFirstArgs>(args?: SelectSubset<T, WalletTransactionFindFirstArgs<ExtArgs>>): Prisma__WalletTransactionClient<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first WalletTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionFindFirstOrThrowArgs} args - Arguments to find a WalletTransaction
     * @example
     * // Get one WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WalletTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, WalletTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__WalletTransactionClient<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more WalletTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WalletTransactions
     * const walletTransactions = await prisma.walletTransaction.findMany()
     * 
     * // Get first 10 WalletTransactions
     * const walletTransactions = await prisma.walletTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const walletTransactionWithIdOnly = await prisma.walletTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WalletTransactionFindManyArgs>(args?: SelectSubset<T, WalletTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a WalletTransaction.
     * @param {WalletTransactionCreateArgs} args - Arguments to create a WalletTransaction.
     * @example
     * // Create one WalletTransaction
     * const WalletTransaction = await prisma.walletTransaction.create({
     *   data: {
     *     // ... data to create a WalletTransaction
     *   }
     * })
     * 
     */
    create<T extends WalletTransactionCreateArgs>(args: SelectSubset<T, WalletTransactionCreateArgs<ExtArgs>>): Prisma__WalletTransactionClient<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many WalletTransactions.
     * @param {WalletTransactionCreateManyArgs} args - Arguments to create many WalletTransactions.
     * @example
     * // Create many WalletTransactions
     * const walletTransaction = await prisma.walletTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WalletTransactionCreateManyArgs>(args?: SelectSubset<T, WalletTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WalletTransactions and returns the data saved in the database.
     * @param {WalletTransactionCreateManyAndReturnArgs} args - Arguments to create many WalletTransactions.
     * @example
     * // Create many WalletTransactions
     * const walletTransaction = await prisma.walletTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WalletTransactions and only return the `id`
     * const walletTransactionWithIdOnly = await prisma.walletTransaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WalletTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, WalletTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a WalletTransaction.
     * @param {WalletTransactionDeleteArgs} args - Arguments to delete one WalletTransaction.
     * @example
     * // Delete one WalletTransaction
     * const WalletTransaction = await prisma.walletTransaction.delete({
     *   where: {
     *     // ... filter to delete one WalletTransaction
     *   }
     * })
     * 
     */
    delete<T extends WalletTransactionDeleteArgs>(args: SelectSubset<T, WalletTransactionDeleteArgs<ExtArgs>>): Prisma__WalletTransactionClient<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one WalletTransaction.
     * @param {WalletTransactionUpdateArgs} args - Arguments to update one WalletTransaction.
     * @example
     * // Update one WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WalletTransactionUpdateArgs>(args: SelectSubset<T, WalletTransactionUpdateArgs<ExtArgs>>): Prisma__WalletTransactionClient<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more WalletTransactions.
     * @param {WalletTransactionDeleteManyArgs} args - Arguments to filter WalletTransactions to delete.
     * @example
     * // Delete a few WalletTransactions
     * const { count } = await prisma.walletTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WalletTransactionDeleteManyArgs>(args?: SelectSubset<T, WalletTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WalletTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WalletTransactions
     * const walletTransaction = await prisma.walletTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WalletTransactionUpdateManyArgs>(args: SelectSubset<T, WalletTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WalletTransactions and returns the data updated in the database.
     * @param {WalletTransactionUpdateManyAndReturnArgs} args - Arguments to update many WalletTransactions.
     * @example
     * // Update many WalletTransactions
     * const walletTransaction = await prisma.walletTransaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WalletTransactions and only return the `id`
     * const walletTransactionWithIdOnly = await prisma.walletTransaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WalletTransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, WalletTransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one WalletTransaction.
     * @param {WalletTransactionUpsertArgs} args - Arguments to update or create a WalletTransaction.
     * @example
     * // Update or create a WalletTransaction
     * const walletTransaction = await prisma.walletTransaction.upsert({
     *   create: {
     *     // ... data to create a WalletTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WalletTransaction we want to update
     *   }
     * })
     */
    upsert<T extends WalletTransactionUpsertArgs>(args: SelectSubset<T, WalletTransactionUpsertArgs<ExtArgs>>): Prisma__WalletTransactionClient<$Result.GetResult<Prisma.$WalletTransactionPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of WalletTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionCountArgs} args - Arguments to filter WalletTransactions to count.
     * @example
     * // Count the number of WalletTransactions
     * const count = await prisma.walletTransaction.count({
     *   where: {
     *     // ... the filter for the WalletTransactions we want to count
     *   }
     * })
    **/
    count<T extends WalletTransactionCountArgs>(
      args?: Subset<T, WalletTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WalletTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletTransactionAggregateArgs>(args: Subset<T, WalletTransactionAggregateArgs>): Prisma.PrismaPromise<GetWalletTransactionAggregateType<T>>

    /**
     * Group by WalletTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WalletTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WalletTransactionGroupByArgs['orderBy'] }
        : { orderBy?: WalletTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WalletTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WalletTransaction model
   */
  readonly fields: WalletTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WalletTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WalletTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wallet<T extends walletDefaultArgs<ExtArgs> = {}>(args?: Subset<T, walletDefaultArgs<ExtArgs>>): Prisma__walletClient<$Result.GetResult<Prisma.$walletPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WalletTransaction model
   */ 
  interface WalletTransactionFieldRefs {
    readonly id: FieldRef<"WalletTransaction", 'String'>
    readonly walletId: FieldRef<"WalletTransaction", 'String'>
    readonly type: FieldRef<"WalletTransaction", 'TransactionType'>
    readonly amount: FieldRef<"WalletTransaction", 'Float'>
    readonly currency: FieldRef<"WalletTransaction", 'CurrencyType'>
    readonly description: FieldRef<"WalletTransaction", 'String'>
    readonly createdAt: FieldRef<"WalletTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WalletTransaction findUnique
   */
  export type WalletTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter, which WalletTransaction to fetch.
     */
    where: WalletTransactionWhereUniqueInput
  }

  /**
   * WalletTransaction findUniqueOrThrow
   */
  export type WalletTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter, which WalletTransaction to fetch.
     */
    where: WalletTransactionWhereUniqueInput
  }

  /**
   * WalletTransaction findFirst
   */
  export type WalletTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter, which WalletTransaction to fetch.
     */
    where?: WalletTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletTransactions to fetch.
     */
    orderBy?: WalletTransactionOrderByWithRelationInput | WalletTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WalletTransactions.
     */
    cursor?: WalletTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WalletTransactions.
     */
    distinct?: WalletTransactionScalarFieldEnum | WalletTransactionScalarFieldEnum[]
  }

  /**
   * WalletTransaction findFirstOrThrow
   */
  export type WalletTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter, which WalletTransaction to fetch.
     */
    where?: WalletTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletTransactions to fetch.
     */
    orderBy?: WalletTransactionOrderByWithRelationInput | WalletTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WalletTransactions.
     */
    cursor?: WalletTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WalletTransactions.
     */
    distinct?: WalletTransactionScalarFieldEnum | WalletTransactionScalarFieldEnum[]
  }

  /**
   * WalletTransaction findMany
   */
  export type WalletTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter, which WalletTransactions to fetch.
     */
    where?: WalletTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WalletTransactions to fetch.
     */
    orderBy?: WalletTransactionOrderByWithRelationInput | WalletTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WalletTransactions.
     */
    cursor?: WalletTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WalletTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WalletTransactions.
     */
    skip?: number
    distinct?: WalletTransactionScalarFieldEnum | WalletTransactionScalarFieldEnum[]
  }

  /**
   * WalletTransaction create
   */
  export type WalletTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a WalletTransaction.
     */
    data: XOR<WalletTransactionCreateInput, WalletTransactionUncheckedCreateInput>
  }

  /**
   * WalletTransaction createMany
   */
  export type WalletTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WalletTransactions.
     */
    data: WalletTransactionCreateManyInput | WalletTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WalletTransaction createManyAndReturn
   */
  export type WalletTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * The data used to create many WalletTransactions.
     */
    data: WalletTransactionCreateManyInput | WalletTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WalletTransaction update
   */
  export type WalletTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a WalletTransaction.
     */
    data: XOR<WalletTransactionUpdateInput, WalletTransactionUncheckedUpdateInput>
    /**
     * Choose, which WalletTransaction to update.
     */
    where: WalletTransactionWhereUniqueInput
  }

  /**
   * WalletTransaction updateMany
   */
  export type WalletTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WalletTransactions.
     */
    data: XOR<WalletTransactionUpdateManyMutationInput, WalletTransactionUncheckedUpdateManyInput>
    /**
     * Filter which WalletTransactions to update
     */
    where?: WalletTransactionWhereInput
  }

  /**
   * WalletTransaction updateManyAndReturn
   */
  export type WalletTransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * The data used to update WalletTransactions.
     */
    data: XOR<WalletTransactionUpdateManyMutationInput, WalletTransactionUncheckedUpdateManyInput>
    /**
     * Filter which WalletTransactions to update
     */
    where?: WalletTransactionWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WalletTransaction upsert
   */
  export type WalletTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the WalletTransaction to update in case it exists.
     */
    where: WalletTransactionWhereUniqueInput
    /**
     * In case the WalletTransaction found by the `where` argument doesn't exist, create a new WalletTransaction with this data.
     */
    create: XOR<WalletTransactionCreateInput, WalletTransactionUncheckedCreateInput>
    /**
     * In case the WalletTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WalletTransactionUpdateInput, WalletTransactionUncheckedUpdateInput>
  }

  /**
   * WalletTransaction delete
   */
  export type WalletTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
    /**
     * Filter which WalletTransaction to delete.
     */
    where: WalletTransactionWhereUniqueInput
  }

  /**
   * WalletTransaction deleteMany
   */
  export type WalletTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WalletTransactions to delete
     */
    where?: WalletTransactionWhereInput
  }

  /**
   * WalletTransaction without action
   */
  export type WalletTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletTransaction
     */
    select?: WalletTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WalletTransaction
     */
    omit?: WalletTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletTransactionInclude<ExtArgs> | null
  }


  /**
   * Model Administrador
   */

  export type AggregateAdministrador = {
    _count: AdministradorCountAggregateOutputType | null
    _min: AdministradorMinAggregateOutputType | null
    _max: AdministradorMaxAggregateOutputType | null
  }

  export type AdministradorMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    name: string | null
  }

  export type AdministradorMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    name: string | null
  }

  export type AdministradorCountAggregateOutputType = {
    id: number
    email: number
    password: number
    role: number
    name: number
    _all: number
  }


  export type AdministradorMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    name?: true
  }

  export type AdministradorMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    name?: true
  }

  export type AdministradorCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    name?: true
    _all?: true
  }

  export type AdministradorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Administrador to aggregate.
     */
    where?: AdministradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administradors to fetch.
     */
    orderBy?: AdministradorOrderByWithRelationInput | AdministradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdministradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Administradors
    **/
    _count?: true | AdministradorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdministradorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdministradorMaxAggregateInputType
  }

  export type GetAdministradorAggregateType<T extends AdministradorAggregateArgs> = {
        [P in keyof T & keyof AggregateAdministrador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdministrador[P]>
      : GetScalarType<T[P], AggregateAdministrador[P]>
  }




  export type AdministradorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdministradorWhereInput
    orderBy?: AdministradorOrderByWithAggregationInput | AdministradorOrderByWithAggregationInput[]
    by: AdministradorScalarFieldEnum[] | AdministradorScalarFieldEnum
    having?: AdministradorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdministradorCountAggregateInputType | true
    _min?: AdministradorMinAggregateInputType
    _max?: AdministradorMaxAggregateInputType
  }

  export type AdministradorGroupByOutputType = {
    id: string
    email: string
    password: string
    role: $Enums.UserRole
    name: string
    _count: AdministradorCountAggregateOutputType | null
    _min: AdministradorMinAggregateOutputType | null
    _max: AdministradorMaxAggregateOutputType | null
  }

  type GetAdministradorGroupByPayload<T extends AdministradorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdministradorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdministradorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdministradorGroupByOutputType[P]>
            : GetScalarType<T[P], AdministradorGroupByOutputType[P]>
        }
      >
    >


  export type AdministradorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    name?: boolean
  }, ExtArgs["result"]["administrador"]>

  export type AdministradorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    name?: boolean
  }, ExtArgs["result"]["administrador"]>

  export type AdministradorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    name?: boolean
  }, ExtArgs["result"]["administrador"]>

  export type AdministradorSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    name?: boolean
  }

  export type AdministradorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "role" | "name", ExtArgs["result"]["administrador"]>

  export type $AdministradorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Administrador"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      role: $Enums.UserRole
      name: string
    }, ExtArgs["result"]["administrador"]>
    composites: {}
  }

  type AdministradorGetPayload<S extends boolean | null | undefined | AdministradorDefaultArgs> = $Result.GetResult<Prisma.$AdministradorPayload, S>

  type AdministradorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdministradorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdministradorCountAggregateInputType | true
    }

  export interface AdministradorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Administrador'], meta: { name: 'Administrador' } }
    /**
     * Find zero or one Administrador that matches the filter.
     * @param {AdministradorFindUniqueArgs} args - Arguments to find a Administrador
     * @example
     * // Get one Administrador
     * const administrador = await prisma.administrador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdministradorFindUniqueArgs>(args: SelectSubset<T, AdministradorFindUniqueArgs<ExtArgs>>): Prisma__AdministradorClient<$Result.GetResult<Prisma.$AdministradorPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Administrador that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdministradorFindUniqueOrThrowArgs} args - Arguments to find a Administrador
     * @example
     * // Get one Administrador
     * const administrador = await prisma.administrador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdministradorFindUniqueOrThrowArgs>(args: SelectSubset<T, AdministradorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdministradorClient<$Result.GetResult<Prisma.$AdministradorPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Administrador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorFindFirstArgs} args - Arguments to find a Administrador
     * @example
     * // Get one Administrador
     * const administrador = await prisma.administrador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdministradorFindFirstArgs>(args?: SelectSubset<T, AdministradorFindFirstArgs<ExtArgs>>): Prisma__AdministradorClient<$Result.GetResult<Prisma.$AdministradorPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Administrador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorFindFirstOrThrowArgs} args - Arguments to find a Administrador
     * @example
     * // Get one Administrador
     * const administrador = await prisma.administrador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdministradorFindFirstOrThrowArgs>(args?: SelectSubset<T, AdministradorFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdministradorClient<$Result.GetResult<Prisma.$AdministradorPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Administradors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Administradors
     * const administradors = await prisma.administrador.findMany()
     * 
     * // Get first 10 Administradors
     * const administradors = await prisma.administrador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const administradorWithIdOnly = await prisma.administrador.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdministradorFindManyArgs>(args?: SelectSubset<T, AdministradorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdministradorPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Administrador.
     * @param {AdministradorCreateArgs} args - Arguments to create a Administrador.
     * @example
     * // Create one Administrador
     * const Administrador = await prisma.administrador.create({
     *   data: {
     *     // ... data to create a Administrador
     *   }
     * })
     * 
     */
    create<T extends AdministradorCreateArgs>(args: SelectSubset<T, AdministradorCreateArgs<ExtArgs>>): Prisma__AdministradorClient<$Result.GetResult<Prisma.$AdministradorPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Administradors.
     * @param {AdministradorCreateManyArgs} args - Arguments to create many Administradors.
     * @example
     * // Create many Administradors
     * const administrador = await prisma.administrador.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdministradorCreateManyArgs>(args?: SelectSubset<T, AdministradorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Administradors and returns the data saved in the database.
     * @param {AdministradorCreateManyAndReturnArgs} args - Arguments to create many Administradors.
     * @example
     * // Create many Administradors
     * const administrador = await prisma.administrador.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Administradors and only return the `id`
     * const administradorWithIdOnly = await prisma.administrador.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdministradorCreateManyAndReturnArgs>(args?: SelectSubset<T, AdministradorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdministradorPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Administrador.
     * @param {AdministradorDeleteArgs} args - Arguments to delete one Administrador.
     * @example
     * // Delete one Administrador
     * const Administrador = await prisma.administrador.delete({
     *   where: {
     *     // ... filter to delete one Administrador
     *   }
     * })
     * 
     */
    delete<T extends AdministradorDeleteArgs>(args: SelectSubset<T, AdministradorDeleteArgs<ExtArgs>>): Prisma__AdministradorClient<$Result.GetResult<Prisma.$AdministradorPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Administrador.
     * @param {AdministradorUpdateArgs} args - Arguments to update one Administrador.
     * @example
     * // Update one Administrador
     * const administrador = await prisma.administrador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdministradorUpdateArgs>(args: SelectSubset<T, AdministradorUpdateArgs<ExtArgs>>): Prisma__AdministradorClient<$Result.GetResult<Prisma.$AdministradorPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Administradors.
     * @param {AdministradorDeleteManyArgs} args - Arguments to filter Administradors to delete.
     * @example
     * // Delete a few Administradors
     * const { count } = await prisma.administrador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdministradorDeleteManyArgs>(args?: SelectSubset<T, AdministradorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Administradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Administradors
     * const administrador = await prisma.administrador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdministradorUpdateManyArgs>(args: SelectSubset<T, AdministradorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Administradors and returns the data updated in the database.
     * @param {AdministradorUpdateManyAndReturnArgs} args - Arguments to update many Administradors.
     * @example
     * // Update many Administradors
     * const administrador = await prisma.administrador.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Administradors and only return the `id`
     * const administradorWithIdOnly = await prisma.administrador.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdministradorUpdateManyAndReturnArgs>(args: SelectSubset<T, AdministradorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdministradorPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Administrador.
     * @param {AdministradorUpsertArgs} args - Arguments to update or create a Administrador.
     * @example
     * // Update or create a Administrador
     * const administrador = await prisma.administrador.upsert({
     *   create: {
     *     // ... data to create a Administrador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Administrador we want to update
     *   }
     * })
     */
    upsert<T extends AdministradorUpsertArgs>(args: SelectSubset<T, AdministradorUpsertArgs<ExtArgs>>): Prisma__AdministradorClient<$Result.GetResult<Prisma.$AdministradorPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Administradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorCountArgs} args - Arguments to filter Administradors to count.
     * @example
     * // Count the number of Administradors
     * const count = await prisma.administrador.count({
     *   where: {
     *     // ... the filter for the Administradors we want to count
     *   }
     * })
    **/
    count<T extends AdministradorCountArgs>(
      args?: Subset<T, AdministradorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdministradorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Administrador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdministradorAggregateArgs>(args: Subset<T, AdministradorAggregateArgs>): Prisma.PrismaPromise<GetAdministradorAggregateType<T>>

    /**
     * Group by Administrador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministradorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdministradorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdministradorGroupByArgs['orderBy'] }
        : { orderBy?: AdministradorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdministradorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdministradorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Administrador model
   */
  readonly fields: AdministradorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Administrador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdministradorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Administrador model
   */ 
  interface AdministradorFieldRefs {
    readonly id: FieldRef<"Administrador", 'String'>
    readonly email: FieldRef<"Administrador", 'String'>
    readonly password: FieldRef<"Administrador", 'String'>
    readonly role: FieldRef<"Administrador", 'UserRole'>
    readonly name: FieldRef<"Administrador", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Administrador findUnique
   */
  export type AdministradorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administrador
     */
    omit?: AdministradorOmit<ExtArgs> | null
    /**
     * Filter, which Administrador to fetch.
     */
    where: AdministradorWhereUniqueInput
  }

  /**
   * Administrador findUniqueOrThrow
   */
  export type AdministradorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administrador
     */
    omit?: AdministradorOmit<ExtArgs> | null
    /**
     * Filter, which Administrador to fetch.
     */
    where: AdministradorWhereUniqueInput
  }

  /**
   * Administrador findFirst
   */
  export type AdministradorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administrador
     */
    omit?: AdministradorOmit<ExtArgs> | null
    /**
     * Filter, which Administrador to fetch.
     */
    where?: AdministradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administradors to fetch.
     */
    orderBy?: AdministradorOrderByWithRelationInput | AdministradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Administradors.
     */
    cursor?: AdministradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Administradors.
     */
    distinct?: AdministradorScalarFieldEnum | AdministradorScalarFieldEnum[]
  }

  /**
   * Administrador findFirstOrThrow
   */
  export type AdministradorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administrador
     */
    omit?: AdministradorOmit<ExtArgs> | null
    /**
     * Filter, which Administrador to fetch.
     */
    where?: AdministradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administradors to fetch.
     */
    orderBy?: AdministradorOrderByWithRelationInput | AdministradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Administradors.
     */
    cursor?: AdministradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Administradors.
     */
    distinct?: AdministradorScalarFieldEnum | AdministradorScalarFieldEnum[]
  }

  /**
   * Administrador findMany
   */
  export type AdministradorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administrador
     */
    omit?: AdministradorOmit<ExtArgs> | null
    /**
     * Filter, which Administradors to fetch.
     */
    where?: AdministradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administradors to fetch.
     */
    orderBy?: AdministradorOrderByWithRelationInput | AdministradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Administradors.
     */
    cursor?: AdministradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administradors.
     */
    skip?: number
    distinct?: AdministradorScalarFieldEnum | AdministradorScalarFieldEnum[]
  }

  /**
   * Administrador create
   */
  export type AdministradorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administrador
     */
    omit?: AdministradorOmit<ExtArgs> | null
    /**
     * The data needed to create a Administrador.
     */
    data: XOR<AdministradorCreateInput, AdministradorUncheckedCreateInput>
  }

  /**
   * Administrador createMany
   */
  export type AdministradorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Administradors.
     */
    data: AdministradorCreateManyInput | AdministradorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Administrador createManyAndReturn
   */
  export type AdministradorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Administrador
     */
    omit?: AdministradorOmit<ExtArgs> | null
    /**
     * The data used to create many Administradors.
     */
    data: AdministradorCreateManyInput | AdministradorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Administrador update
   */
  export type AdministradorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administrador
     */
    omit?: AdministradorOmit<ExtArgs> | null
    /**
     * The data needed to update a Administrador.
     */
    data: XOR<AdministradorUpdateInput, AdministradorUncheckedUpdateInput>
    /**
     * Choose, which Administrador to update.
     */
    where: AdministradorWhereUniqueInput
  }

  /**
   * Administrador updateMany
   */
  export type AdministradorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Administradors.
     */
    data: XOR<AdministradorUpdateManyMutationInput, AdministradorUncheckedUpdateManyInput>
    /**
     * Filter which Administradors to update
     */
    where?: AdministradorWhereInput
  }

  /**
   * Administrador updateManyAndReturn
   */
  export type AdministradorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Administrador
     */
    omit?: AdministradorOmit<ExtArgs> | null
    /**
     * The data used to update Administradors.
     */
    data: XOR<AdministradorUpdateManyMutationInput, AdministradorUncheckedUpdateManyInput>
    /**
     * Filter which Administradors to update
     */
    where?: AdministradorWhereInput
  }

  /**
   * Administrador upsert
   */
  export type AdministradorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administrador
     */
    omit?: AdministradorOmit<ExtArgs> | null
    /**
     * The filter to search for the Administrador to update in case it exists.
     */
    where: AdministradorWhereUniqueInput
    /**
     * In case the Administrador found by the `where` argument doesn't exist, create a new Administrador with this data.
     */
    create: XOR<AdministradorCreateInput, AdministradorUncheckedCreateInput>
    /**
     * In case the Administrador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdministradorUpdateInput, AdministradorUncheckedUpdateInput>
  }

  /**
   * Administrador delete
   */
  export type AdministradorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administrador
     */
    omit?: AdministradorOmit<ExtArgs> | null
    /**
     * Filter which Administrador to delete.
     */
    where: AdministradorWhereUniqueInput
  }

  /**
   * Administrador deleteMany
   */
  export type AdministradorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Administradors to delete
     */
    where?: AdministradorWhereInput
  }

  /**
   * Administrador without action
   */
  export type AdministradorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrador
     */
    select?: AdministradorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Administrador
     */
    omit?: AdministradorOmit<ExtArgs> | null
  }


  /**
   * Model Support
   */

  export type AggregateSupport = {
    _count: SupportCountAggregateOutputType | null
    _min: SupportMinAggregateOutputType | null
    _max: SupportMaxAggregateOutputType | null
  }

  export type SupportMinAggregateOutputType = {
    id: string | null
    userId: string | null
    subject: string | null
    message: string | null
    status: $Enums.Status | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SupportMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    subject: string | null
    message: string | null
    status: $Enums.Status | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SupportCountAggregateOutputType = {
    id: number
    userId: number
    subject: number
    message: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SupportMinAggregateInputType = {
    id?: true
    userId?: true
    subject?: true
    message?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SupportMaxAggregateInputType = {
    id?: true
    userId?: true
    subject?: true
    message?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SupportCountAggregateInputType = {
    id?: true
    userId?: true
    subject?: true
    message?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SupportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Support to aggregate.
     */
    where?: SupportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supports to fetch.
     */
    orderBy?: SupportOrderByWithRelationInput | SupportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SupportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Supports
    **/
    _count?: true | SupportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SupportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SupportMaxAggregateInputType
  }

  export type GetSupportAggregateType<T extends SupportAggregateArgs> = {
        [P in keyof T & keyof AggregateSupport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSupport[P]>
      : GetScalarType<T[P], AggregateSupport[P]>
  }




  export type SupportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SupportWhereInput
    orderBy?: SupportOrderByWithAggregationInput | SupportOrderByWithAggregationInput[]
    by: SupportScalarFieldEnum[] | SupportScalarFieldEnum
    having?: SupportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SupportCountAggregateInputType | true
    _min?: SupportMinAggregateInputType
    _max?: SupportMaxAggregateInputType
  }

  export type SupportGroupByOutputType = {
    id: string
    userId: string
    subject: string
    message: string
    status: $Enums.Status
    createdAt: Date
    updatedAt: Date
    _count: SupportCountAggregateOutputType | null
    _min: SupportMinAggregateOutputType | null
    _max: SupportMaxAggregateOutputType | null
  }

  type GetSupportGroupByPayload<T extends SupportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SupportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SupportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SupportGroupByOutputType[P]>
            : GetScalarType<T[P], SupportGroupByOutputType[P]>
        }
      >
    >


  export type SupportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    subject?: boolean
    message?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["support"]>

  export type SupportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    subject?: boolean
    message?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["support"]>

  export type SupportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    subject?: boolean
    message?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["support"]>

  export type SupportSelectScalar = {
    id?: boolean
    userId?: boolean
    subject?: boolean
    message?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SupportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "subject" | "message" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["support"]>
  export type SupportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SupportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SupportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SupportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Support"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      subject: string
      message: string
      status: $Enums.Status
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["support"]>
    composites: {}
  }

  type SupportGetPayload<S extends boolean | null | undefined | SupportDefaultArgs> = $Result.GetResult<Prisma.$SupportPayload, S>

  type SupportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SupportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SupportCountAggregateInputType | true
    }

  export interface SupportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Support'], meta: { name: 'Support' } }
    /**
     * Find zero or one Support that matches the filter.
     * @param {SupportFindUniqueArgs} args - Arguments to find a Support
     * @example
     * // Get one Support
     * const support = await prisma.support.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SupportFindUniqueArgs>(args: SelectSubset<T, SupportFindUniqueArgs<ExtArgs>>): Prisma__SupportClient<$Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Support that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SupportFindUniqueOrThrowArgs} args - Arguments to find a Support
     * @example
     * // Get one Support
     * const support = await prisma.support.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SupportFindUniqueOrThrowArgs>(args: SelectSubset<T, SupportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SupportClient<$Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Support that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportFindFirstArgs} args - Arguments to find a Support
     * @example
     * // Get one Support
     * const support = await prisma.support.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SupportFindFirstArgs>(args?: SelectSubset<T, SupportFindFirstArgs<ExtArgs>>): Prisma__SupportClient<$Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Support that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportFindFirstOrThrowArgs} args - Arguments to find a Support
     * @example
     * // Get one Support
     * const support = await prisma.support.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SupportFindFirstOrThrowArgs>(args?: SelectSubset<T, SupportFindFirstOrThrowArgs<ExtArgs>>): Prisma__SupportClient<$Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Supports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Supports
     * const supports = await prisma.support.findMany()
     * 
     * // Get first 10 Supports
     * const supports = await prisma.support.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const supportWithIdOnly = await prisma.support.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SupportFindManyArgs>(args?: SelectSubset<T, SupportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Support.
     * @param {SupportCreateArgs} args - Arguments to create a Support.
     * @example
     * // Create one Support
     * const Support = await prisma.support.create({
     *   data: {
     *     // ... data to create a Support
     *   }
     * })
     * 
     */
    create<T extends SupportCreateArgs>(args: SelectSubset<T, SupportCreateArgs<ExtArgs>>): Prisma__SupportClient<$Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Supports.
     * @param {SupportCreateManyArgs} args - Arguments to create many Supports.
     * @example
     * // Create many Supports
     * const support = await prisma.support.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SupportCreateManyArgs>(args?: SelectSubset<T, SupportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Supports and returns the data saved in the database.
     * @param {SupportCreateManyAndReturnArgs} args - Arguments to create many Supports.
     * @example
     * // Create many Supports
     * const support = await prisma.support.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Supports and only return the `id`
     * const supportWithIdOnly = await prisma.support.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SupportCreateManyAndReturnArgs>(args?: SelectSubset<T, SupportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Support.
     * @param {SupportDeleteArgs} args - Arguments to delete one Support.
     * @example
     * // Delete one Support
     * const Support = await prisma.support.delete({
     *   where: {
     *     // ... filter to delete one Support
     *   }
     * })
     * 
     */
    delete<T extends SupportDeleteArgs>(args: SelectSubset<T, SupportDeleteArgs<ExtArgs>>): Prisma__SupportClient<$Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Support.
     * @param {SupportUpdateArgs} args - Arguments to update one Support.
     * @example
     * // Update one Support
     * const support = await prisma.support.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SupportUpdateArgs>(args: SelectSubset<T, SupportUpdateArgs<ExtArgs>>): Prisma__SupportClient<$Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Supports.
     * @param {SupportDeleteManyArgs} args - Arguments to filter Supports to delete.
     * @example
     * // Delete a few Supports
     * const { count } = await prisma.support.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SupportDeleteManyArgs>(args?: SelectSubset<T, SupportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Supports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Supports
     * const support = await prisma.support.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SupportUpdateManyArgs>(args: SelectSubset<T, SupportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Supports and returns the data updated in the database.
     * @param {SupportUpdateManyAndReturnArgs} args - Arguments to update many Supports.
     * @example
     * // Update many Supports
     * const support = await prisma.support.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Supports and only return the `id`
     * const supportWithIdOnly = await prisma.support.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SupportUpdateManyAndReturnArgs>(args: SelectSubset<T, SupportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Support.
     * @param {SupportUpsertArgs} args - Arguments to update or create a Support.
     * @example
     * // Update or create a Support
     * const support = await prisma.support.upsert({
     *   create: {
     *     // ... data to create a Support
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Support we want to update
     *   }
     * })
     */
    upsert<T extends SupportUpsertArgs>(args: SelectSubset<T, SupportUpsertArgs<ExtArgs>>): Prisma__SupportClient<$Result.GetResult<Prisma.$SupportPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Supports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportCountArgs} args - Arguments to filter Supports to count.
     * @example
     * // Count the number of Supports
     * const count = await prisma.support.count({
     *   where: {
     *     // ... the filter for the Supports we want to count
     *   }
     * })
    **/
    count<T extends SupportCountArgs>(
      args?: Subset<T, SupportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SupportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Support.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SupportAggregateArgs>(args: Subset<T, SupportAggregateArgs>): Prisma.PrismaPromise<GetSupportAggregateType<T>>

    /**
     * Group by Support.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SupportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SupportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SupportGroupByArgs['orderBy'] }
        : { orderBy?: SupportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SupportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSupportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Support model
   */
  readonly fields: SupportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Support.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SupportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Support model
   */ 
  interface SupportFieldRefs {
    readonly id: FieldRef<"Support", 'String'>
    readonly userId: FieldRef<"Support", 'String'>
    readonly subject: FieldRef<"Support", 'String'>
    readonly message: FieldRef<"Support", 'String'>
    readonly status: FieldRef<"Support", 'Status'>
    readonly createdAt: FieldRef<"Support", 'DateTime'>
    readonly updatedAt: FieldRef<"Support", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Support findUnique
   */
  export type SupportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Support
     */
    select?: SupportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Support
     */
    omit?: SupportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportInclude<ExtArgs> | null
    /**
     * Filter, which Support to fetch.
     */
    where: SupportWhereUniqueInput
  }

  /**
   * Support findUniqueOrThrow
   */
  export type SupportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Support
     */
    select?: SupportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Support
     */
    omit?: SupportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportInclude<ExtArgs> | null
    /**
     * Filter, which Support to fetch.
     */
    where: SupportWhereUniqueInput
  }

  /**
   * Support findFirst
   */
  export type SupportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Support
     */
    select?: SupportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Support
     */
    omit?: SupportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportInclude<ExtArgs> | null
    /**
     * Filter, which Support to fetch.
     */
    where?: SupportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supports to fetch.
     */
    orderBy?: SupportOrderByWithRelationInput | SupportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Supports.
     */
    cursor?: SupportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Supports.
     */
    distinct?: SupportScalarFieldEnum | SupportScalarFieldEnum[]
  }

  /**
   * Support findFirstOrThrow
   */
  export type SupportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Support
     */
    select?: SupportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Support
     */
    omit?: SupportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportInclude<ExtArgs> | null
    /**
     * Filter, which Support to fetch.
     */
    where?: SupportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supports to fetch.
     */
    orderBy?: SupportOrderByWithRelationInput | SupportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Supports.
     */
    cursor?: SupportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Supports.
     */
    distinct?: SupportScalarFieldEnum | SupportScalarFieldEnum[]
  }

  /**
   * Support findMany
   */
  export type SupportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Support
     */
    select?: SupportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Support
     */
    omit?: SupportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportInclude<ExtArgs> | null
    /**
     * Filter, which Supports to fetch.
     */
    where?: SupportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Supports to fetch.
     */
    orderBy?: SupportOrderByWithRelationInput | SupportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Supports.
     */
    cursor?: SupportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Supports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Supports.
     */
    skip?: number
    distinct?: SupportScalarFieldEnum | SupportScalarFieldEnum[]
  }

  /**
   * Support create
   */
  export type SupportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Support
     */
    select?: SupportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Support
     */
    omit?: SupportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportInclude<ExtArgs> | null
    /**
     * The data needed to create a Support.
     */
    data: XOR<SupportCreateInput, SupportUncheckedCreateInput>
  }

  /**
   * Support createMany
   */
  export type SupportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Supports.
     */
    data: SupportCreateManyInput | SupportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Support createManyAndReturn
   */
  export type SupportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Support
     */
    select?: SupportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Support
     */
    omit?: SupportOmit<ExtArgs> | null
    /**
     * The data used to create many Supports.
     */
    data: SupportCreateManyInput | SupportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Support update
   */
  export type SupportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Support
     */
    select?: SupportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Support
     */
    omit?: SupportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportInclude<ExtArgs> | null
    /**
     * The data needed to update a Support.
     */
    data: XOR<SupportUpdateInput, SupportUncheckedUpdateInput>
    /**
     * Choose, which Support to update.
     */
    where: SupportWhereUniqueInput
  }

  /**
   * Support updateMany
   */
  export type SupportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Supports.
     */
    data: XOR<SupportUpdateManyMutationInput, SupportUncheckedUpdateManyInput>
    /**
     * Filter which Supports to update
     */
    where?: SupportWhereInput
  }

  /**
   * Support updateManyAndReturn
   */
  export type SupportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Support
     */
    select?: SupportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Support
     */
    omit?: SupportOmit<ExtArgs> | null
    /**
     * The data used to update Supports.
     */
    data: XOR<SupportUpdateManyMutationInput, SupportUncheckedUpdateManyInput>
    /**
     * Filter which Supports to update
     */
    where?: SupportWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Support upsert
   */
  export type SupportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Support
     */
    select?: SupportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Support
     */
    omit?: SupportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportInclude<ExtArgs> | null
    /**
     * The filter to search for the Support to update in case it exists.
     */
    where: SupportWhereUniqueInput
    /**
     * In case the Support found by the `where` argument doesn't exist, create a new Support with this data.
     */
    create: XOR<SupportCreateInput, SupportUncheckedCreateInput>
    /**
     * In case the Support was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SupportUpdateInput, SupportUncheckedUpdateInput>
  }

  /**
   * Support delete
   */
  export type SupportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Support
     */
    select?: SupportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Support
     */
    omit?: SupportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportInclude<ExtArgs> | null
    /**
     * Filter which Support to delete.
     */
    where: SupportWhereUniqueInput
  }

  /**
   * Support deleteMany
   */
  export type SupportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Supports to delete
     */
    where?: SupportWhereInput
  }

  /**
   * Support without action
   */
  export type SupportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Support
     */
    select?: SupportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Support
     */
    omit?: SupportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SupportInclude<ExtArgs> | null
  }


  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    riskTolerance: string | null
    investmentHorizon: string | null
    financialSkills: string | null
    hasInvestedBefore: string | null
    financialGoal: string | null
    mainGoal: string | null
    monthlyInvestment: string | null
    financialInstrument: string | null
    investmentMethod: string | null
    investmentCategories: string | null
    mainIncomeSource: string | null
    financialNewsSource: string | null
    years: string | null
    investingDuration: string | null
    savingsOrInvestmentReason: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    riskTolerance: string | null
    investmentHorizon: string | null
    financialSkills: string | null
    hasInvestedBefore: string | null
    financialGoal: string | null
    mainGoal: string | null
    monthlyInvestment: string | null
    financialInstrument: string | null
    investmentMethod: string | null
    investmentCategories: string | null
    mainIncomeSource: string | null
    financialNewsSource: string | null
    years: string | null
    investingDuration: string | null
    savingsOrInvestmentReason: string | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    userId: number
    riskTolerance: number
    investmentHorizon: number
    financialSkills: number
    hasInvestedBefore: number
    financialGoal: number
    mainGoal: number
    monthlyInvestment: number
    financialInstrument: number
    investmentMethod: number
    investmentCategories: number
    mainIncomeSource: number
    financialNewsSource: number
    years: number
    investingDuration: number
    savingsOrInvestmentReason: number
    _all: number
  }


  export type ProfileMinAggregateInputType = {
    id?: true
    userId?: true
    riskTolerance?: true
    investmentHorizon?: true
    financialSkills?: true
    hasInvestedBefore?: true
    financialGoal?: true
    mainGoal?: true
    monthlyInvestment?: true
    financialInstrument?: true
    investmentMethod?: true
    investmentCategories?: true
    mainIncomeSource?: true
    financialNewsSource?: true
    years?: true
    investingDuration?: true
    savingsOrInvestmentReason?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    riskTolerance?: true
    investmentHorizon?: true
    financialSkills?: true
    hasInvestedBefore?: true
    financialGoal?: true
    mainGoal?: true
    monthlyInvestment?: true
    financialInstrument?: true
    investmentMethod?: true
    investmentCategories?: true
    mainIncomeSource?: true
    financialNewsSource?: true
    years?: true
    investingDuration?: true
    savingsOrInvestmentReason?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    userId?: true
    riskTolerance?: true
    investmentHorizon?: true
    financialSkills?: true
    hasInvestedBefore?: true
    financialGoal?: true
    mainGoal?: true
    monthlyInvestment?: true
    financialInstrument?: true
    investmentMethod?: true
    investmentCategories?: true
    mainIncomeSource?: true
    financialNewsSource?: true
    years?: true
    investingDuration?: true
    savingsOrInvestmentReason?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: string
    userId: string
    riskTolerance: string | null
    investmentHorizon: string | null
    financialSkills: string | null
    hasInvestedBefore: string | null
    financialGoal: string | null
    mainGoal: string | null
    monthlyInvestment: string | null
    financialInstrument: string | null
    investmentMethod: string | null
    investmentCategories: string | null
    mainIncomeSource: string | null
    financialNewsSource: string | null
    years: string | null
    investingDuration: string | null
    savingsOrInvestmentReason: string | null
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    riskTolerance?: boolean
    investmentHorizon?: boolean
    financialSkills?: boolean
    hasInvestedBefore?: boolean
    financialGoal?: boolean
    mainGoal?: boolean
    monthlyInvestment?: boolean
    financialInstrument?: boolean
    investmentMethod?: boolean
    investmentCategories?: boolean
    mainIncomeSource?: boolean
    financialNewsSource?: boolean
    years?: boolean
    investingDuration?: boolean
    savingsOrInvestmentReason?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    riskTolerance?: boolean
    investmentHorizon?: boolean
    financialSkills?: boolean
    hasInvestedBefore?: boolean
    financialGoal?: boolean
    mainGoal?: boolean
    monthlyInvestment?: boolean
    financialInstrument?: boolean
    investmentMethod?: boolean
    investmentCategories?: boolean
    mainIncomeSource?: boolean
    financialNewsSource?: boolean
    years?: boolean
    investingDuration?: boolean
    savingsOrInvestmentReason?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    riskTolerance?: boolean
    investmentHorizon?: boolean
    financialSkills?: boolean
    hasInvestedBefore?: boolean
    financialGoal?: boolean
    mainGoal?: boolean
    monthlyInvestment?: boolean
    financialInstrument?: boolean
    investmentMethod?: boolean
    investmentCategories?: boolean
    mainIncomeSource?: boolean
    financialNewsSource?: boolean
    years?: boolean
    investingDuration?: boolean
    savingsOrInvestmentReason?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    riskTolerance?: boolean
    investmentHorizon?: boolean
    financialSkills?: boolean
    hasInvestedBefore?: boolean
    financialGoal?: boolean
    mainGoal?: boolean
    monthlyInvestment?: boolean
    financialInstrument?: boolean
    investmentMethod?: boolean
    investmentCategories?: boolean
    mainIncomeSource?: boolean
    financialNewsSource?: boolean
    years?: boolean
    investingDuration?: boolean
    savingsOrInvestmentReason?: boolean
  }

  export type ProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "riskTolerance" | "investmentHorizon" | "financialSkills" | "hasInvestedBefore" | "financialGoal" | "mainGoal" | "monthlyInvestment" | "financialInstrument" | "investmentMethod" | "investmentCategories" | "mainIncomeSource" | "financialNewsSource" | "years" | "investingDuration" | "savingsOrInvestmentReason", ExtArgs["result"]["profile"]>
  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      riskTolerance: string | null
      investmentHorizon: string | null
      financialSkills: string | null
      hasInvestedBefore: string | null
      financialGoal: string | null
      mainGoal: string | null
      monthlyInvestment: string | null
      financialInstrument: string | null
      investmentMethod: string | null
      investmentCategories: string | null
      mainIncomeSource: string | null
      financialNewsSource: string | null
      years: string | null
      investingDuration: string | null
      savingsOrInvestmentReason: string | null
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles and returns the data updated in the database.
     * @param {ProfileUpdateManyAndReturnArgs} args - Arguments to update many Profiles.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */ 
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'String'>
    readonly userId: FieldRef<"Profile", 'String'>
    readonly riskTolerance: FieldRef<"Profile", 'String'>
    readonly investmentHorizon: FieldRef<"Profile", 'String'>
    readonly financialSkills: FieldRef<"Profile", 'String'>
    readonly hasInvestedBefore: FieldRef<"Profile", 'String'>
    readonly financialGoal: FieldRef<"Profile", 'String'>
    readonly mainGoal: FieldRef<"Profile", 'String'>
    readonly monthlyInvestment: FieldRef<"Profile", 'String'>
    readonly financialInstrument: FieldRef<"Profile", 'String'>
    readonly investmentMethod: FieldRef<"Profile", 'String'>
    readonly investmentCategories: FieldRef<"Profile", 'String'>
    readonly mainIncomeSource: FieldRef<"Profile", 'String'>
    readonly financialNewsSource: FieldRef<"Profile", 'String'>
    readonly years: FieldRef<"Profile", 'String'>
    readonly investingDuration: FieldRef<"Profile", 'String'>
    readonly savingsOrInvestmentReason: FieldRef<"Profile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profile createManyAndReturn
   */
  export type ProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
  }

  /**
   * Profile updateManyAndReturn
   */
  export type ProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model Customization
   */

  export type AggregateCustomization = {
    _count: CustomizationCountAggregateOutputType | null
    _avg: CustomizationAvgAggregateOutputType | null
    _sum: CustomizationSumAggregateOutputType | null
    _min: CustomizationMinAggregateOutputType | null
    _max: CustomizationMaxAggregateOutputType | null
  }

  export type CustomizationAvgAggregateOutputType = {
    monthlyAmount: number | null
  }

  export type CustomizationSumAggregateOutputType = {
    monthlyAmount: number | null
  }

  export type CustomizationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    categories: string | null
    strategy: string | null
    method: string | null
    newsSource: string | null
    instrument: string | null
    age: string | null
    investingYears: string | null
    goal: string | null
    monthlyAmount: number | null
    incomeSource: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomizationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    categories: string | null
    strategy: string | null
    method: string | null
    newsSource: string | null
    instrument: string | null
    age: string | null
    investingYears: string | null
    goal: string | null
    monthlyAmount: number | null
    incomeSource: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomizationCountAggregateOutputType = {
    id: number
    userId: number
    categories: number
    strategy: number
    method: number
    newsSource: number
    instrument: number
    age: number
    investingYears: number
    goal: number
    monthlyAmount: number
    incomeSource: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomizationAvgAggregateInputType = {
    monthlyAmount?: true
  }

  export type CustomizationSumAggregateInputType = {
    monthlyAmount?: true
  }

  export type CustomizationMinAggregateInputType = {
    id?: true
    userId?: true
    categories?: true
    strategy?: true
    method?: true
    newsSource?: true
    instrument?: true
    age?: true
    investingYears?: true
    goal?: true
    monthlyAmount?: true
    incomeSource?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomizationMaxAggregateInputType = {
    id?: true
    userId?: true
    categories?: true
    strategy?: true
    method?: true
    newsSource?: true
    instrument?: true
    age?: true
    investingYears?: true
    goal?: true
    monthlyAmount?: true
    incomeSource?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomizationCountAggregateInputType = {
    id?: true
    userId?: true
    categories?: true
    strategy?: true
    method?: true
    newsSource?: true
    instrument?: true
    age?: true
    investingYears?: true
    goal?: true
    monthlyAmount?: true
    incomeSource?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customization to aggregate.
     */
    where?: CustomizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customizations to fetch.
     */
    orderBy?: CustomizationOrderByWithRelationInput | CustomizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customizations
    **/
    _count?: true | CustomizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomizationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomizationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomizationMaxAggregateInputType
  }

  export type GetCustomizationAggregateType<T extends CustomizationAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomization[P]>
      : GetScalarType<T[P], AggregateCustomization[P]>
  }




  export type CustomizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomizationWhereInput
    orderBy?: CustomizationOrderByWithAggregationInput | CustomizationOrderByWithAggregationInput[]
    by: CustomizationScalarFieldEnum[] | CustomizationScalarFieldEnum
    having?: CustomizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomizationCountAggregateInputType | true
    _avg?: CustomizationAvgAggregateInputType
    _sum?: CustomizationSumAggregateInputType
    _min?: CustomizationMinAggregateInputType
    _max?: CustomizationMaxAggregateInputType
  }

  export type CustomizationGroupByOutputType = {
    id: string
    userId: string
    categories: string | null
    strategy: string | null
    method: string | null
    newsSource: string | null
    instrument: string | null
    age: string | null
    investingYears: string | null
    goal: string | null
    monthlyAmount: number | null
    incomeSource: string | null
    createdAt: Date
    updatedAt: Date
    _count: CustomizationCountAggregateOutputType | null
    _avg: CustomizationAvgAggregateOutputType | null
    _sum: CustomizationSumAggregateOutputType | null
    _min: CustomizationMinAggregateOutputType | null
    _max: CustomizationMaxAggregateOutputType | null
  }

  type GetCustomizationGroupByPayload<T extends CustomizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomizationGroupByOutputType[P]>
            : GetScalarType<T[P], CustomizationGroupByOutputType[P]>
        }
      >
    >


  export type CustomizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    categories?: boolean
    strategy?: boolean
    method?: boolean
    newsSource?: boolean
    instrument?: boolean
    age?: boolean
    investingYears?: boolean
    goal?: boolean
    monthlyAmount?: boolean
    incomeSource?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customization"]>

  export type CustomizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    categories?: boolean
    strategy?: boolean
    method?: boolean
    newsSource?: boolean
    instrument?: boolean
    age?: boolean
    investingYears?: boolean
    goal?: boolean
    monthlyAmount?: boolean
    incomeSource?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customization"]>

  export type CustomizationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    categories?: boolean
    strategy?: boolean
    method?: boolean
    newsSource?: boolean
    instrument?: boolean
    age?: boolean
    investingYears?: boolean
    goal?: boolean
    monthlyAmount?: boolean
    incomeSource?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customization"]>

  export type CustomizationSelectScalar = {
    id?: boolean
    userId?: boolean
    categories?: boolean
    strategy?: boolean
    method?: boolean
    newsSource?: boolean
    instrument?: boolean
    age?: boolean
    investingYears?: boolean
    goal?: boolean
    monthlyAmount?: boolean
    incomeSource?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomizationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "categories" | "strategy" | "method" | "newsSource" | "instrument" | "age" | "investingYears" | "goal" | "monthlyAmount" | "incomeSource" | "createdAt" | "updatedAt", ExtArgs["result"]["customization"]>
  export type CustomizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CustomizationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CustomizationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CustomizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customization"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      categories: string | null
      strategy: string | null
      method: string | null
      newsSource: string | null
      instrument: string | null
      age: string | null
      investingYears: string | null
      goal: string | null
      monthlyAmount: number | null
      incomeSource: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customization"]>
    composites: {}
  }

  type CustomizationGetPayload<S extends boolean | null | undefined | CustomizationDefaultArgs> = $Result.GetResult<Prisma.$CustomizationPayload, S>

  type CustomizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomizationCountAggregateInputType | true
    }

  export interface CustomizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customization'], meta: { name: 'Customization' } }
    /**
     * Find zero or one Customization that matches the filter.
     * @param {CustomizationFindUniqueArgs} args - Arguments to find a Customization
     * @example
     * // Get one Customization
     * const customization = await prisma.customization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomizationFindUniqueArgs>(args: SelectSubset<T, CustomizationFindUniqueArgs<ExtArgs>>): Prisma__CustomizationClient<$Result.GetResult<Prisma.$CustomizationPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Customization that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomizationFindUniqueOrThrowArgs} args - Arguments to find a Customization
     * @example
     * // Get one Customization
     * const customization = await prisma.customization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomizationFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomizationClient<$Result.GetResult<Prisma.$CustomizationPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Customization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomizationFindFirstArgs} args - Arguments to find a Customization
     * @example
     * // Get one Customization
     * const customization = await prisma.customization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomizationFindFirstArgs>(args?: SelectSubset<T, CustomizationFindFirstArgs<ExtArgs>>): Prisma__CustomizationClient<$Result.GetResult<Prisma.$CustomizationPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Customization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomizationFindFirstOrThrowArgs} args - Arguments to find a Customization
     * @example
     * // Get one Customization
     * const customization = await prisma.customization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomizationFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomizationClient<$Result.GetResult<Prisma.$CustomizationPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Customizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customizations
     * const customizations = await prisma.customization.findMany()
     * 
     * // Get first 10 Customizations
     * const customizations = await prisma.customization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customizationWithIdOnly = await prisma.customization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomizationFindManyArgs>(args?: SelectSubset<T, CustomizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomizationPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Customization.
     * @param {CustomizationCreateArgs} args - Arguments to create a Customization.
     * @example
     * // Create one Customization
     * const Customization = await prisma.customization.create({
     *   data: {
     *     // ... data to create a Customization
     *   }
     * })
     * 
     */
    create<T extends CustomizationCreateArgs>(args: SelectSubset<T, CustomizationCreateArgs<ExtArgs>>): Prisma__CustomizationClient<$Result.GetResult<Prisma.$CustomizationPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Customizations.
     * @param {CustomizationCreateManyArgs} args - Arguments to create many Customizations.
     * @example
     * // Create many Customizations
     * const customization = await prisma.customization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomizationCreateManyArgs>(args?: SelectSubset<T, CustomizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customizations and returns the data saved in the database.
     * @param {CustomizationCreateManyAndReturnArgs} args - Arguments to create many Customizations.
     * @example
     * // Create many Customizations
     * const customization = await prisma.customization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customizations and only return the `id`
     * const customizationWithIdOnly = await prisma.customization.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomizationCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomizationPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Customization.
     * @param {CustomizationDeleteArgs} args - Arguments to delete one Customization.
     * @example
     * // Delete one Customization
     * const Customization = await prisma.customization.delete({
     *   where: {
     *     // ... filter to delete one Customization
     *   }
     * })
     * 
     */
    delete<T extends CustomizationDeleteArgs>(args: SelectSubset<T, CustomizationDeleteArgs<ExtArgs>>): Prisma__CustomizationClient<$Result.GetResult<Prisma.$CustomizationPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Customization.
     * @param {CustomizationUpdateArgs} args - Arguments to update one Customization.
     * @example
     * // Update one Customization
     * const customization = await prisma.customization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomizationUpdateArgs>(args: SelectSubset<T, CustomizationUpdateArgs<ExtArgs>>): Prisma__CustomizationClient<$Result.GetResult<Prisma.$CustomizationPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Customizations.
     * @param {CustomizationDeleteManyArgs} args - Arguments to filter Customizations to delete.
     * @example
     * // Delete a few Customizations
     * const { count } = await prisma.customization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomizationDeleteManyArgs>(args?: SelectSubset<T, CustomizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customizations
     * const customization = await prisma.customization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomizationUpdateManyArgs>(args: SelectSubset<T, CustomizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customizations and returns the data updated in the database.
     * @param {CustomizationUpdateManyAndReturnArgs} args - Arguments to update many Customizations.
     * @example
     * // Update many Customizations
     * const customization = await prisma.customization.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Customizations and only return the `id`
     * const customizationWithIdOnly = await prisma.customization.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomizationUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomizationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomizationPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Customization.
     * @param {CustomizationUpsertArgs} args - Arguments to update or create a Customization.
     * @example
     * // Update or create a Customization
     * const customization = await prisma.customization.upsert({
     *   create: {
     *     // ... data to create a Customization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customization we want to update
     *   }
     * })
     */
    upsert<T extends CustomizationUpsertArgs>(args: SelectSubset<T, CustomizationUpsertArgs<ExtArgs>>): Prisma__CustomizationClient<$Result.GetResult<Prisma.$CustomizationPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Customizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomizationCountArgs} args - Arguments to filter Customizations to count.
     * @example
     * // Count the number of Customizations
     * const count = await prisma.customization.count({
     *   where: {
     *     // ... the filter for the Customizations we want to count
     *   }
     * })
    **/
    count<T extends CustomizationCountArgs>(
      args?: Subset<T, CustomizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomizationAggregateArgs>(args: Subset<T, CustomizationAggregateArgs>): Prisma.PrismaPromise<GetCustomizationAggregateType<T>>

    /**
     * Group by Customization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomizationGroupByArgs['orderBy'] }
        : { orderBy?: CustomizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customization model
   */
  readonly fields: CustomizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customization model
   */ 
  interface CustomizationFieldRefs {
    readonly id: FieldRef<"Customization", 'String'>
    readonly userId: FieldRef<"Customization", 'String'>
    readonly categories: FieldRef<"Customization", 'String'>
    readonly strategy: FieldRef<"Customization", 'String'>
    readonly method: FieldRef<"Customization", 'String'>
    readonly newsSource: FieldRef<"Customization", 'String'>
    readonly instrument: FieldRef<"Customization", 'String'>
    readonly age: FieldRef<"Customization", 'String'>
    readonly investingYears: FieldRef<"Customization", 'String'>
    readonly goal: FieldRef<"Customization", 'String'>
    readonly monthlyAmount: FieldRef<"Customization", 'Int'>
    readonly incomeSource: FieldRef<"Customization", 'String'>
    readonly createdAt: FieldRef<"Customization", 'DateTime'>
    readonly updatedAt: FieldRef<"Customization", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Customization findUnique
   */
  export type CustomizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customization
     */
    select?: CustomizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customization
     */
    omit?: CustomizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomizationInclude<ExtArgs> | null
    /**
     * Filter, which Customization to fetch.
     */
    where: CustomizationWhereUniqueInput
  }

  /**
   * Customization findUniqueOrThrow
   */
  export type CustomizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customization
     */
    select?: CustomizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customization
     */
    omit?: CustomizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomizationInclude<ExtArgs> | null
    /**
     * Filter, which Customization to fetch.
     */
    where: CustomizationWhereUniqueInput
  }

  /**
   * Customization findFirst
   */
  export type CustomizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customization
     */
    select?: CustomizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customization
     */
    omit?: CustomizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomizationInclude<ExtArgs> | null
    /**
     * Filter, which Customization to fetch.
     */
    where?: CustomizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customizations to fetch.
     */
    orderBy?: CustomizationOrderByWithRelationInput | CustomizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customizations.
     */
    cursor?: CustomizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customizations.
     */
    distinct?: CustomizationScalarFieldEnum | CustomizationScalarFieldEnum[]
  }

  /**
   * Customization findFirstOrThrow
   */
  export type CustomizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customization
     */
    select?: CustomizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customization
     */
    omit?: CustomizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomizationInclude<ExtArgs> | null
    /**
     * Filter, which Customization to fetch.
     */
    where?: CustomizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customizations to fetch.
     */
    orderBy?: CustomizationOrderByWithRelationInput | CustomizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customizations.
     */
    cursor?: CustomizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customizations.
     */
    distinct?: CustomizationScalarFieldEnum | CustomizationScalarFieldEnum[]
  }

  /**
   * Customization findMany
   */
  export type CustomizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customization
     */
    select?: CustomizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customization
     */
    omit?: CustomizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomizationInclude<ExtArgs> | null
    /**
     * Filter, which Customizations to fetch.
     */
    where?: CustomizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customizations to fetch.
     */
    orderBy?: CustomizationOrderByWithRelationInput | CustomizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customizations.
     */
    cursor?: CustomizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customizations.
     */
    skip?: number
    distinct?: CustomizationScalarFieldEnum | CustomizationScalarFieldEnum[]
  }

  /**
   * Customization create
   */
  export type CustomizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customization
     */
    select?: CustomizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customization
     */
    omit?: CustomizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Customization.
     */
    data: XOR<CustomizationCreateInput, CustomizationUncheckedCreateInput>
  }

  /**
   * Customization createMany
   */
  export type CustomizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customizations.
     */
    data: CustomizationCreateManyInput | CustomizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customization createManyAndReturn
   */
  export type CustomizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customization
     */
    select?: CustomizationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customization
     */
    omit?: CustomizationOmit<ExtArgs> | null
    /**
     * The data used to create many Customizations.
     */
    data: CustomizationCreateManyInput | CustomizationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomizationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customization update
   */
  export type CustomizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customization
     */
    select?: CustomizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customization
     */
    omit?: CustomizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Customization.
     */
    data: XOR<CustomizationUpdateInput, CustomizationUncheckedUpdateInput>
    /**
     * Choose, which Customization to update.
     */
    where: CustomizationWhereUniqueInput
  }

  /**
   * Customization updateMany
   */
  export type CustomizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customizations.
     */
    data: XOR<CustomizationUpdateManyMutationInput, CustomizationUncheckedUpdateManyInput>
    /**
     * Filter which Customizations to update
     */
    where?: CustomizationWhereInput
  }

  /**
   * Customization updateManyAndReturn
   */
  export type CustomizationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customization
     */
    select?: CustomizationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customization
     */
    omit?: CustomizationOmit<ExtArgs> | null
    /**
     * The data used to update Customizations.
     */
    data: XOR<CustomizationUpdateManyMutationInput, CustomizationUncheckedUpdateManyInput>
    /**
     * Filter which Customizations to update
     */
    where?: CustomizationWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomizationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customization upsert
   */
  export type CustomizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customization
     */
    select?: CustomizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customization
     */
    omit?: CustomizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Customization to update in case it exists.
     */
    where: CustomizationWhereUniqueInput
    /**
     * In case the Customization found by the `where` argument doesn't exist, create a new Customization with this data.
     */
    create: XOR<CustomizationCreateInput, CustomizationUncheckedCreateInput>
    /**
     * In case the Customization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomizationUpdateInput, CustomizationUncheckedUpdateInput>
  }

  /**
   * Customization delete
   */
  export type CustomizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customization
     */
    select?: CustomizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customization
     */
    omit?: CustomizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomizationInclude<ExtArgs> | null
    /**
     * Filter which Customization to delete.
     */
    where: CustomizationWhereUniqueInput
  }

  /**
   * Customization deleteMany
   */
  export type CustomizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customizations to delete
     */
    where?: CustomizationWhereInput
  }

  /**
   * Customization without action
   */
  export type CustomizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customization
     */
    select?: CustomizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customization
     */
    omit?: CustomizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomizationInclude<ExtArgs> | null
  }


  /**
   * Model Stock
   */

  export type AggregateStock = {
    _count: StockCountAggregateOutputType | null
    _avg: StockAvgAggregateOutputType | null
    _sum: StockSumAggregateOutputType | null
    _min: StockMinAggregateOutputType | null
    _max: StockMaxAggregateOutputType | null
  }

  export type StockAvgAggregateOutputType = {
    marketCap: number | null
    id: number | null
    priceId: number | null
    volumeId: number | null
    week52Id: number | null
    dividendId: number | null
    earningsId: number | null
  }

  export type StockSumAggregateOutputType = {
    marketCap: number | null
    id: number | null
    priceId: number | null
    volumeId: number | null
    week52Id: number | null
    dividendId: number | null
    earningsId: number | null
  }

  export type StockMinAggregateOutputType = {
    symbol: string | null
    name: string | null
    typeDisp: string | null
    currency: string | null
    market: string | null
    marketCap: number | null
    createdAt: Date | null
    updatedAt: Date | null
    id: number | null
    priceId: number | null
    volumeId: number | null
    week52Id: number | null
    dividendId: number | null
    earningsId: number | null
  }

  export type StockMaxAggregateOutputType = {
    symbol: string | null
    name: string | null
    typeDisp: string | null
    currency: string | null
    market: string | null
    marketCap: number | null
    createdAt: Date | null
    updatedAt: Date | null
    id: number | null
    priceId: number | null
    volumeId: number | null
    week52Id: number | null
    dividendId: number | null
    earningsId: number | null
  }

  export type StockCountAggregateOutputType = {
    symbol: number
    name: number
    typeDisp: number
    currency: number
    market: number
    marketCap: number
    createdAt: number
    updatedAt: number
    id: number
    priceId: number
    volumeId: number
    week52Id: number
    dividendId: number
    earningsId: number
    _all: number
  }


  export type StockAvgAggregateInputType = {
    marketCap?: true
    id?: true
    priceId?: true
    volumeId?: true
    week52Id?: true
    dividendId?: true
    earningsId?: true
  }

  export type StockSumAggregateInputType = {
    marketCap?: true
    id?: true
    priceId?: true
    volumeId?: true
    week52Id?: true
    dividendId?: true
    earningsId?: true
  }

  export type StockMinAggregateInputType = {
    symbol?: true
    name?: true
    typeDisp?: true
    currency?: true
    market?: true
    marketCap?: true
    createdAt?: true
    updatedAt?: true
    id?: true
    priceId?: true
    volumeId?: true
    week52Id?: true
    dividendId?: true
    earningsId?: true
  }

  export type StockMaxAggregateInputType = {
    symbol?: true
    name?: true
    typeDisp?: true
    currency?: true
    market?: true
    marketCap?: true
    createdAt?: true
    updatedAt?: true
    id?: true
    priceId?: true
    volumeId?: true
    week52Id?: true
    dividendId?: true
    earningsId?: true
  }

  export type StockCountAggregateInputType = {
    symbol?: true
    name?: true
    typeDisp?: true
    currency?: true
    market?: true
    marketCap?: true
    createdAt?: true
    updatedAt?: true
    id?: true
    priceId?: true
    volumeId?: true
    week52Id?: true
    dividendId?: true
    earningsId?: true
    _all?: true
  }

  export type StockAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stock to aggregate.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stocks
    **/
    _count?: true | StockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StockMaxAggregateInputType
  }

  export type GetStockAggregateType<T extends StockAggregateArgs> = {
        [P in keyof T & keyof AggregateStock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStock[P]>
      : GetScalarType<T[P], AggregateStock[P]>
  }




  export type StockGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockWhereInput
    orderBy?: StockOrderByWithAggregationInput | StockOrderByWithAggregationInput[]
    by: StockScalarFieldEnum[] | StockScalarFieldEnum
    having?: StockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StockCountAggregateInputType | true
    _avg?: StockAvgAggregateInputType
    _sum?: StockSumAggregateInputType
    _min?: StockMinAggregateInputType
    _max?: StockMaxAggregateInputType
  }

  export type StockGroupByOutputType = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt: Date
    updatedAt: Date
    id: number
    priceId: number
    volumeId: number
    week52Id: number
    dividendId: number
    earningsId: number
    _count: StockCountAggregateOutputType | null
    _avg: StockAvgAggregateOutputType | null
    _sum: StockSumAggregateOutputType | null
    _min: StockMinAggregateOutputType | null
    _max: StockMaxAggregateOutputType | null
  }

  type GetStockGroupByPayload<T extends StockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StockGroupByOutputType[P]>
            : GetScalarType<T[P], StockGroupByOutputType[P]>
        }
      >
    >


  export type StockSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    symbol?: boolean
    name?: boolean
    typeDisp?: boolean
    currency?: boolean
    market?: boolean
    marketCap?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    priceId?: boolean
    volumeId?: boolean
    week52Id?: boolean
    dividendId?: boolean
    earningsId?: boolean
    dividend?: boolean | DividendDefaultArgs<ExtArgs>
    earnings?: boolean | EarningsDefaultArgs<ExtArgs>
    price?: boolean | PriceDefaultArgs<ExtArgs>
    volume?: boolean | VolumeDefaultArgs<ExtArgs>
    week52?: boolean | Week52DefaultArgs<ExtArgs>
    Investment?: boolean | Stock$InvestmentArgs<ExtArgs>
    _count?: boolean | StockCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stock"]>

  export type StockSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    symbol?: boolean
    name?: boolean
    typeDisp?: boolean
    currency?: boolean
    market?: boolean
    marketCap?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    priceId?: boolean
    volumeId?: boolean
    week52Id?: boolean
    dividendId?: boolean
    earningsId?: boolean
    dividend?: boolean | DividendDefaultArgs<ExtArgs>
    earnings?: boolean | EarningsDefaultArgs<ExtArgs>
    price?: boolean | PriceDefaultArgs<ExtArgs>
    volume?: boolean | VolumeDefaultArgs<ExtArgs>
    week52?: boolean | Week52DefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stock"]>

  export type StockSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    symbol?: boolean
    name?: boolean
    typeDisp?: boolean
    currency?: boolean
    market?: boolean
    marketCap?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    priceId?: boolean
    volumeId?: boolean
    week52Id?: boolean
    dividendId?: boolean
    earningsId?: boolean
    dividend?: boolean | DividendDefaultArgs<ExtArgs>
    earnings?: boolean | EarningsDefaultArgs<ExtArgs>
    price?: boolean | PriceDefaultArgs<ExtArgs>
    volume?: boolean | VolumeDefaultArgs<ExtArgs>
    week52?: boolean | Week52DefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stock"]>

  export type StockSelectScalar = {
    symbol?: boolean
    name?: boolean
    typeDisp?: boolean
    currency?: boolean
    market?: boolean
    marketCap?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    id?: boolean
    priceId?: boolean
    volumeId?: boolean
    week52Id?: boolean
    dividendId?: boolean
    earningsId?: boolean
  }

  export type StockOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"symbol" | "name" | "typeDisp" | "currency" | "market" | "marketCap" | "createdAt" | "updatedAt" | "id" | "priceId" | "volumeId" | "week52Id" | "dividendId" | "earningsId", ExtArgs["result"]["stock"]>
  export type StockInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dividend?: boolean | DividendDefaultArgs<ExtArgs>
    earnings?: boolean | EarningsDefaultArgs<ExtArgs>
    price?: boolean | PriceDefaultArgs<ExtArgs>
    volume?: boolean | VolumeDefaultArgs<ExtArgs>
    week52?: boolean | Week52DefaultArgs<ExtArgs>
    Investment?: boolean | Stock$InvestmentArgs<ExtArgs>
    _count?: boolean | StockCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StockIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dividend?: boolean | DividendDefaultArgs<ExtArgs>
    earnings?: boolean | EarningsDefaultArgs<ExtArgs>
    price?: boolean | PriceDefaultArgs<ExtArgs>
    volume?: boolean | VolumeDefaultArgs<ExtArgs>
    week52?: boolean | Week52DefaultArgs<ExtArgs>
  }
  export type StockIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dividend?: boolean | DividendDefaultArgs<ExtArgs>
    earnings?: boolean | EarningsDefaultArgs<ExtArgs>
    price?: boolean | PriceDefaultArgs<ExtArgs>
    volume?: boolean | VolumeDefaultArgs<ExtArgs>
    week52?: boolean | Week52DefaultArgs<ExtArgs>
  }

  export type $StockPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stock"
    objects: {
      dividend: Prisma.$DividendPayload<ExtArgs>
      earnings: Prisma.$EarningsPayload<ExtArgs>
      price: Prisma.$PricePayload<ExtArgs>
      volume: Prisma.$VolumePayload<ExtArgs>
      week52: Prisma.$Week52Payload<ExtArgs>
      Investment: Prisma.$InvestmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      symbol: string
      name: string
      typeDisp: string
      currency: string
      market: string
      marketCap: number
      createdAt: Date
      updatedAt: Date
      id: number
      priceId: number
      volumeId: number
      week52Id: number
      dividendId: number
      earningsId: number
    }, ExtArgs["result"]["stock"]>
    composites: {}
  }

  type StockGetPayload<S extends boolean | null | undefined | StockDefaultArgs> = $Result.GetResult<Prisma.$StockPayload, S>

  type StockCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StockFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StockCountAggregateInputType | true
    }

  export interface StockDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stock'], meta: { name: 'Stock' } }
    /**
     * Find zero or one Stock that matches the filter.
     * @param {StockFindUniqueArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StockFindUniqueArgs>(args: SelectSubset<T, StockFindUniqueArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Stock that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StockFindUniqueOrThrowArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StockFindUniqueOrThrowArgs>(args: SelectSubset<T, StockFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Stock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindFirstArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StockFindFirstArgs>(args?: SelectSubset<T, StockFindFirstArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Stock that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindFirstOrThrowArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StockFindFirstOrThrowArgs>(args?: SelectSubset<T, StockFindFirstOrThrowArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Stocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stocks
     * const stocks = await prisma.stock.findMany()
     * 
     * // Get first 10 Stocks
     * const stocks = await prisma.stock.findMany({ take: 10 })
     * 
     * // Only select the `symbol`
     * const stockWithSymbolOnly = await prisma.stock.findMany({ select: { symbol: true } })
     * 
     */
    findMany<T extends StockFindManyArgs>(args?: SelectSubset<T, StockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Stock.
     * @param {StockCreateArgs} args - Arguments to create a Stock.
     * @example
     * // Create one Stock
     * const Stock = await prisma.stock.create({
     *   data: {
     *     // ... data to create a Stock
     *   }
     * })
     * 
     */
    create<T extends StockCreateArgs>(args: SelectSubset<T, StockCreateArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Stocks.
     * @param {StockCreateManyArgs} args - Arguments to create many Stocks.
     * @example
     * // Create many Stocks
     * const stock = await prisma.stock.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StockCreateManyArgs>(args?: SelectSubset<T, StockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stocks and returns the data saved in the database.
     * @param {StockCreateManyAndReturnArgs} args - Arguments to create many Stocks.
     * @example
     * // Create many Stocks
     * const stock = await prisma.stock.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stocks and only return the `symbol`
     * const stockWithSymbolOnly = await prisma.stock.createManyAndReturn({
     *   select: { symbol: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StockCreateManyAndReturnArgs>(args?: SelectSubset<T, StockCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Stock.
     * @param {StockDeleteArgs} args - Arguments to delete one Stock.
     * @example
     * // Delete one Stock
     * const Stock = await prisma.stock.delete({
     *   where: {
     *     // ... filter to delete one Stock
     *   }
     * })
     * 
     */
    delete<T extends StockDeleteArgs>(args: SelectSubset<T, StockDeleteArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Stock.
     * @param {StockUpdateArgs} args - Arguments to update one Stock.
     * @example
     * // Update one Stock
     * const stock = await prisma.stock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StockUpdateArgs>(args: SelectSubset<T, StockUpdateArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Stocks.
     * @param {StockDeleteManyArgs} args - Arguments to filter Stocks to delete.
     * @example
     * // Delete a few Stocks
     * const { count } = await prisma.stock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StockDeleteManyArgs>(args?: SelectSubset<T, StockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stocks
     * const stock = await prisma.stock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StockUpdateManyArgs>(args: SelectSubset<T, StockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stocks and returns the data updated in the database.
     * @param {StockUpdateManyAndReturnArgs} args - Arguments to update many Stocks.
     * @example
     * // Update many Stocks
     * const stock = await prisma.stock.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stocks and only return the `symbol`
     * const stockWithSymbolOnly = await prisma.stock.updateManyAndReturn({
     *   select: { symbol: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StockUpdateManyAndReturnArgs>(args: SelectSubset<T, StockUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Stock.
     * @param {StockUpsertArgs} args - Arguments to update or create a Stock.
     * @example
     * // Update or create a Stock
     * const stock = await prisma.stock.upsert({
     *   create: {
     *     // ... data to create a Stock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stock we want to update
     *   }
     * })
     */
    upsert<T extends StockUpsertArgs>(args: SelectSubset<T, StockUpsertArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Stocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockCountArgs} args - Arguments to filter Stocks to count.
     * @example
     * // Count the number of Stocks
     * const count = await prisma.stock.count({
     *   where: {
     *     // ... the filter for the Stocks we want to count
     *   }
     * })
    **/
    count<T extends StockCountArgs>(
      args?: Subset<T, StockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StockAggregateArgs>(args: Subset<T, StockAggregateArgs>): Prisma.PrismaPromise<GetStockAggregateType<T>>

    /**
     * Group by Stock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StockGroupByArgs['orderBy'] }
        : { orderBy?: StockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stock model
   */
  readonly fields: StockFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StockClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    dividend<T extends DividendDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DividendDefaultArgs<ExtArgs>>): Prisma__DividendClient<$Result.GetResult<Prisma.$DividendPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    earnings<T extends EarningsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EarningsDefaultArgs<ExtArgs>>): Prisma__EarningsClient<$Result.GetResult<Prisma.$EarningsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    price<T extends PriceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PriceDefaultArgs<ExtArgs>>): Prisma__PriceClient<$Result.GetResult<Prisma.$PricePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    volume<T extends VolumeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VolumeDefaultArgs<ExtArgs>>): Prisma__VolumeClient<$Result.GetResult<Prisma.$VolumePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    week52<T extends Week52DefaultArgs<ExtArgs> = {}>(args?: Subset<T, Week52DefaultArgs<ExtArgs>>): Prisma__Week52Client<$Result.GetResult<Prisma.$Week52Payload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    Investment<T extends Stock$InvestmentArgs<ExtArgs> = {}>(args?: Subset<T, Stock$InvestmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stock model
   */ 
  interface StockFieldRefs {
    readonly symbol: FieldRef<"Stock", 'String'>
    readonly name: FieldRef<"Stock", 'String'>
    readonly typeDisp: FieldRef<"Stock", 'String'>
    readonly currency: FieldRef<"Stock", 'String'>
    readonly market: FieldRef<"Stock", 'String'>
    readonly marketCap: FieldRef<"Stock", 'Int'>
    readonly createdAt: FieldRef<"Stock", 'DateTime'>
    readonly updatedAt: FieldRef<"Stock", 'DateTime'>
    readonly id: FieldRef<"Stock", 'Int'>
    readonly priceId: FieldRef<"Stock", 'Int'>
    readonly volumeId: FieldRef<"Stock", 'Int'>
    readonly week52Id: FieldRef<"Stock", 'Int'>
    readonly dividendId: FieldRef<"Stock", 'Int'>
    readonly earningsId: FieldRef<"Stock", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Stock findUnique
   */
  export type StockFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock findUniqueOrThrow
   */
  export type StockFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock findFirst
   */
  export type StockFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stocks.
     */
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Stock findFirstOrThrow
   */
  export type StockFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stocks.
     */
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Stock findMany
   */
  export type StockFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stocks to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Stock create
   */
  export type StockCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The data needed to create a Stock.
     */
    data: XOR<StockCreateInput, StockUncheckedCreateInput>
  }

  /**
   * Stock createMany
   */
  export type StockCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stocks.
     */
    data: StockCreateManyInput | StockCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stock createManyAndReturn
   */
  export type StockCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * The data used to create many Stocks.
     */
    data: StockCreateManyInput | StockCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stock update
   */
  export type StockUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The data needed to update a Stock.
     */
    data: XOR<StockUpdateInput, StockUncheckedUpdateInput>
    /**
     * Choose, which Stock to update.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock updateMany
   */
  export type StockUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stocks.
     */
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyInput>
    /**
     * Filter which Stocks to update
     */
    where?: StockWhereInput
  }

  /**
   * Stock updateManyAndReturn
   */
  export type StockUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * The data used to update Stocks.
     */
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyInput>
    /**
     * Filter which Stocks to update
     */
    where?: StockWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stock upsert
   */
  export type StockUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The filter to search for the Stock to update in case it exists.
     */
    where: StockWhereUniqueInput
    /**
     * In case the Stock found by the `where` argument doesn't exist, create a new Stock with this data.
     */
    create: XOR<StockCreateInput, StockUncheckedCreateInput>
    /**
     * In case the Stock was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StockUpdateInput, StockUncheckedUpdateInput>
  }

  /**
   * Stock delete
   */
  export type StockDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter which Stock to delete.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock deleteMany
   */
  export type StockDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stocks to delete
     */
    where?: StockWhereInput
  }

  /**
   * Stock.Investment
   */
  export type Stock$InvestmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    where?: InvestmentWhereInput
    orderBy?: InvestmentOrderByWithRelationInput | InvestmentOrderByWithRelationInput[]
    cursor?: InvestmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvestmentScalarFieldEnum | InvestmentScalarFieldEnum[]
  }

  /**
   * Stock without action
   */
  export type StockDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
  }


  /**
   * Model Price
   */

  export type AggregatePrice = {
    _count: PriceCountAggregateOutputType | null
    _avg: PriceAvgAggregateOutputType | null
    _sum: PriceSumAggregateOutputType | null
    _min: PriceMinAggregateOutputType | null
    _max: PriceMaxAggregateOutputType | null
  }

  export type PriceAvgAggregateOutputType = {
    current: number | null
    changePercent: number | null
    open: number | null
    dayLow: number | null
    dayHigh: number | null
    previousClose: number | null
    postMarketPrice: number | null
    postMarketChange: number | null
    id: number | null
  }

  export type PriceSumAggregateOutputType = {
    current: number | null
    changePercent: number | null
    open: number | null
    dayLow: number | null
    dayHigh: number | null
    previousClose: number | null
    postMarketPrice: number | null
    postMarketChange: number | null
    id: number | null
  }

  export type PriceMinAggregateOutputType = {
    current: number | null
    changePercent: number | null
    open: number | null
    dayLow: number | null
    dayHigh: number | null
    previousClose: number | null
    postMarketPrice: number | null
    postMarketChange: number | null
    id: number | null
  }

  export type PriceMaxAggregateOutputType = {
    current: number | null
    changePercent: number | null
    open: number | null
    dayLow: number | null
    dayHigh: number | null
    previousClose: number | null
    postMarketPrice: number | null
    postMarketChange: number | null
    id: number | null
  }

  export type PriceCountAggregateOutputType = {
    current: number
    changePercent: number
    open: number
    dayLow: number
    dayHigh: number
    previousClose: number
    postMarketPrice: number
    postMarketChange: number
    id: number
    _all: number
  }


  export type PriceAvgAggregateInputType = {
    current?: true
    changePercent?: true
    open?: true
    dayLow?: true
    dayHigh?: true
    previousClose?: true
    postMarketPrice?: true
    postMarketChange?: true
    id?: true
  }

  export type PriceSumAggregateInputType = {
    current?: true
    changePercent?: true
    open?: true
    dayLow?: true
    dayHigh?: true
    previousClose?: true
    postMarketPrice?: true
    postMarketChange?: true
    id?: true
  }

  export type PriceMinAggregateInputType = {
    current?: true
    changePercent?: true
    open?: true
    dayLow?: true
    dayHigh?: true
    previousClose?: true
    postMarketPrice?: true
    postMarketChange?: true
    id?: true
  }

  export type PriceMaxAggregateInputType = {
    current?: true
    changePercent?: true
    open?: true
    dayLow?: true
    dayHigh?: true
    previousClose?: true
    postMarketPrice?: true
    postMarketChange?: true
    id?: true
  }

  export type PriceCountAggregateInputType = {
    current?: true
    changePercent?: true
    open?: true
    dayLow?: true
    dayHigh?: true
    previousClose?: true
    postMarketPrice?: true
    postMarketChange?: true
    id?: true
    _all?: true
  }

  export type PriceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Price to aggregate.
     */
    where?: PriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prices to fetch.
     */
    orderBy?: PriceOrderByWithRelationInput | PriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Prices
    **/
    _count?: true | PriceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PriceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PriceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PriceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PriceMaxAggregateInputType
  }

  export type GetPriceAggregateType<T extends PriceAggregateArgs> = {
        [P in keyof T & keyof AggregatePrice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrice[P]>
      : GetScalarType<T[P], AggregatePrice[P]>
  }




  export type PriceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PriceWhereInput
    orderBy?: PriceOrderByWithAggregationInput | PriceOrderByWithAggregationInput[]
    by: PriceScalarFieldEnum[] | PriceScalarFieldEnum
    having?: PriceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PriceCountAggregateInputType | true
    _avg?: PriceAvgAggregateInputType
    _sum?: PriceSumAggregateInputType
    _min?: PriceMinAggregateInputType
    _max?: PriceMaxAggregateInputType
  }

  export type PriceGroupByOutputType = {
    current: number | null
    changePercent: number | null
    open: number | null
    dayLow: number | null
    dayHigh: number | null
    previousClose: number | null
    postMarketPrice: number | null
    postMarketChange: number | null
    id: number
    _count: PriceCountAggregateOutputType | null
    _avg: PriceAvgAggregateOutputType | null
    _sum: PriceSumAggregateOutputType | null
    _min: PriceMinAggregateOutputType | null
    _max: PriceMaxAggregateOutputType | null
  }

  type GetPriceGroupByPayload<T extends PriceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PriceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PriceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PriceGroupByOutputType[P]>
            : GetScalarType<T[P], PriceGroupByOutputType[P]>
        }
      >
    >


  export type PriceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    current?: boolean
    changePercent?: boolean
    open?: boolean
    dayLow?: boolean
    dayHigh?: boolean
    previousClose?: boolean
    postMarketPrice?: boolean
    postMarketChange?: boolean
    id?: boolean
    Stock?: boolean | Price$StockArgs<ExtArgs>
    _count?: boolean | PriceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["price"]>

  export type PriceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    current?: boolean
    changePercent?: boolean
    open?: boolean
    dayLow?: boolean
    dayHigh?: boolean
    previousClose?: boolean
    postMarketPrice?: boolean
    postMarketChange?: boolean
    id?: boolean
  }, ExtArgs["result"]["price"]>

  export type PriceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    current?: boolean
    changePercent?: boolean
    open?: boolean
    dayLow?: boolean
    dayHigh?: boolean
    previousClose?: boolean
    postMarketPrice?: boolean
    postMarketChange?: boolean
    id?: boolean
  }, ExtArgs["result"]["price"]>

  export type PriceSelectScalar = {
    current?: boolean
    changePercent?: boolean
    open?: boolean
    dayLow?: boolean
    dayHigh?: boolean
    previousClose?: boolean
    postMarketPrice?: boolean
    postMarketChange?: boolean
    id?: boolean
  }

  export type PriceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"current" | "changePercent" | "open" | "dayLow" | "dayHigh" | "previousClose" | "postMarketPrice" | "postMarketChange" | "id", ExtArgs["result"]["price"]>
  export type PriceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Stock?: boolean | Price$StockArgs<ExtArgs>
    _count?: boolean | PriceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PriceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PriceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PricePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Price"
    objects: {
      Stock: Prisma.$StockPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      current: number | null
      changePercent: number | null
      open: number | null
      dayLow: number | null
      dayHigh: number | null
      previousClose: number | null
      postMarketPrice: number | null
      postMarketChange: number | null
      id: number
    }, ExtArgs["result"]["price"]>
    composites: {}
  }

  type PriceGetPayload<S extends boolean | null | undefined | PriceDefaultArgs> = $Result.GetResult<Prisma.$PricePayload, S>

  type PriceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PriceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PriceCountAggregateInputType | true
    }

  export interface PriceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Price'], meta: { name: 'Price' } }
    /**
     * Find zero or one Price that matches the filter.
     * @param {PriceFindUniqueArgs} args - Arguments to find a Price
     * @example
     * // Get one Price
     * const price = await prisma.price.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PriceFindUniqueArgs>(args: SelectSubset<T, PriceFindUniqueArgs<ExtArgs>>): Prisma__PriceClient<$Result.GetResult<Prisma.$PricePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Price that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PriceFindUniqueOrThrowArgs} args - Arguments to find a Price
     * @example
     * // Get one Price
     * const price = await prisma.price.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PriceFindUniqueOrThrowArgs>(args: SelectSubset<T, PriceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PriceClient<$Result.GetResult<Prisma.$PricePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Price that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceFindFirstArgs} args - Arguments to find a Price
     * @example
     * // Get one Price
     * const price = await prisma.price.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PriceFindFirstArgs>(args?: SelectSubset<T, PriceFindFirstArgs<ExtArgs>>): Prisma__PriceClient<$Result.GetResult<Prisma.$PricePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Price that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceFindFirstOrThrowArgs} args - Arguments to find a Price
     * @example
     * // Get one Price
     * const price = await prisma.price.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PriceFindFirstOrThrowArgs>(args?: SelectSubset<T, PriceFindFirstOrThrowArgs<ExtArgs>>): Prisma__PriceClient<$Result.GetResult<Prisma.$PricePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Prices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prices
     * const prices = await prisma.price.findMany()
     * 
     * // Get first 10 Prices
     * const prices = await prisma.price.findMany({ take: 10 })
     * 
     * // Only select the `current`
     * const priceWithCurrentOnly = await prisma.price.findMany({ select: { current: true } })
     * 
     */
    findMany<T extends PriceFindManyArgs>(args?: SelectSubset<T, PriceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PricePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Price.
     * @param {PriceCreateArgs} args - Arguments to create a Price.
     * @example
     * // Create one Price
     * const Price = await prisma.price.create({
     *   data: {
     *     // ... data to create a Price
     *   }
     * })
     * 
     */
    create<T extends PriceCreateArgs>(args: SelectSubset<T, PriceCreateArgs<ExtArgs>>): Prisma__PriceClient<$Result.GetResult<Prisma.$PricePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Prices.
     * @param {PriceCreateManyArgs} args - Arguments to create many Prices.
     * @example
     * // Create many Prices
     * const price = await prisma.price.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PriceCreateManyArgs>(args?: SelectSubset<T, PriceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Prices and returns the data saved in the database.
     * @param {PriceCreateManyAndReturnArgs} args - Arguments to create many Prices.
     * @example
     * // Create many Prices
     * const price = await prisma.price.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Prices and only return the `current`
     * const priceWithCurrentOnly = await prisma.price.createManyAndReturn({
     *   select: { current: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PriceCreateManyAndReturnArgs>(args?: SelectSubset<T, PriceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PricePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Price.
     * @param {PriceDeleteArgs} args - Arguments to delete one Price.
     * @example
     * // Delete one Price
     * const Price = await prisma.price.delete({
     *   where: {
     *     // ... filter to delete one Price
     *   }
     * })
     * 
     */
    delete<T extends PriceDeleteArgs>(args: SelectSubset<T, PriceDeleteArgs<ExtArgs>>): Prisma__PriceClient<$Result.GetResult<Prisma.$PricePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Price.
     * @param {PriceUpdateArgs} args - Arguments to update one Price.
     * @example
     * // Update one Price
     * const price = await prisma.price.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PriceUpdateArgs>(args: SelectSubset<T, PriceUpdateArgs<ExtArgs>>): Prisma__PriceClient<$Result.GetResult<Prisma.$PricePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Prices.
     * @param {PriceDeleteManyArgs} args - Arguments to filter Prices to delete.
     * @example
     * // Delete a few Prices
     * const { count } = await prisma.price.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PriceDeleteManyArgs>(args?: SelectSubset<T, PriceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prices
     * const price = await prisma.price.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PriceUpdateManyArgs>(args: SelectSubset<T, PriceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prices and returns the data updated in the database.
     * @param {PriceUpdateManyAndReturnArgs} args - Arguments to update many Prices.
     * @example
     * // Update many Prices
     * const price = await prisma.price.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Prices and only return the `current`
     * const priceWithCurrentOnly = await prisma.price.updateManyAndReturn({
     *   select: { current: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PriceUpdateManyAndReturnArgs>(args: SelectSubset<T, PriceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PricePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Price.
     * @param {PriceUpsertArgs} args - Arguments to update or create a Price.
     * @example
     * // Update or create a Price
     * const price = await prisma.price.upsert({
     *   create: {
     *     // ... data to create a Price
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Price we want to update
     *   }
     * })
     */
    upsert<T extends PriceUpsertArgs>(args: SelectSubset<T, PriceUpsertArgs<ExtArgs>>): Prisma__PriceClient<$Result.GetResult<Prisma.$PricePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Prices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceCountArgs} args - Arguments to filter Prices to count.
     * @example
     * // Count the number of Prices
     * const count = await prisma.price.count({
     *   where: {
     *     // ... the filter for the Prices we want to count
     *   }
     * })
    **/
    count<T extends PriceCountArgs>(
      args?: Subset<T, PriceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PriceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Price.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PriceAggregateArgs>(args: Subset<T, PriceAggregateArgs>): Prisma.PrismaPromise<GetPriceAggregateType<T>>

    /**
     * Group by Price.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PriceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PriceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PriceGroupByArgs['orderBy'] }
        : { orderBy?: PriceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PriceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPriceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Price model
   */
  readonly fields: PriceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Price.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PriceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Stock<T extends Price$StockArgs<ExtArgs> = {}>(args?: Subset<T, Price$StockArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Price model
   */ 
  interface PriceFieldRefs {
    readonly current: FieldRef<"Price", 'Float'>
    readonly changePercent: FieldRef<"Price", 'Float'>
    readonly open: FieldRef<"Price", 'Float'>
    readonly dayLow: FieldRef<"Price", 'Float'>
    readonly dayHigh: FieldRef<"Price", 'Float'>
    readonly previousClose: FieldRef<"Price", 'Float'>
    readonly postMarketPrice: FieldRef<"Price", 'Float'>
    readonly postMarketChange: FieldRef<"Price", 'Float'>
    readonly id: FieldRef<"Price", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Price findUnique
   */
  export type PriceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Price
     */
    select?: PriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Price
     */
    omit?: PriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceInclude<ExtArgs> | null
    /**
     * Filter, which Price to fetch.
     */
    where: PriceWhereUniqueInput
  }

  /**
   * Price findUniqueOrThrow
   */
  export type PriceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Price
     */
    select?: PriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Price
     */
    omit?: PriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceInclude<ExtArgs> | null
    /**
     * Filter, which Price to fetch.
     */
    where: PriceWhereUniqueInput
  }

  /**
   * Price findFirst
   */
  export type PriceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Price
     */
    select?: PriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Price
     */
    omit?: PriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceInclude<ExtArgs> | null
    /**
     * Filter, which Price to fetch.
     */
    where?: PriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prices to fetch.
     */
    orderBy?: PriceOrderByWithRelationInput | PriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prices.
     */
    cursor?: PriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prices.
     */
    distinct?: PriceScalarFieldEnum | PriceScalarFieldEnum[]
  }

  /**
   * Price findFirstOrThrow
   */
  export type PriceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Price
     */
    select?: PriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Price
     */
    omit?: PriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceInclude<ExtArgs> | null
    /**
     * Filter, which Price to fetch.
     */
    where?: PriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prices to fetch.
     */
    orderBy?: PriceOrderByWithRelationInput | PriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Prices.
     */
    cursor?: PriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Prices.
     */
    distinct?: PriceScalarFieldEnum | PriceScalarFieldEnum[]
  }

  /**
   * Price findMany
   */
  export type PriceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Price
     */
    select?: PriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Price
     */
    omit?: PriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceInclude<ExtArgs> | null
    /**
     * Filter, which Prices to fetch.
     */
    where?: PriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Prices to fetch.
     */
    orderBy?: PriceOrderByWithRelationInput | PriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Prices.
     */
    cursor?: PriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Prices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Prices.
     */
    skip?: number
    distinct?: PriceScalarFieldEnum | PriceScalarFieldEnum[]
  }

  /**
   * Price create
   */
  export type PriceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Price
     */
    select?: PriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Price
     */
    omit?: PriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceInclude<ExtArgs> | null
    /**
     * The data needed to create a Price.
     */
    data?: XOR<PriceCreateInput, PriceUncheckedCreateInput>
  }

  /**
   * Price createMany
   */
  export type PriceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Prices.
     */
    data: PriceCreateManyInput | PriceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Price createManyAndReturn
   */
  export type PriceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Price
     */
    select?: PriceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Price
     */
    omit?: PriceOmit<ExtArgs> | null
    /**
     * The data used to create many Prices.
     */
    data: PriceCreateManyInput | PriceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Price update
   */
  export type PriceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Price
     */
    select?: PriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Price
     */
    omit?: PriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceInclude<ExtArgs> | null
    /**
     * The data needed to update a Price.
     */
    data: XOR<PriceUpdateInput, PriceUncheckedUpdateInput>
    /**
     * Choose, which Price to update.
     */
    where: PriceWhereUniqueInput
  }

  /**
   * Price updateMany
   */
  export type PriceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Prices.
     */
    data: XOR<PriceUpdateManyMutationInput, PriceUncheckedUpdateManyInput>
    /**
     * Filter which Prices to update
     */
    where?: PriceWhereInput
  }

  /**
   * Price updateManyAndReturn
   */
  export type PriceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Price
     */
    select?: PriceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Price
     */
    omit?: PriceOmit<ExtArgs> | null
    /**
     * The data used to update Prices.
     */
    data: XOR<PriceUpdateManyMutationInput, PriceUncheckedUpdateManyInput>
    /**
     * Filter which Prices to update
     */
    where?: PriceWhereInput
  }

  /**
   * Price upsert
   */
  export type PriceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Price
     */
    select?: PriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Price
     */
    omit?: PriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceInclude<ExtArgs> | null
    /**
     * The filter to search for the Price to update in case it exists.
     */
    where: PriceWhereUniqueInput
    /**
     * In case the Price found by the `where` argument doesn't exist, create a new Price with this data.
     */
    create: XOR<PriceCreateInput, PriceUncheckedCreateInput>
    /**
     * In case the Price was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PriceUpdateInput, PriceUncheckedUpdateInput>
  }

  /**
   * Price delete
   */
  export type PriceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Price
     */
    select?: PriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Price
     */
    omit?: PriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceInclude<ExtArgs> | null
    /**
     * Filter which Price to delete.
     */
    where: PriceWhereUniqueInput
  }

  /**
   * Price deleteMany
   */
  export type PriceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Prices to delete
     */
    where?: PriceWhereInput
  }

  /**
   * Price.Stock
   */
  export type Price$StockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    where?: StockWhereInput
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    cursor?: StockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Price without action
   */
  export type PriceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Price
     */
    select?: PriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Price
     */
    omit?: PriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PriceInclude<ExtArgs> | null
  }


  /**
   * Model Volume
   */

  export type AggregateVolume = {
    _count: VolumeCountAggregateOutputType | null
    _avg: VolumeAvgAggregateOutputType | null
    _sum: VolumeSumAggregateOutputType | null
    _min: VolumeMinAggregateOutputType | null
    _max: VolumeMaxAggregateOutputType | null
  }

  export type VolumeAvgAggregateOutputType = {
    current: number | null
    average3Months: number | null
    average10Days: number | null
    id: number | null
  }

  export type VolumeSumAggregateOutputType = {
    current: number | null
    average3Months: number | null
    average10Days: number | null
    id: number | null
  }

  export type VolumeMinAggregateOutputType = {
    current: number | null
    average3Months: number | null
    average10Days: number | null
    id: number | null
  }

  export type VolumeMaxAggregateOutputType = {
    current: number | null
    average3Months: number | null
    average10Days: number | null
    id: number | null
  }

  export type VolumeCountAggregateOutputType = {
    current: number
    average3Months: number
    average10Days: number
    id: number
    _all: number
  }


  export type VolumeAvgAggregateInputType = {
    current?: true
    average3Months?: true
    average10Days?: true
    id?: true
  }

  export type VolumeSumAggregateInputType = {
    current?: true
    average3Months?: true
    average10Days?: true
    id?: true
  }

  export type VolumeMinAggregateInputType = {
    current?: true
    average3Months?: true
    average10Days?: true
    id?: true
  }

  export type VolumeMaxAggregateInputType = {
    current?: true
    average3Months?: true
    average10Days?: true
    id?: true
  }

  export type VolumeCountAggregateInputType = {
    current?: true
    average3Months?: true
    average10Days?: true
    id?: true
    _all?: true
  }

  export type VolumeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Volume to aggregate.
     */
    where?: VolumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Volumes to fetch.
     */
    orderBy?: VolumeOrderByWithRelationInput | VolumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VolumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Volumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Volumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Volumes
    **/
    _count?: true | VolumeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VolumeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VolumeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VolumeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VolumeMaxAggregateInputType
  }

  export type GetVolumeAggregateType<T extends VolumeAggregateArgs> = {
        [P in keyof T & keyof AggregateVolume]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVolume[P]>
      : GetScalarType<T[P], AggregateVolume[P]>
  }




  export type VolumeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VolumeWhereInput
    orderBy?: VolumeOrderByWithAggregationInput | VolumeOrderByWithAggregationInput[]
    by: VolumeScalarFieldEnum[] | VolumeScalarFieldEnum
    having?: VolumeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VolumeCountAggregateInputType | true
    _avg?: VolumeAvgAggregateInputType
    _sum?: VolumeSumAggregateInputType
    _min?: VolumeMinAggregateInputType
    _max?: VolumeMaxAggregateInputType
  }

  export type VolumeGroupByOutputType = {
    current: number | null
    average3Months: number | null
    average10Days: number | null
    id: number
    _count: VolumeCountAggregateOutputType | null
    _avg: VolumeAvgAggregateOutputType | null
    _sum: VolumeSumAggregateOutputType | null
    _min: VolumeMinAggregateOutputType | null
    _max: VolumeMaxAggregateOutputType | null
  }

  type GetVolumeGroupByPayload<T extends VolumeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VolumeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VolumeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VolumeGroupByOutputType[P]>
            : GetScalarType<T[P], VolumeGroupByOutputType[P]>
        }
      >
    >


  export type VolumeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    current?: boolean
    average3Months?: boolean
    average10Days?: boolean
    id?: boolean
    Stock?: boolean | Volume$StockArgs<ExtArgs>
    _count?: boolean | VolumeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["volume"]>

  export type VolumeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    current?: boolean
    average3Months?: boolean
    average10Days?: boolean
    id?: boolean
  }, ExtArgs["result"]["volume"]>

  export type VolumeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    current?: boolean
    average3Months?: boolean
    average10Days?: boolean
    id?: boolean
  }, ExtArgs["result"]["volume"]>

  export type VolumeSelectScalar = {
    current?: boolean
    average3Months?: boolean
    average10Days?: boolean
    id?: boolean
  }

  export type VolumeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"current" | "average3Months" | "average10Days" | "id", ExtArgs["result"]["volume"]>
  export type VolumeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Stock?: boolean | Volume$StockArgs<ExtArgs>
    _count?: boolean | VolumeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VolumeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type VolumeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $VolumePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Volume"
    objects: {
      Stock: Prisma.$StockPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      current: number | null
      average3Months: number | null
      average10Days: number | null
      id: number
    }, ExtArgs["result"]["volume"]>
    composites: {}
  }

  type VolumeGetPayload<S extends boolean | null | undefined | VolumeDefaultArgs> = $Result.GetResult<Prisma.$VolumePayload, S>

  type VolumeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VolumeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VolumeCountAggregateInputType | true
    }

  export interface VolumeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Volume'], meta: { name: 'Volume' } }
    /**
     * Find zero or one Volume that matches the filter.
     * @param {VolumeFindUniqueArgs} args - Arguments to find a Volume
     * @example
     * // Get one Volume
     * const volume = await prisma.volume.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VolumeFindUniqueArgs>(args: SelectSubset<T, VolumeFindUniqueArgs<ExtArgs>>): Prisma__VolumeClient<$Result.GetResult<Prisma.$VolumePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Volume that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VolumeFindUniqueOrThrowArgs} args - Arguments to find a Volume
     * @example
     * // Get one Volume
     * const volume = await prisma.volume.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VolumeFindUniqueOrThrowArgs>(args: SelectSubset<T, VolumeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VolumeClient<$Result.GetResult<Prisma.$VolumePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Volume that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolumeFindFirstArgs} args - Arguments to find a Volume
     * @example
     * // Get one Volume
     * const volume = await prisma.volume.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VolumeFindFirstArgs>(args?: SelectSubset<T, VolumeFindFirstArgs<ExtArgs>>): Prisma__VolumeClient<$Result.GetResult<Prisma.$VolumePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Volume that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolumeFindFirstOrThrowArgs} args - Arguments to find a Volume
     * @example
     * // Get one Volume
     * const volume = await prisma.volume.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VolumeFindFirstOrThrowArgs>(args?: SelectSubset<T, VolumeFindFirstOrThrowArgs<ExtArgs>>): Prisma__VolumeClient<$Result.GetResult<Prisma.$VolumePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Volumes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolumeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Volumes
     * const volumes = await prisma.volume.findMany()
     * 
     * // Get first 10 Volumes
     * const volumes = await prisma.volume.findMany({ take: 10 })
     * 
     * // Only select the `current`
     * const volumeWithCurrentOnly = await prisma.volume.findMany({ select: { current: true } })
     * 
     */
    findMany<T extends VolumeFindManyArgs>(args?: SelectSubset<T, VolumeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolumePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Volume.
     * @param {VolumeCreateArgs} args - Arguments to create a Volume.
     * @example
     * // Create one Volume
     * const Volume = await prisma.volume.create({
     *   data: {
     *     // ... data to create a Volume
     *   }
     * })
     * 
     */
    create<T extends VolumeCreateArgs>(args: SelectSubset<T, VolumeCreateArgs<ExtArgs>>): Prisma__VolumeClient<$Result.GetResult<Prisma.$VolumePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Volumes.
     * @param {VolumeCreateManyArgs} args - Arguments to create many Volumes.
     * @example
     * // Create many Volumes
     * const volume = await prisma.volume.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VolumeCreateManyArgs>(args?: SelectSubset<T, VolumeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Volumes and returns the data saved in the database.
     * @param {VolumeCreateManyAndReturnArgs} args - Arguments to create many Volumes.
     * @example
     * // Create many Volumes
     * const volume = await prisma.volume.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Volumes and only return the `current`
     * const volumeWithCurrentOnly = await prisma.volume.createManyAndReturn({
     *   select: { current: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VolumeCreateManyAndReturnArgs>(args?: SelectSubset<T, VolumeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolumePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Volume.
     * @param {VolumeDeleteArgs} args - Arguments to delete one Volume.
     * @example
     * // Delete one Volume
     * const Volume = await prisma.volume.delete({
     *   where: {
     *     // ... filter to delete one Volume
     *   }
     * })
     * 
     */
    delete<T extends VolumeDeleteArgs>(args: SelectSubset<T, VolumeDeleteArgs<ExtArgs>>): Prisma__VolumeClient<$Result.GetResult<Prisma.$VolumePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Volume.
     * @param {VolumeUpdateArgs} args - Arguments to update one Volume.
     * @example
     * // Update one Volume
     * const volume = await prisma.volume.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VolumeUpdateArgs>(args: SelectSubset<T, VolumeUpdateArgs<ExtArgs>>): Prisma__VolumeClient<$Result.GetResult<Prisma.$VolumePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Volumes.
     * @param {VolumeDeleteManyArgs} args - Arguments to filter Volumes to delete.
     * @example
     * // Delete a few Volumes
     * const { count } = await prisma.volume.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VolumeDeleteManyArgs>(args?: SelectSubset<T, VolumeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Volumes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolumeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Volumes
     * const volume = await prisma.volume.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VolumeUpdateManyArgs>(args: SelectSubset<T, VolumeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Volumes and returns the data updated in the database.
     * @param {VolumeUpdateManyAndReturnArgs} args - Arguments to update many Volumes.
     * @example
     * // Update many Volumes
     * const volume = await prisma.volume.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Volumes and only return the `current`
     * const volumeWithCurrentOnly = await prisma.volume.updateManyAndReturn({
     *   select: { current: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VolumeUpdateManyAndReturnArgs>(args: SelectSubset<T, VolumeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VolumePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Volume.
     * @param {VolumeUpsertArgs} args - Arguments to update or create a Volume.
     * @example
     * // Update or create a Volume
     * const volume = await prisma.volume.upsert({
     *   create: {
     *     // ... data to create a Volume
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Volume we want to update
     *   }
     * })
     */
    upsert<T extends VolumeUpsertArgs>(args: SelectSubset<T, VolumeUpsertArgs<ExtArgs>>): Prisma__VolumeClient<$Result.GetResult<Prisma.$VolumePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Volumes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolumeCountArgs} args - Arguments to filter Volumes to count.
     * @example
     * // Count the number of Volumes
     * const count = await prisma.volume.count({
     *   where: {
     *     // ... the filter for the Volumes we want to count
     *   }
     * })
    **/
    count<T extends VolumeCountArgs>(
      args?: Subset<T, VolumeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VolumeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Volume.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolumeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VolumeAggregateArgs>(args: Subset<T, VolumeAggregateArgs>): Prisma.PrismaPromise<GetVolumeAggregateType<T>>

    /**
     * Group by Volume.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VolumeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VolumeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VolumeGroupByArgs['orderBy'] }
        : { orderBy?: VolumeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VolumeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVolumeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Volume model
   */
  readonly fields: VolumeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Volume.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VolumeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Stock<T extends Volume$StockArgs<ExtArgs> = {}>(args?: Subset<T, Volume$StockArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Volume model
   */ 
  interface VolumeFieldRefs {
    readonly current: FieldRef<"Volume", 'Int'>
    readonly average3Months: FieldRef<"Volume", 'Int'>
    readonly average10Days: FieldRef<"Volume", 'Int'>
    readonly id: FieldRef<"Volume", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Volume findUnique
   */
  export type VolumeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volume
     */
    select?: VolumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Volume
     */
    omit?: VolumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolumeInclude<ExtArgs> | null
    /**
     * Filter, which Volume to fetch.
     */
    where: VolumeWhereUniqueInput
  }

  /**
   * Volume findUniqueOrThrow
   */
  export type VolumeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volume
     */
    select?: VolumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Volume
     */
    omit?: VolumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolumeInclude<ExtArgs> | null
    /**
     * Filter, which Volume to fetch.
     */
    where: VolumeWhereUniqueInput
  }

  /**
   * Volume findFirst
   */
  export type VolumeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volume
     */
    select?: VolumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Volume
     */
    omit?: VolumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolumeInclude<ExtArgs> | null
    /**
     * Filter, which Volume to fetch.
     */
    where?: VolumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Volumes to fetch.
     */
    orderBy?: VolumeOrderByWithRelationInput | VolumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Volumes.
     */
    cursor?: VolumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Volumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Volumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Volumes.
     */
    distinct?: VolumeScalarFieldEnum | VolumeScalarFieldEnum[]
  }

  /**
   * Volume findFirstOrThrow
   */
  export type VolumeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volume
     */
    select?: VolumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Volume
     */
    omit?: VolumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolumeInclude<ExtArgs> | null
    /**
     * Filter, which Volume to fetch.
     */
    where?: VolumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Volumes to fetch.
     */
    orderBy?: VolumeOrderByWithRelationInput | VolumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Volumes.
     */
    cursor?: VolumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Volumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Volumes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Volumes.
     */
    distinct?: VolumeScalarFieldEnum | VolumeScalarFieldEnum[]
  }

  /**
   * Volume findMany
   */
  export type VolumeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volume
     */
    select?: VolumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Volume
     */
    omit?: VolumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolumeInclude<ExtArgs> | null
    /**
     * Filter, which Volumes to fetch.
     */
    where?: VolumeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Volumes to fetch.
     */
    orderBy?: VolumeOrderByWithRelationInput | VolumeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Volumes.
     */
    cursor?: VolumeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Volumes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Volumes.
     */
    skip?: number
    distinct?: VolumeScalarFieldEnum | VolumeScalarFieldEnum[]
  }

  /**
   * Volume create
   */
  export type VolumeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volume
     */
    select?: VolumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Volume
     */
    omit?: VolumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolumeInclude<ExtArgs> | null
    /**
     * The data needed to create a Volume.
     */
    data?: XOR<VolumeCreateInput, VolumeUncheckedCreateInput>
  }

  /**
   * Volume createMany
   */
  export type VolumeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Volumes.
     */
    data: VolumeCreateManyInput | VolumeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Volume createManyAndReturn
   */
  export type VolumeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volume
     */
    select?: VolumeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Volume
     */
    omit?: VolumeOmit<ExtArgs> | null
    /**
     * The data used to create many Volumes.
     */
    data: VolumeCreateManyInput | VolumeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Volume update
   */
  export type VolumeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volume
     */
    select?: VolumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Volume
     */
    omit?: VolumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolumeInclude<ExtArgs> | null
    /**
     * The data needed to update a Volume.
     */
    data: XOR<VolumeUpdateInput, VolumeUncheckedUpdateInput>
    /**
     * Choose, which Volume to update.
     */
    where: VolumeWhereUniqueInput
  }

  /**
   * Volume updateMany
   */
  export type VolumeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Volumes.
     */
    data: XOR<VolumeUpdateManyMutationInput, VolumeUncheckedUpdateManyInput>
    /**
     * Filter which Volumes to update
     */
    where?: VolumeWhereInput
  }

  /**
   * Volume updateManyAndReturn
   */
  export type VolumeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volume
     */
    select?: VolumeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Volume
     */
    omit?: VolumeOmit<ExtArgs> | null
    /**
     * The data used to update Volumes.
     */
    data: XOR<VolumeUpdateManyMutationInput, VolumeUncheckedUpdateManyInput>
    /**
     * Filter which Volumes to update
     */
    where?: VolumeWhereInput
  }

  /**
   * Volume upsert
   */
  export type VolumeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volume
     */
    select?: VolumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Volume
     */
    omit?: VolumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolumeInclude<ExtArgs> | null
    /**
     * The filter to search for the Volume to update in case it exists.
     */
    where: VolumeWhereUniqueInput
    /**
     * In case the Volume found by the `where` argument doesn't exist, create a new Volume with this data.
     */
    create: XOR<VolumeCreateInput, VolumeUncheckedCreateInput>
    /**
     * In case the Volume was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VolumeUpdateInput, VolumeUncheckedUpdateInput>
  }

  /**
   * Volume delete
   */
  export type VolumeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volume
     */
    select?: VolumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Volume
     */
    omit?: VolumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolumeInclude<ExtArgs> | null
    /**
     * Filter which Volume to delete.
     */
    where: VolumeWhereUniqueInput
  }

  /**
   * Volume deleteMany
   */
  export type VolumeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Volumes to delete
     */
    where?: VolumeWhereInput
  }

  /**
   * Volume.Stock
   */
  export type Volume$StockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    where?: StockWhereInput
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    cursor?: StockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Volume without action
   */
  export type VolumeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Volume
     */
    select?: VolumeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Volume
     */
    omit?: VolumeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VolumeInclude<ExtArgs> | null
  }


  /**
   * Model Week52
   */

  export type AggregateWeek52 = {
    _count: Week52CountAggregateOutputType | null
    _avg: Week52AvgAggregateOutputType | null
    _sum: Week52SumAggregateOutputType | null
    _min: Week52MinAggregateOutputType | null
    _max: Week52MaxAggregateOutputType | null
  }

  export type Week52AvgAggregateOutputType = {
    high: number | null
    low: number | null
    changeFromHigh: number | null
    changeFromLow: number | null
    id: number | null
  }

  export type Week52SumAggregateOutputType = {
    high: number | null
    low: number | null
    changeFromHigh: number | null
    changeFromLow: number | null
    id: number | null
  }

  export type Week52MinAggregateOutputType = {
    high: number | null
    low: number | null
    changeFromHigh: number | null
    changeFromLow: number | null
    id: number | null
  }

  export type Week52MaxAggregateOutputType = {
    high: number | null
    low: number | null
    changeFromHigh: number | null
    changeFromLow: number | null
    id: number | null
  }

  export type Week52CountAggregateOutputType = {
    high: number
    low: number
    changeFromHigh: number
    changeFromLow: number
    id: number
    _all: number
  }


  export type Week52AvgAggregateInputType = {
    high?: true
    low?: true
    changeFromHigh?: true
    changeFromLow?: true
    id?: true
  }

  export type Week52SumAggregateInputType = {
    high?: true
    low?: true
    changeFromHigh?: true
    changeFromLow?: true
    id?: true
  }

  export type Week52MinAggregateInputType = {
    high?: true
    low?: true
    changeFromHigh?: true
    changeFromLow?: true
    id?: true
  }

  export type Week52MaxAggregateInputType = {
    high?: true
    low?: true
    changeFromHigh?: true
    changeFromLow?: true
    id?: true
  }

  export type Week52CountAggregateInputType = {
    high?: true
    low?: true
    changeFromHigh?: true
    changeFromLow?: true
    id?: true
    _all?: true
  }

  export type Week52AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Week52 to aggregate.
     */
    where?: Week52WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Week52s to fetch.
     */
    orderBy?: Week52OrderByWithRelationInput | Week52OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Week52WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Week52s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Week52s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Week52s
    **/
    _count?: true | Week52CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Week52AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Week52SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Week52MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Week52MaxAggregateInputType
  }

  export type GetWeek52AggregateType<T extends Week52AggregateArgs> = {
        [P in keyof T & keyof AggregateWeek52]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeek52[P]>
      : GetScalarType<T[P], AggregateWeek52[P]>
  }




  export type Week52GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Week52WhereInput
    orderBy?: Week52OrderByWithAggregationInput | Week52OrderByWithAggregationInput[]
    by: Week52ScalarFieldEnum[] | Week52ScalarFieldEnum
    having?: Week52ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Week52CountAggregateInputType | true
    _avg?: Week52AvgAggregateInputType
    _sum?: Week52SumAggregateInputType
    _min?: Week52MinAggregateInputType
    _max?: Week52MaxAggregateInputType
  }

  export type Week52GroupByOutputType = {
    high: number | null
    low: number | null
    changeFromHigh: number | null
    changeFromLow: number | null
    id: number
    _count: Week52CountAggregateOutputType | null
    _avg: Week52AvgAggregateOutputType | null
    _sum: Week52SumAggregateOutputType | null
    _min: Week52MinAggregateOutputType | null
    _max: Week52MaxAggregateOutputType | null
  }

  type GetWeek52GroupByPayload<T extends Week52GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Week52GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Week52GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Week52GroupByOutputType[P]>
            : GetScalarType<T[P], Week52GroupByOutputType[P]>
        }
      >
    >


  export type Week52Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    high?: boolean
    low?: boolean
    changeFromHigh?: boolean
    changeFromLow?: boolean
    id?: boolean
    Stock?: boolean | Week52$StockArgs<ExtArgs>
    _count?: boolean | Week52CountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["week52"]>

  export type Week52SelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    high?: boolean
    low?: boolean
    changeFromHigh?: boolean
    changeFromLow?: boolean
    id?: boolean
  }, ExtArgs["result"]["week52"]>

  export type Week52SelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    high?: boolean
    low?: boolean
    changeFromHigh?: boolean
    changeFromLow?: boolean
    id?: boolean
  }, ExtArgs["result"]["week52"]>

  export type Week52SelectScalar = {
    high?: boolean
    low?: boolean
    changeFromHigh?: boolean
    changeFromLow?: boolean
    id?: boolean
  }

  export type Week52Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"high" | "low" | "changeFromHigh" | "changeFromLow" | "id", ExtArgs["result"]["week52"]>
  export type Week52Include<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Stock?: boolean | Week52$StockArgs<ExtArgs>
    _count?: boolean | Week52CountOutputTypeDefaultArgs<ExtArgs>
  }
  export type Week52IncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type Week52IncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $Week52Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Week52"
    objects: {
      Stock: Prisma.$StockPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      high: number | null
      low: number | null
      changeFromHigh: number | null
      changeFromLow: number | null
      id: number
    }, ExtArgs["result"]["week52"]>
    composites: {}
  }

  type Week52GetPayload<S extends boolean | null | undefined | Week52DefaultArgs> = $Result.GetResult<Prisma.$Week52Payload, S>

  type Week52CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Week52FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Week52CountAggregateInputType | true
    }

  export interface Week52Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Week52'], meta: { name: 'Week52' } }
    /**
     * Find zero or one Week52 that matches the filter.
     * @param {Week52FindUniqueArgs} args - Arguments to find a Week52
     * @example
     * // Get one Week52
     * const week52 = await prisma.week52.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Week52FindUniqueArgs>(args: SelectSubset<T, Week52FindUniqueArgs<ExtArgs>>): Prisma__Week52Client<$Result.GetResult<Prisma.$Week52Payload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Week52 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Week52FindUniqueOrThrowArgs} args - Arguments to find a Week52
     * @example
     * // Get one Week52
     * const week52 = await prisma.week52.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Week52FindUniqueOrThrowArgs>(args: SelectSubset<T, Week52FindUniqueOrThrowArgs<ExtArgs>>): Prisma__Week52Client<$Result.GetResult<Prisma.$Week52Payload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Week52 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Week52FindFirstArgs} args - Arguments to find a Week52
     * @example
     * // Get one Week52
     * const week52 = await prisma.week52.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Week52FindFirstArgs>(args?: SelectSubset<T, Week52FindFirstArgs<ExtArgs>>): Prisma__Week52Client<$Result.GetResult<Prisma.$Week52Payload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Week52 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Week52FindFirstOrThrowArgs} args - Arguments to find a Week52
     * @example
     * // Get one Week52
     * const week52 = await prisma.week52.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Week52FindFirstOrThrowArgs>(args?: SelectSubset<T, Week52FindFirstOrThrowArgs<ExtArgs>>): Prisma__Week52Client<$Result.GetResult<Prisma.$Week52Payload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Week52s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Week52FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Week52s
     * const week52s = await prisma.week52.findMany()
     * 
     * // Get first 10 Week52s
     * const week52s = await prisma.week52.findMany({ take: 10 })
     * 
     * // Only select the `high`
     * const week52WithHighOnly = await prisma.week52.findMany({ select: { high: true } })
     * 
     */
    findMany<T extends Week52FindManyArgs>(args?: SelectSubset<T, Week52FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Week52Payload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Week52.
     * @param {Week52CreateArgs} args - Arguments to create a Week52.
     * @example
     * // Create one Week52
     * const Week52 = await prisma.week52.create({
     *   data: {
     *     // ... data to create a Week52
     *   }
     * })
     * 
     */
    create<T extends Week52CreateArgs>(args: SelectSubset<T, Week52CreateArgs<ExtArgs>>): Prisma__Week52Client<$Result.GetResult<Prisma.$Week52Payload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Week52s.
     * @param {Week52CreateManyArgs} args - Arguments to create many Week52s.
     * @example
     * // Create many Week52s
     * const week52 = await prisma.week52.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Week52CreateManyArgs>(args?: SelectSubset<T, Week52CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Week52s and returns the data saved in the database.
     * @param {Week52CreateManyAndReturnArgs} args - Arguments to create many Week52s.
     * @example
     * // Create many Week52s
     * const week52 = await prisma.week52.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Week52s and only return the `high`
     * const week52WithHighOnly = await prisma.week52.createManyAndReturn({
     *   select: { high: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Week52CreateManyAndReturnArgs>(args?: SelectSubset<T, Week52CreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Week52Payload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Week52.
     * @param {Week52DeleteArgs} args - Arguments to delete one Week52.
     * @example
     * // Delete one Week52
     * const Week52 = await prisma.week52.delete({
     *   where: {
     *     // ... filter to delete one Week52
     *   }
     * })
     * 
     */
    delete<T extends Week52DeleteArgs>(args: SelectSubset<T, Week52DeleteArgs<ExtArgs>>): Prisma__Week52Client<$Result.GetResult<Prisma.$Week52Payload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Week52.
     * @param {Week52UpdateArgs} args - Arguments to update one Week52.
     * @example
     * // Update one Week52
     * const week52 = await prisma.week52.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Week52UpdateArgs>(args: SelectSubset<T, Week52UpdateArgs<ExtArgs>>): Prisma__Week52Client<$Result.GetResult<Prisma.$Week52Payload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Week52s.
     * @param {Week52DeleteManyArgs} args - Arguments to filter Week52s to delete.
     * @example
     * // Delete a few Week52s
     * const { count } = await prisma.week52.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Week52DeleteManyArgs>(args?: SelectSubset<T, Week52DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Week52s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Week52UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Week52s
     * const week52 = await prisma.week52.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Week52UpdateManyArgs>(args: SelectSubset<T, Week52UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Week52s and returns the data updated in the database.
     * @param {Week52UpdateManyAndReturnArgs} args - Arguments to update many Week52s.
     * @example
     * // Update many Week52s
     * const week52 = await prisma.week52.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Week52s and only return the `high`
     * const week52WithHighOnly = await prisma.week52.updateManyAndReturn({
     *   select: { high: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends Week52UpdateManyAndReturnArgs>(args: SelectSubset<T, Week52UpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Week52Payload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Week52.
     * @param {Week52UpsertArgs} args - Arguments to update or create a Week52.
     * @example
     * // Update or create a Week52
     * const week52 = await prisma.week52.upsert({
     *   create: {
     *     // ... data to create a Week52
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Week52 we want to update
     *   }
     * })
     */
    upsert<T extends Week52UpsertArgs>(args: SelectSubset<T, Week52UpsertArgs<ExtArgs>>): Prisma__Week52Client<$Result.GetResult<Prisma.$Week52Payload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Week52s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Week52CountArgs} args - Arguments to filter Week52s to count.
     * @example
     * // Count the number of Week52s
     * const count = await prisma.week52.count({
     *   where: {
     *     // ... the filter for the Week52s we want to count
     *   }
     * })
    **/
    count<T extends Week52CountArgs>(
      args?: Subset<T, Week52CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Week52CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Week52.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Week52AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Week52AggregateArgs>(args: Subset<T, Week52AggregateArgs>): Prisma.PrismaPromise<GetWeek52AggregateType<T>>

    /**
     * Group by Week52.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Week52GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Week52GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Week52GroupByArgs['orderBy'] }
        : { orderBy?: Week52GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Week52GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeek52GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Week52 model
   */
  readonly fields: Week52FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Week52.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Week52Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Stock<T extends Week52$StockArgs<ExtArgs> = {}>(args?: Subset<T, Week52$StockArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Week52 model
   */ 
  interface Week52FieldRefs {
    readonly high: FieldRef<"Week52", 'Float'>
    readonly low: FieldRef<"Week52", 'Float'>
    readonly changeFromHigh: FieldRef<"Week52", 'Float'>
    readonly changeFromLow: FieldRef<"Week52", 'Float'>
    readonly id: FieldRef<"Week52", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Week52 findUnique
   */
  export type Week52FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week52
     */
    select?: Week52Select<ExtArgs> | null
    /**
     * Omit specific fields from the Week52
     */
    omit?: Week52Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Week52Include<ExtArgs> | null
    /**
     * Filter, which Week52 to fetch.
     */
    where: Week52WhereUniqueInput
  }

  /**
   * Week52 findUniqueOrThrow
   */
  export type Week52FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week52
     */
    select?: Week52Select<ExtArgs> | null
    /**
     * Omit specific fields from the Week52
     */
    omit?: Week52Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Week52Include<ExtArgs> | null
    /**
     * Filter, which Week52 to fetch.
     */
    where: Week52WhereUniqueInput
  }

  /**
   * Week52 findFirst
   */
  export type Week52FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week52
     */
    select?: Week52Select<ExtArgs> | null
    /**
     * Omit specific fields from the Week52
     */
    omit?: Week52Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Week52Include<ExtArgs> | null
    /**
     * Filter, which Week52 to fetch.
     */
    where?: Week52WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Week52s to fetch.
     */
    orderBy?: Week52OrderByWithRelationInput | Week52OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Week52s.
     */
    cursor?: Week52WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Week52s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Week52s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Week52s.
     */
    distinct?: Week52ScalarFieldEnum | Week52ScalarFieldEnum[]
  }

  /**
   * Week52 findFirstOrThrow
   */
  export type Week52FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week52
     */
    select?: Week52Select<ExtArgs> | null
    /**
     * Omit specific fields from the Week52
     */
    omit?: Week52Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Week52Include<ExtArgs> | null
    /**
     * Filter, which Week52 to fetch.
     */
    where?: Week52WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Week52s to fetch.
     */
    orderBy?: Week52OrderByWithRelationInput | Week52OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Week52s.
     */
    cursor?: Week52WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Week52s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Week52s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Week52s.
     */
    distinct?: Week52ScalarFieldEnum | Week52ScalarFieldEnum[]
  }

  /**
   * Week52 findMany
   */
  export type Week52FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week52
     */
    select?: Week52Select<ExtArgs> | null
    /**
     * Omit specific fields from the Week52
     */
    omit?: Week52Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Week52Include<ExtArgs> | null
    /**
     * Filter, which Week52s to fetch.
     */
    where?: Week52WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Week52s to fetch.
     */
    orderBy?: Week52OrderByWithRelationInput | Week52OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Week52s.
     */
    cursor?: Week52WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Week52s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Week52s.
     */
    skip?: number
    distinct?: Week52ScalarFieldEnum | Week52ScalarFieldEnum[]
  }

  /**
   * Week52 create
   */
  export type Week52CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week52
     */
    select?: Week52Select<ExtArgs> | null
    /**
     * Omit specific fields from the Week52
     */
    omit?: Week52Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Week52Include<ExtArgs> | null
    /**
     * The data needed to create a Week52.
     */
    data?: XOR<Week52CreateInput, Week52UncheckedCreateInput>
  }

  /**
   * Week52 createMany
   */
  export type Week52CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Week52s.
     */
    data: Week52CreateManyInput | Week52CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Week52 createManyAndReturn
   */
  export type Week52CreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week52
     */
    select?: Week52SelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Week52
     */
    omit?: Week52Omit<ExtArgs> | null
    /**
     * The data used to create many Week52s.
     */
    data: Week52CreateManyInput | Week52CreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Week52 update
   */
  export type Week52UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week52
     */
    select?: Week52Select<ExtArgs> | null
    /**
     * Omit specific fields from the Week52
     */
    omit?: Week52Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Week52Include<ExtArgs> | null
    /**
     * The data needed to update a Week52.
     */
    data: XOR<Week52UpdateInput, Week52UncheckedUpdateInput>
    /**
     * Choose, which Week52 to update.
     */
    where: Week52WhereUniqueInput
  }

  /**
   * Week52 updateMany
   */
  export type Week52UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Week52s.
     */
    data: XOR<Week52UpdateManyMutationInput, Week52UncheckedUpdateManyInput>
    /**
     * Filter which Week52s to update
     */
    where?: Week52WhereInput
  }

  /**
   * Week52 updateManyAndReturn
   */
  export type Week52UpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week52
     */
    select?: Week52SelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Week52
     */
    omit?: Week52Omit<ExtArgs> | null
    /**
     * The data used to update Week52s.
     */
    data: XOR<Week52UpdateManyMutationInput, Week52UncheckedUpdateManyInput>
    /**
     * Filter which Week52s to update
     */
    where?: Week52WhereInput
  }

  /**
   * Week52 upsert
   */
  export type Week52UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week52
     */
    select?: Week52Select<ExtArgs> | null
    /**
     * Omit specific fields from the Week52
     */
    omit?: Week52Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Week52Include<ExtArgs> | null
    /**
     * The filter to search for the Week52 to update in case it exists.
     */
    where: Week52WhereUniqueInput
    /**
     * In case the Week52 found by the `where` argument doesn't exist, create a new Week52 with this data.
     */
    create: XOR<Week52CreateInput, Week52UncheckedCreateInput>
    /**
     * In case the Week52 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Week52UpdateInput, Week52UncheckedUpdateInput>
  }

  /**
   * Week52 delete
   */
  export type Week52DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week52
     */
    select?: Week52Select<ExtArgs> | null
    /**
     * Omit specific fields from the Week52
     */
    omit?: Week52Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Week52Include<ExtArgs> | null
    /**
     * Filter which Week52 to delete.
     */
    where: Week52WhereUniqueInput
  }

  /**
   * Week52 deleteMany
   */
  export type Week52DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Week52s to delete
     */
    where?: Week52WhereInput
  }

  /**
   * Week52.Stock
   */
  export type Week52$StockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    where?: StockWhereInput
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    cursor?: StockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Week52 without action
   */
  export type Week52DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Week52
     */
    select?: Week52Select<ExtArgs> | null
    /**
     * Omit specific fields from the Week52
     */
    omit?: Week52Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Week52Include<ExtArgs> | null
  }


  /**
   * Model Dividend
   */

  export type AggregateDividend = {
    _count: DividendCountAggregateOutputType | null
    _avg: DividendAvgAggregateOutputType | null
    _sum: DividendSumAggregateOutputType | null
    _min: DividendMinAggregateOutputType | null
    _max: DividendMaxAggregateOutputType | null
  }

  export type DividendAvgAggregateOutputType = {
    rate: number | null
    yield: number | null
    id: number | null
  }

  export type DividendSumAggregateOutputType = {
    rate: number | null
    yield: number | null
    id: number | null
  }

  export type DividendMinAggregateOutputType = {
    rate: number | null
    yield: number | null
    date: Date | null
    id: number | null
  }

  export type DividendMaxAggregateOutputType = {
    rate: number | null
    yield: number | null
    date: Date | null
    id: number | null
  }

  export type DividendCountAggregateOutputType = {
    rate: number
    yield: number
    date: number
    id: number
    _all: number
  }


  export type DividendAvgAggregateInputType = {
    rate?: true
    yield?: true
    id?: true
  }

  export type DividendSumAggregateInputType = {
    rate?: true
    yield?: true
    id?: true
  }

  export type DividendMinAggregateInputType = {
    rate?: true
    yield?: true
    date?: true
    id?: true
  }

  export type DividendMaxAggregateInputType = {
    rate?: true
    yield?: true
    date?: true
    id?: true
  }

  export type DividendCountAggregateInputType = {
    rate?: true
    yield?: true
    date?: true
    id?: true
    _all?: true
  }

  export type DividendAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dividend to aggregate.
     */
    where?: DividendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dividends to fetch.
     */
    orderBy?: DividendOrderByWithRelationInput | DividendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DividendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dividends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dividends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Dividends
    **/
    _count?: true | DividendCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DividendAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DividendSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DividendMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DividendMaxAggregateInputType
  }

  export type GetDividendAggregateType<T extends DividendAggregateArgs> = {
        [P in keyof T & keyof AggregateDividend]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDividend[P]>
      : GetScalarType<T[P], AggregateDividend[P]>
  }




  export type DividendGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DividendWhereInput
    orderBy?: DividendOrderByWithAggregationInput | DividendOrderByWithAggregationInput[]
    by: DividendScalarFieldEnum[] | DividendScalarFieldEnum
    having?: DividendScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DividendCountAggregateInputType | true
    _avg?: DividendAvgAggregateInputType
    _sum?: DividendSumAggregateInputType
    _min?: DividendMinAggregateInputType
    _max?: DividendMaxAggregateInputType
  }

  export type DividendGroupByOutputType = {
    rate: number | null
    yield: number | null
    date: Date | null
    id: number
    _count: DividendCountAggregateOutputType | null
    _avg: DividendAvgAggregateOutputType | null
    _sum: DividendSumAggregateOutputType | null
    _min: DividendMinAggregateOutputType | null
    _max: DividendMaxAggregateOutputType | null
  }

  type GetDividendGroupByPayload<T extends DividendGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DividendGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DividendGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DividendGroupByOutputType[P]>
            : GetScalarType<T[P], DividendGroupByOutputType[P]>
        }
      >
    >


  export type DividendSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    rate?: boolean
    yield?: boolean
    date?: boolean
    id?: boolean
    Stock?: boolean | Dividend$StockArgs<ExtArgs>
    _count?: boolean | DividendCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dividend"]>

  export type DividendSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    rate?: boolean
    yield?: boolean
    date?: boolean
    id?: boolean
  }, ExtArgs["result"]["dividend"]>

  export type DividendSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    rate?: boolean
    yield?: boolean
    date?: boolean
    id?: boolean
  }, ExtArgs["result"]["dividend"]>

  export type DividendSelectScalar = {
    rate?: boolean
    yield?: boolean
    date?: boolean
    id?: boolean
  }

  export type DividendOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"rate" | "yield" | "date" | "id", ExtArgs["result"]["dividend"]>
  export type DividendInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Stock?: boolean | Dividend$StockArgs<ExtArgs>
    _count?: boolean | DividendCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DividendIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DividendIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DividendPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Dividend"
    objects: {
      Stock: Prisma.$StockPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      rate: number | null
      yield: number | null
      date: Date | null
      id: number
    }, ExtArgs["result"]["dividend"]>
    composites: {}
  }

  type DividendGetPayload<S extends boolean | null | undefined | DividendDefaultArgs> = $Result.GetResult<Prisma.$DividendPayload, S>

  type DividendCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DividendFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DividendCountAggregateInputType | true
    }

  export interface DividendDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Dividend'], meta: { name: 'Dividend' } }
    /**
     * Find zero or one Dividend that matches the filter.
     * @param {DividendFindUniqueArgs} args - Arguments to find a Dividend
     * @example
     * // Get one Dividend
     * const dividend = await prisma.dividend.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DividendFindUniqueArgs>(args: SelectSubset<T, DividendFindUniqueArgs<ExtArgs>>): Prisma__DividendClient<$Result.GetResult<Prisma.$DividendPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Dividend that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DividendFindUniqueOrThrowArgs} args - Arguments to find a Dividend
     * @example
     * // Get one Dividend
     * const dividend = await prisma.dividend.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DividendFindUniqueOrThrowArgs>(args: SelectSubset<T, DividendFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DividendClient<$Result.GetResult<Prisma.$DividendPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Dividend that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DividendFindFirstArgs} args - Arguments to find a Dividend
     * @example
     * // Get one Dividend
     * const dividend = await prisma.dividend.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DividendFindFirstArgs>(args?: SelectSubset<T, DividendFindFirstArgs<ExtArgs>>): Prisma__DividendClient<$Result.GetResult<Prisma.$DividendPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Dividend that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DividendFindFirstOrThrowArgs} args - Arguments to find a Dividend
     * @example
     * // Get one Dividend
     * const dividend = await prisma.dividend.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DividendFindFirstOrThrowArgs>(args?: SelectSubset<T, DividendFindFirstOrThrowArgs<ExtArgs>>): Prisma__DividendClient<$Result.GetResult<Prisma.$DividendPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Dividends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DividendFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Dividends
     * const dividends = await prisma.dividend.findMany()
     * 
     * // Get first 10 Dividends
     * const dividends = await prisma.dividend.findMany({ take: 10 })
     * 
     * // Only select the `rate`
     * const dividendWithRateOnly = await prisma.dividend.findMany({ select: { rate: true } })
     * 
     */
    findMany<T extends DividendFindManyArgs>(args?: SelectSubset<T, DividendFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DividendPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Dividend.
     * @param {DividendCreateArgs} args - Arguments to create a Dividend.
     * @example
     * // Create one Dividend
     * const Dividend = await prisma.dividend.create({
     *   data: {
     *     // ... data to create a Dividend
     *   }
     * })
     * 
     */
    create<T extends DividendCreateArgs>(args: SelectSubset<T, DividendCreateArgs<ExtArgs>>): Prisma__DividendClient<$Result.GetResult<Prisma.$DividendPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Dividends.
     * @param {DividendCreateManyArgs} args - Arguments to create many Dividends.
     * @example
     * // Create many Dividends
     * const dividend = await prisma.dividend.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DividendCreateManyArgs>(args?: SelectSubset<T, DividendCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Dividends and returns the data saved in the database.
     * @param {DividendCreateManyAndReturnArgs} args - Arguments to create many Dividends.
     * @example
     * // Create many Dividends
     * const dividend = await prisma.dividend.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Dividends and only return the `rate`
     * const dividendWithRateOnly = await prisma.dividend.createManyAndReturn({
     *   select: { rate: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DividendCreateManyAndReturnArgs>(args?: SelectSubset<T, DividendCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DividendPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Dividend.
     * @param {DividendDeleteArgs} args - Arguments to delete one Dividend.
     * @example
     * // Delete one Dividend
     * const Dividend = await prisma.dividend.delete({
     *   where: {
     *     // ... filter to delete one Dividend
     *   }
     * })
     * 
     */
    delete<T extends DividendDeleteArgs>(args: SelectSubset<T, DividendDeleteArgs<ExtArgs>>): Prisma__DividendClient<$Result.GetResult<Prisma.$DividendPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Dividend.
     * @param {DividendUpdateArgs} args - Arguments to update one Dividend.
     * @example
     * // Update one Dividend
     * const dividend = await prisma.dividend.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DividendUpdateArgs>(args: SelectSubset<T, DividendUpdateArgs<ExtArgs>>): Prisma__DividendClient<$Result.GetResult<Prisma.$DividendPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Dividends.
     * @param {DividendDeleteManyArgs} args - Arguments to filter Dividends to delete.
     * @example
     * // Delete a few Dividends
     * const { count } = await prisma.dividend.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DividendDeleteManyArgs>(args?: SelectSubset<T, DividendDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dividends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DividendUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Dividends
     * const dividend = await prisma.dividend.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DividendUpdateManyArgs>(args: SelectSubset<T, DividendUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Dividends and returns the data updated in the database.
     * @param {DividendUpdateManyAndReturnArgs} args - Arguments to update many Dividends.
     * @example
     * // Update many Dividends
     * const dividend = await prisma.dividend.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Dividends and only return the `rate`
     * const dividendWithRateOnly = await prisma.dividend.updateManyAndReturn({
     *   select: { rate: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DividendUpdateManyAndReturnArgs>(args: SelectSubset<T, DividendUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DividendPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Dividend.
     * @param {DividendUpsertArgs} args - Arguments to update or create a Dividend.
     * @example
     * // Update or create a Dividend
     * const dividend = await prisma.dividend.upsert({
     *   create: {
     *     // ... data to create a Dividend
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Dividend we want to update
     *   }
     * })
     */
    upsert<T extends DividendUpsertArgs>(args: SelectSubset<T, DividendUpsertArgs<ExtArgs>>): Prisma__DividendClient<$Result.GetResult<Prisma.$DividendPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Dividends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DividendCountArgs} args - Arguments to filter Dividends to count.
     * @example
     * // Count the number of Dividends
     * const count = await prisma.dividend.count({
     *   where: {
     *     // ... the filter for the Dividends we want to count
     *   }
     * })
    **/
    count<T extends DividendCountArgs>(
      args?: Subset<T, DividendCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DividendCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Dividend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DividendAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DividendAggregateArgs>(args: Subset<T, DividendAggregateArgs>): Prisma.PrismaPromise<GetDividendAggregateType<T>>

    /**
     * Group by Dividend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DividendGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DividendGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DividendGroupByArgs['orderBy'] }
        : { orderBy?: DividendGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DividendGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDividendGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Dividend model
   */
  readonly fields: DividendFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Dividend.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DividendClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Stock<T extends Dividend$StockArgs<ExtArgs> = {}>(args?: Subset<T, Dividend$StockArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Dividend model
   */ 
  interface DividendFieldRefs {
    readonly rate: FieldRef<"Dividend", 'Float'>
    readonly yield: FieldRef<"Dividend", 'Float'>
    readonly date: FieldRef<"Dividend", 'DateTime'>
    readonly id: FieldRef<"Dividend", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Dividend findUnique
   */
  export type DividendFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dividend
     */
    select?: DividendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dividend
     */
    omit?: DividendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DividendInclude<ExtArgs> | null
    /**
     * Filter, which Dividend to fetch.
     */
    where: DividendWhereUniqueInput
  }

  /**
   * Dividend findUniqueOrThrow
   */
  export type DividendFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dividend
     */
    select?: DividendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dividend
     */
    omit?: DividendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DividendInclude<ExtArgs> | null
    /**
     * Filter, which Dividend to fetch.
     */
    where: DividendWhereUniqueInput
  }

  /**
   * Dividend findFirst
   */
  export type DividendFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dividend
     */
    select?: DividendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dividend
     */
    omit?: DividendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DividendInclude<ExtArgs> | null
    /**
     * Filter, which Dividend to fetch.
     */
    where?: DividendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dividends to fetch.
     */
    orderBy?: DividendOrderByWithRelationInput | DividendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dividends.
     */
    cursor?: DividendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dividends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dividends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dividends.
     */
    distinct?: DividendScalarFieldEnum | DividendScalarFieldEnum[]
  }

  /**
   * Dividend findFirstOrThrow
   */
  export type DividendFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dividend
     */
    select?: DividendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dividend
     */
    omit?: DividendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DividendInclude<ExtArgs> | null
    /**
     * Filter, which Dividend to fetch.
     */
    where?: DividendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dividends to fetch.
     */
    orderBy?: DividendOrderByWithRelationInput | DividendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Dividends.
     */
    cursor?: DividendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dividends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dividends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Dividends.
     */
    distinct?: DividendScalarFieldEnum | DividendScalarFieldEnum[]
  }

  /**
   * Dividend findMany
   */
  export type DividendFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dividend
     */
    select?: DividendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dividend
     */
    omit?: DividendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DividendInclude<ExtArgs> | null
    /**
     * Filter, which Dividends to fetch.
     */
    where?: DividendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Dividends to fetch.
     */
    orderBy?: DividendOrderByWithRelationInput | DividendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Dividends.
     */
    cursor?: DividendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Dividends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Dividends.
     */
    skip?: number
    distinct?: DividendScalarFieldEnum | DividendScalarFieldEnum[]
  }

  /**
   * Dividend create
   */
  export type DividendCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dividend
     */
    select?: DividendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dividend
     */
    omit?: DividendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DividendInclude<ExtArgs> | null
    /**
     * The data needed to create a Dividend.
     */
    data?: XOR<DividendCreateInput, DividendUncheckedCreateInput>
  }

  /**
   * Dividend createMany
   */
  export type DividendCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Dividends.
     */
    data: DividendCreateManyInput | DividendCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Dividend createManyAndReturn
   */
  export type DividendCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dividend
     */
    select?: DividendSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Dividend
     */
    omit?: DividendOmit<ExtArgs> | null
    /**
     * The data used to create many Dividends.
     */
    data: DividendCreateManyInput | DividendCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Dividend update
   */
  export type DividendUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dividend
     */
    select?: DividendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dividend
     */
    omit?: DividendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DividendInclude<ExtArgs> | null
    /**
     * The data needed to update a Dividend.
     */
    data: XOR<DividendUpdateInput, DividendUncheckedUpdateInput>
    /**
     * Choose, which Dividend to update.
     */
    where: DividendWhereUniqueInput
  }

  /**
   * Dividend updateMany
   */
  export type DividendUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Dividends.
     */
    data: XOR<DividendUpdateManyMutationInput, DividendUncheckedUpdateManyInput>
    /**
     * Filter which Dividends to update
     */
    where?: DividendWhereInput
  }

  /**
   * Dividend updateManyAndReturn
   */
  export type DividendUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dividend
     */
    select?: DividendSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Dividend
     */
    omit?: DividendOmit<ExtArgs> | null
    /**
     * The data used to update Dividends.
     */
    data: XOR<DividendUpdateManyMutationInput, DividendUncheckedUpdateManyInput>
    /**
     * Filter which Dividends to update
     */
    where?: DividendWhereInput
  }

  /**
   * Dividend upsert
   */
  export type DividendUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dividend
     */
    select?: DividendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dividend
     */
    omit?: DividendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DividendInclude<ExtArgs> | null
    /**
     * The filter to search for the Dividend to update in case it exists.
     */
    where: DividendWhereUniqueInput
    /**
     * In case the Dividend found by the `where` argument doesn't exist, create a new Dividend with this data.
     */
    create: XOR<DividendCreateInput, DividendUncheckedCreateInput>
    /**
     * In case the Dividend was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DividendUpdateInput, DividendUncheckedUpdateInput>
  }

  /**
   * Dividend delete
   */
  export type DividendDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dividend
     */
    select?: DividendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dividend
     */
    omit?: DividendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DividendInclude<ExtArgs> | null
    /**
     * Filter which Dividend to delete.
     */
    where: DividendWhereUniqueInput
  }

  /**
   * Dividend deleteMany
   */
  export type DividendDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Dividends to delete
     */
    where?: DividendWhereInput
  }

  /**
   * Dividend.Stock
   */
  export type Dividend$StockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    where?: StockWhereInput
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    cursor?: StockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Dividend without action
   */
  export type DividendDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Dividend
     */
    select?: DividendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Dividend
     */
    omit?: DividendOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DividendInclude<ExtArgs> | null
  }


  /**
   * Model Earnings
   */

  export type AggregateEarnings = {
    _count: EarningsCountAggregateOutputType | null
    _avg: EarningsAvgAggregateOutputType | null
    _sum: EarningsSumAggregateOutputType | null
    _min: EarningsMinAggregateOutputType | null
    _max: EarningsMaxAggregateOutputType | null
  }

  export type EarningsAvgAggregateOutputType = {
    epsTrailing12Months: number | null
    epsForward: number | null
    peRatio: number | null
    id: number | null
  }

  export type EarningsSumAggregateOutputType = {
    epsTrailing12Months: number | null
    epsForward: number | null
    peRatio: number | null
    id: number | null
  }

  export type EarningsMinAggregateOutputType = {
    nextDate: Date | null
    epsTrailing12Months: number | null
    epsForward: number | null
    peRatio: number | null
    id: number | null
  }

  export type EarningsMaxAggregateOutputType = {
    nextDate: Date | null
    epsTrailing12Months: number | null
    epsForward: number | null
    peRatio: number | null
    id: number | null
  }

  export type EarningsCountAggregateOutputType = {
    nextDate: number
    epsTrailing12Months: number
    epsForward: number
    peRatio: number
    id: number
    _all: number
  }


  export type EarningsAvgAggregateInputType = {
    epsTrailing12Months?: true
    epsForward?: true
    peRatio?: true
    id?: true
  }

  export type EarningsSumAggregateInputType = {
    epsTrailing12Months?: true
    epsForward?: true
    peRatio?: true
    id?: true
  }

  export type EarningsMinAggregateInputType = {
    nextDate?: true
    epsTrailing12Months?: true
    epsForward?: true
    peRatio?: true
    id?: true
  }

  export type EarningsMaxAggregateInputType = {
    nextDate?: true
    epsTrailing12Months?: true
    epsForward?: true
    peRatio?: true
    id?: true
  }

  export type EarningsCountAggregateInputType = {
    nextDate?: true
    epsTrailing12Months?: true
    epsForward?: true
    peRatio?: true
    id?: true
    _all?: true
  }

  export type EarningsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Earnings to aggregate.
     */
    where?: EarningsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Earnings to fetch.
     */
    orderBy?: EarningsOrderByWithRelationInput | EarningsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EarningsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Earnings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Earnings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Earnings
    **/
    _count?: true | EarningsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EarningsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EarningsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EarningsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EarningsMaxAggregateInputType
  }

  export type GetEarningsAggregateType<T extends EarningsAggregateArgs> = {
        [P in keyof T & keyof AggregateEarnings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEarnings[P]>
      : GetScalarType<T[P], AggregateEarnings[P]>
  }




  export type EarningsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EarningsWhereInput
    orderBy?: EarningsOrderByWithAggregationInput | EarningsOrderByWithAggregationInput[]
    by: EarningsScalarFieldEnum[] | EarningsScalarFieldEnum
    having?: EarningsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EarningsCountAggregateInputType | true
    _avg?: EarningsAvgAggregateInputType
    _sum?: EarningsSumAggregateInputType
    _min?: EarningsMinAggregateInputType
    _max?: EarningsMaxAggregateInputType
  }

  export type EarningsGroupByOutputType = {
    nextDate: Date | null
    epsTrailing12Months: number | null
    epsForward: number | null
    peRatio: number | null
    id: number
    _count: EarningsCountAggregateOutputType | null
    _avg: EarningsAvgAggregateOutputType | null
    _sum: EarningsSumAggregateOutputType | null
    _min: EarningsMinAggregateOutputType | null
    _max: EarningsMaxAggregateOutputType | null
  }

  type GetEarningsGroupByPayload<T extends EarningsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EarningsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EarningsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EarningsGroupByOutputType[P]>
            : GetScalarType<T[P], EarningsGroupByOutputType[P]>
        }
      >
    >


  export type EarningsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    nextDate?: boolean
    epsTrailing12Months?: boolean
    epsForward?: boolean
    peRatio?: boolean
    id?: boolean
    Stock?: boolean | Earnings$StockArgs<ExtArgs>
    _count?: boolean | EarningsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["earnings"]>

  export type EarningsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    nextDate?: boolean
    epsTrailing12Months?: boolean
    epsForward?: boolean
    peRatio?: boolean
    id?: boolean
  }, ExtArgs["result"]["earnings"]>

  export type EarningsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    nextDate?: boolean
    epsTrailing12Months?: boolean
    epsForward?: boolean
    peRatio?: boolean
    id?: boolean
  }, ExtArgs["result"]["earnings"]>

  export type EarningsSelectScalar = {
    nextDate?: boolean
    epsTrailing12Months?: boolean
    epsForward?: boolean
    peRatio?: boolean
    id?: boolean
  }

  export type EarningsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"nextDate" | "epsTrailing12Months" | "epsForward" | "peRatio" | "id", ExtArgs["result"]["earnings"]>
  export type EarningsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Stock?: boolean | Earnings$StockArgs<ExtArgs>
    _count?: boolean | EarningsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EarningsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EarningsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EarningsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Earnings"
    objects: {
      Stock: Prisma.$StockPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      nextDate: Date | null
      epsTrailing12Months: number | null
      epsForward: number | null
      peRatio: number | null
      id: number
    }, ExtArgs["result"]["earnings"]>
    composites: {}
  }

  type EarningsGetPayload<S extends boolean | null | undefined | EarningsDefaultArgs> = $Result.GetResult<Prisma.$EarningsPayload, S>

  type EarningsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EarningsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EarningsCountAggregateInputType | true
    }

  export interface EarningsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Earnings'], meta: { name: 'Earnings' } }
    /**
     * Find zero or one Earnings that matches the filter.
     * @param {EarningsFindUniqueArgs} args - Arguments to find a Earnings
     * @example
     * // Get one Earnings
     * const earnings = await prisma.earnings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EarningsFindUniqueArgs>(args: SelectSubset<T, EarningsFindUniqueArgs<ExtArgs>>): Prisma__EarningsClient<$Result.GetResult<Prisma.$EarningsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Earnings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EarningsFindUniqueOrThrowArgs} args - Arguments to find a Earnings
     * @example
     * // Get one Earnings
     * const earnings = await prisma.earnings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EarningsFindUniqueOrThrowArgs>(args: SelectSubset<T, EarningsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EarningsClient<$Result.GetResult<Prisma.$EarningsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Earnings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EarningsFindFirstArgs} args - Arguments to find a Earnings
     * @example
     * // Get one Earnings
     * const earnings = await prisma.earnings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EarningsFindFirstArgs>(args?: SelectSubset<T, EarningsFindFirstArgs<ExtArgs>>): Prisma__EarningsClient<$Result.GetResult<Prisma.$EarningsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Earnings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EarningsFindFirstOrThrowArgs} args - Arguments to find a Earnings
     * @example
     * // Get one Earnings
     * const earnings = await prisma.earnings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EarningsFindFirstOrThrowArgs>(args?: SelectSubset<T, EarningsFindFirstOrThrowArgs<ExtArgs>>): Prisma__EarningsClient<$Result.GetResult<Prisma.$EarningsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Earnings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EarningsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Earnings
     * const earnings = await prisma.earnings.findMany()
     * 
     * // Get first 10 Earnings
     * const earnings = await prisma.earnings.findMany({ take: 10 })
     * 
     * // Only select the `nextDate`
     * const earningsWithNextDateOnly = await prisma.earnings.findMany({ select: { nextDate: true } })
     * 
     */
    findMany<T extends EarningsFindManyArgs>(args?: SelectSubset<T, EarningsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EarningsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Earnings.
     * @param {EarningsCreateArgs} args - Arguments to create a Earnings.
     * @example
     * // Create one Earnings
     * const Earnings = await prisma.earnings.create({
     *   data: {
     *     // ... data to create a Earnings
     *   }
     * })
     * 
     */
    create<T extends EarningsCreateArgs>(args: SelectSubset<T, EarningsCreateArgs<ExtArgs>>): Prisma__EarningsClient<$Result.GetResult<Prisma.$EarningsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Earnings.
     * @param {EarningsCreateManyArgs} args - Arguments to create many Earnings.
     * @example
     * // Create many Earnings
     * const earnings = await prisma.earnings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EarningsCreateManyArgs>(args?: SelectSubset<T, EarningsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Earnings and returns the data saved in the database.
     * @param {EarningsCreateManyAndReturnArgs} args - Arguments to create many Earnings.
     * @example
     * // Create many Earnings
     * const earnings = await prisma.earnings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Earnings and only return the `nextDate`
     * const earningsWithNextDateOnly = await prisma.earnings.createManyAndReturn({
     *   select: { nextDate: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EarningsCreateManyAndReturnArgs>(args?: SelectSubset<T, EarningsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EarningsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Earnings.
     * @param {EarningsDeleteArgs} args - Arguments to delete one Earnings.
     * @example
     * // Delete one Earnings
     * const Earnings = await prisma.earnings.delete({
     *   where: {
     *     // ... filter to delete one Earnings
     *   }
     * })
     * 
     */
    delete<T extends EarningsDeleteArgs>(args: SelectSubset<T, EarningsDeleteArgs<ExtArgs>>): Prisma__EarningsClient<$Result.GetResult<Prisma.$EarningsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Earnings.
     * @param {EarningsUpdateArgs} args - Arguments to update one Earnings.
     * @example
     * // Update one Earnings
     * const earnings = await prisma.earnings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EarningsUpdateArgs>(args: SelectSubset<T, EarningsUpdateArgs<ExtArgs>>): Prisma__EarningsClient<$Result.GetResult<Prisma.$EarningsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Earnings.
     * @param {EarningsDeleteManyArgs} args - Arguments to filter Earnings to delete.
     * @example
     * // Delete a few Earnings
     * const { count } = await prisma.earnings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EarningsDeleteManyArgs>(args?: SelectSubset<T, EarningsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Earnings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EarningsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Earnings
     * const earnings = await prisma.earnings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EarningsUpdateManyArgs>(args: SelectSubset<T, EarningsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Earnings and returns the data updated in the database.
     * @param {EarningsUpdateManyAndReturnArgs} args - Arguments to update many Earnings.
     * @example
     * // Update many Earnings
     * const earnings = await prisma.earnings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Earnings and only return the `nextDate`
     * const earningsWithNextDateOnly = await prisma.earnings.updateManyAndReturn({
     *   select: { nextDate: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EarningsUpdateManyAndReturnArgs>(args: SelectSubset<T, EarningsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EarningsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Earnings.
     * @param {EarningsUpsertArgs} args - Arguments to update or create a Earnings.
     * @example
     * // Update or create a Earnings
     * const earnings = await prisma.earnings.upsert({
     *   create: {
     *     // ... data to create a Earnings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Earnings we want to update
     *   }
     * })
     */
    upsert<T extends EarningsUpsertArgs>(args: SelectSubset<T, EarningsUpsertArgs<ExtArgs>>): Prisma__EarningsClient<$Result.GetResult<Prisma.$EarningsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Earnings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EarningsCountArgs} args - Arguments to filter Earnings to count.
     * @example
     * // Count the number of Earnings
     * const count = await prisma.earnings.count({
     *   where: {
     *     // ... the filter for the Earnings we want to count
     *   }
     * })
    **/
    count<T extends EarningsCountArgs>(
      args?: Subset<T, EarningsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EarningsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Earnings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EarningsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EarningsAggregateArgs>(args: Subset<T, EarningsAggregateArgs>): Prisma.PrismaPromise<GetEarningsAggregateType<T>>

    /**
     * Group by Earnings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EarningsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EarningsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EarningsGroupByArgs['orderBy'] }
        : { orderBy?: EarningsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EarningsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEarningsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Earnings model
   */
  readonly fields: EarningsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Earnings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EarningsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Stock<T extends Earnings$StockArgs<ExtArgs> = {}>(args?: Subset<T, Earnings$StockArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Earnings model
   */ 
  interface EarningsFieldRefs {
    readonly nextDate: FieldRef<"Earnings", 'DateTime'>
    readonly epsTrailing12Months: FieldRef<"Earnings", 'Float'>
    readonly epsForward: FieldRef<"Earnings", 'Float'>
    readonly peRatio: FieldRef<"Earnings", 'Float'>
    readonly id: FieldRef<"Earnings", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Earnings findUnique
   */
  export type EarningsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Earnings
     */
    select?: EarningsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Earnings
     */
    omit?: EarningsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EarningsInclude<ExtArgs> | null
    /**
     * Filter, which Earnings to fetch.
     */
    where: EarningsWhereUniqueInput
  }

  /**
   * Earnings findUniqueOrThrow
   */
  export type EarningsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Earnings
     */
    select?: EarningsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Earnings
     */
    omit?: EarningsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EarningsInclude<ExtArgs> | null
    /**
     * Filter, which Earnings to fetch.
     */
    where: EarningsWhereUniqueInput
  }

  /**
   * Earnings findFirst
   */
  export type EarningsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Earnings
     */
    select?: EarningsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Earnings
     */
    omit?: EarningsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EarningsInclude<ExtArgs> | null
    /**
     * Filter, which Earnings to fetch.
     */
    where?: EarningsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Earnings to fetch.
     */
    orderBy?: EarningsOrderByWithRelationInput | EarningsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Earnings.
     */
    cursor?: EarningsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Earnings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Earnings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Earnings.
     */
    distinct?: EarningsScalarFieldEnum | EarningsScalarFieldEnum[]
  }

  /**
   * Earnings findFirstOrThrow
   */
  export type EarningsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Earnings
     */
    select?: EarningsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Earnings
     */
    omit?: EarningsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EarningsInclude<ExtArgs> | null
    /**
     * Filter, which Earnings to fetch.
     */
    where?: EarningsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Earnings to fetch.
     */
    orderBy?: EarningsOrderByWithRelationInput | EarningsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Earnings.
     */
    cursor?: EarningsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Earnings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Earnings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Earnings.
     */
    distinct?: EarningsScalarFieldEnum | EarningsScalarFieldEnum[]
  }

  /**
   * Earnings findMany
   */
  export type EarningsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Earnings
     */
    select?: EarningsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Earnings
     */
    omit?: EarningsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EarningsInclude<ExtArgs> | null
    /**
     * Filter, which Earnings to fetch.
     */
    where?: EarningsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Earnings to fetch.
     */
    orderBy?: EarningsOrderByWithRelationInput | EarningsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Earnings.
     */
    cursor?: EarningsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Earnings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Earnings.
     */
    skip?: number
    distinct?: EarningsScalarFieldEnum | EarningsScalarFieldEnum[]
  }

  /**
   * Earnings create
   */
  export type EarningsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Earnings
     */
    select?: EarningsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Earnings
     */
    omit?: EarningsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EarningsInclude<ExtArgs> | null
    /**
     * The data needed to create a Earnings.
     */
    data?: XOR<EarningsCreateInput, EarningsUncheckedCreateInput>
  }

  /**
   * Earnings createMany
   */
  export type EarningsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Earnings.
     */
    data: EarningsCreateManyInput | EarningsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Earnings createManyAndReturn
   */
  export type EarningsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Earnings
     */
    select?: EarningsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Earnings
     */
    omit?: EarningsOmit<ExtArgs> | null
    /**
     * The data used to create many Earnings.
     */
    data: EarningsCreateManyInput | EarningsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Earnings update
   */
  export type EarningsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Earnings
     */
    select?: EarningsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Earnings
     */
    omit?: EarningsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EarningsInclude<ExtArgs> | null
    /**
     * The data needed to update a Earnings.
     */
    data: XOR<EarningsUpdateInput, EarningsUncheckedUpdateInput>
    /**
     * Choose, which Earnings to update.
     */
    where: EarningsWhereUniqueInput
  }

  /**
   * Earnings updateMany
   */
  export type EarningsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Earnings.
     */
    data: XOR<EarningsUpdateManyMutationInput, EarningsUncheckedUpdateManyInput>
    /**
     * Filter which Earnings to update
     */
    where?: EarningsWhereInput
  }

  /**
   * Earnings updateManyAndReturn
   */
  export type EarningsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Earnings
     */
    select?: EarningsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Earnings
     */
    omit?: EarningsOmit<ExtArgs> | null
    /**
     * The data used to update Earnings.
     */
    data: XOR<EarningsUpdateManyMutationInput, EarningsUncheckedUpdateManyInput>
    /**
     * Filter which Earnings to update
     */
    where?: EarningsWhereInput
  }

  /**
   * Earnings upsert
   */
  export type EarningsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Earnings
     */
    select?: EarningsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Earnings
     */
    omit?: EarningsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EarningsInclude<ExtArgs> | null
    /**
     * The filter to search for the Earnings to update in case it exists.
     */
    where: EarningsWhereUniqueInput
    /**
     * In case the Earnings found by the `where` argument doesn't exist, create a new Earnings with this data.
     */
    create: XOR<EarningsCreateInput, EarningsUncheckedCreateInput>
    /**
     * In case the Earnings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EarningsUpdateInput, EarningsUncheckedUpdateInput>
  }

  /**
   * Earnings delete
   */
  export type EarningsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Earnings
     */
    select?: EarningsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Earnings
     */
    omit?: EarningsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EarningsInclude<ExtArgs> | null
    /**
     * Filter which Earnings to delete.
     */
    where: EarningsWhereUniqueInput
  }

  /**
   * Earnings deleteMany
   */
  export type EarningsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Earnings to delete
     */
    where?: EarningsWhereInput
  }

  /**
   * Earnings.Stock
   */
  export type Earnings$StockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    where?: StockWhereInput
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    cursor?: StockWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Earnings without action
   */
  export type EarningsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Earnings
     */
    select?: EarningsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Earnings
     */
    omit?: EarningsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EarningsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    firstName: 'firstName',
    lastName: 'lastName',
    password: 'password',
    avatarUrl: 'avatarUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isEmailVerified: 'isEmailVerified'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TargetScalarFieldEnum: {
    id: 'id',
    name: 'name',
    progress: 'progress',
    amount: 'amount',
    isActive: 'isActive',
    category: 'category',
    dateTarget: 'dateTarget',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type TargetScalarFieldEnum = (typeof TargetScalarFieldEnum)[keyof typeof TargetScalarFieldEnum]


  export const FinancialRadiograpScalarFieldEnum: {
    id: 'id',
    monthlyIncome: 'monthlyIncome',
    monthlyExpenses: 'monthlyExpenses',
    savingCapacity: 'savingCapacity',
    debts: 'debts',
    savings: 'savings',
    userId: 'userId'
  };

  export type FinancialRadiograpScalarFieldEnum = (typeof FinancialRadiograpScalarFieldEnum)[keyof typeof FinancialRadiograpScalarFieldEnum]


  export const InvestmentPortfolioScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name'
  };

  export type InvestmentPortfolioScalarFieldEnum = (typeof InvestmentPortfolioScalarFieldEnum)[keyof typeof InvestmentPortfolioScalarFieldEnum]


  export const InvestmentScalarFieldEnum: {
    id: 'id',
    amountInvested: 'amountInvested',
    portfolioId: 'portfolioId',
    financialInstrumentId: 'financialInstrumentId',
    stockSymbol: 'stockSymbol'
  };

  export type InvestmentScalarFieldEnum = (typeof InvestmentScalarFieldEnum)[keyof typeof InvestmentScalarFieldEnum]


  export const FinancialInstrumentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    category: 'category',
    performance: 'performance',
    levelRisk: 'levelRisk',
    deadline: 'deadline',
    currency: 'currency'
  };

  export type FinancialInstrumentScalarFieldEnum = (typeof FinancialInstrumentScalarFieldEnum)[keyof typeof FinancialInstrumentScalarFieldEnum]


  export const NewsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    source: 'source',
    dateNews: 'dateNews',
    category: 'category',
    createdAt: 'createdAt'
  };

  export type NewsScalarFieldEnum = (typeof NewsScalarFieldEnum)[keyof typeof NewsScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    dateComment: 'dateComment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    newsId: 'newsId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const WalletScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    balancePesos: 'balancePesos',
    balanceDollars: 'balanceDollars',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WalletScalarFieldEnum = (typeof WalletScalarFieldEnum)[keyof typeof WalletScalarFieldEnum]


  export const WalletTransactionScalarFieldEnum: {
    id: 'id',
    walletId: 'walletId',
    type: 'type',
    amount: 'amount',
    currency: 'currency',
    description: 'description',
    createdAt: 'createdAt'
  };

  export type WalletTransactionScalarFieldEnum = (typeof WalletTransactionScalarFieldEnum)[keyof typeof WalletTransactionScalarFieldEnum]


  export const AdministradorScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role',
    name: 'name'
  };

  export type AdministradorScalarFieldEnum = (typeof AdministradorScalarFieldEnum)[keyof typeof AdministradorScalarFieldEnum]


  export const SupportScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    subject: 'subject',
    message: 'message',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SupportScalarFieldEnum = (typeof SupportScalarFieldEnum)[keyof typeof SupportScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    riskTolerance: 'riskTolerance',
    investmentHorizon: 'investmentHorizon',
    financialSkills: 'financialSkills',
    hasInvestedBefore: 'hasInvestedBefore',
    financialGoal: 'financialGoal',
    mainGoal: 'mainGoal',
    monthlyInvestment: 'monthlyInvestment',
    financialInstrument: 'financialInstrument',
    investmentMethod: 'investmentMethod',
    investmentCategories: 'investmentCategories',
    mainIncomeSource: 'mainIncomeSource',
    financialNewsSource: 'financialNewsSource',
    years: 'years',
    investingDuration: 'investingDuration',
    savingsOrInvestmentReason: 'savingsOrInvestmentReason'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const CustomizationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    categories: 'categories',
    strategy: 'strategy',
    method: 'method',
    newsSource: 'newsSource',
    instrument: 'instrument',
    age: 'age',
    investingYears: 'investingYears',
    goal: 'goal',
    monthlyAmount: 'monthlyAmount',
    incomeSource: 'incomeSource',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomizationScalarFieldEnum = (typeof CustomizationScalarFieldEnum)[keyof typeof CustomizationScalarFieldEnum]


  export const StockScalarFieldEnum: {
    symbol: 'symbol',
    name: 'name',
    typeDisp: 'typeDisp',
    currency: 'currency',
    market: 'market',
    marketCap: 'marketCap',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    id: 'id',
    priceId: 'priceId',
    volumeId: 'volumeId',
    week52Id: 'week52Id',
    dividendId: 'dividendId',
    earningsId: 'earningsId'
  };

  export type StockScalarFieldEnum = (typeof StockScalarFieldEnum)[keyof typeof StockScalarFieldEnum]


  export const PriceScalarFieldEnum: {
    current: 'current',
    changePercent: 'changePercent',
    open: 'open',
    dayLow: 'dayLow',
    dayHigh: 'dayHigh',
    previousClose: 'previousClose',
    postMarketPrice: 'postMarketPrice',
    postMarketChange: 'postMarketChange',
    id: 'id'
  };

  export type PriceScalarFieldEnum = (typeof PriceScalarFieldEnum)[keyof typeof PriceScalarFieldEnum]


  export const VolumeScalarFieldEnum: {
    current: 'current',
    average3Months: 'average3Months',
    average10Days: 'average10Days',
    id: 'id'
  };

  export type VolumeScalarFieldEnum = (typeof VolumeScalarFieldEnum)[keyof typeof VolumeScalarFieldEnum]


  export const Week52ScalarFieldEnum: {
    high: 'high',
    low: 'low',
    changeFromHigh: 'changeFromHigh',
    changeFromLow: 'changeFromLow',
    id: 'id'
  };

  export type Week52ScalarFieldEnum = (typeof Week52ScalarFieldEnum)[keyof typeof Week52ScalarFieldEnum]


  export const DividendScalarFieldEnum: {
    rate: 'rate',
    yield: 'yield',
    date: 'date',
    id: 'id'
  };

  export type DividendScalarFieldEnum = (typeof DividendScalarFieldEnum)[keyof typeof DividendScalarFieldEnum]


  export const EarningsScalarFieldEnum: {
    nextDate: 'nextDate',
    epsTrailing12Months: 'epsTrailing12Months',
    epsForward: 'epsForward',
    peRatio: 'peRatio',
    id: 'id'
  };

  export type EarningsScalarFieldEnum = (typeof EarningsScalarFieldEnum)[keyof typeof EarningsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'CurrencyType'
   */
  export type EnumCurrencyTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CurrencyType'>
    


  /**
   * Reference to a field of type 'CurrencyType[]'
   */
  export type ListEnumCurrencyTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CurrencyType[]'>
    


  /**
   * Reference to a field of type 'TransactionType'
   */
  export type EnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType'>
    


  /**
   * Reference to a field of type 'TransactionType[]'
   */
  export type ListEnumTransactionTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TransactionType[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Status[]'
   */
  export type ListEnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    avatarUrl?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isEmailVerified?: BoolFilter<"User"> | boolean
    comment?: CommentListRelationFilter
    financialRadiographies?: XOR<FinancialRadiograpNullableScalarRelationFilter, FinancialRadiograpWhereInput> | null
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    customization?: XOR<CustomizationNullableScalarRelationFilter, CustomizationWhereInput> | null
    Support?: SupportListRelationFilter
    wallet?: WalletListRelationFilter
    target?: TargetListRelationFilter
    investmentPortfolio?: XOR<InvestmentPortfolioNullableScalarRelationFilter, InvestmentPortfolioWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    password?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isEmailVerified?: SortOrder
    comment?: CommentOrderByRelationAggregateInput
    financialRadiographies?: FinancialRadiograpOrderByWithRelationInput
    profile?: ProfileOrderByWithRelationInput
    customization?: CustomizationOrderByWithRelationInput
    Support?: SupportOrderByRelationAggregateInput
    wallet?: walletOrderByRelationAggregateInput
    target?: TargetOrderByRelationAggregateInput
    investmentPortfolio?: InvestmentPortfolioOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    avatarUrl?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isEmailVerified?: BoolFilter<"User"> | boolean
    comment?: CommentListRelationFilter
    financialRadiographies?: XOR<FinancialRadiograpNullableScalarRelationFilter, FinancialRadiograpWhereInput> | null
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    customization?: XOR<CustomizationNullableScalarRelationFilter, CustomizationWhereInput> | null
    Support?: SupportListRelationFilter
    wallet?: WalletListRelationFilter
    target?: TargetListRelationFilter
    investmentPortfolio?: XOR<InvestmentPortfolioNullableScalarRelationFilter, InvestmentPortfolioWhereInput> | null
  }, "id" | "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    password?: SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isEmailVerified?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    isEmailVerified?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type TargetWhereInput = {
    AND?: TargetWhereInput | TargetWhereInput[]
    OR?: TargetWhereInput[]
    NOT?: TargetWhereInput | TargetWhereInput[]
    id?: StringFilter<"Target"> | string
    name?: StringFilter<"Target"> | string
    progress?: DecimalFilter<"Target"> | Decimal | DecimalJsLike | number | string
    amount?: DecimalFilter<"Target"> | Decimal | DecimalJsLike | number | string
    isActive?: BoolFilter<"Target"> | boolean
    category?: StringFilter<"Target"> | string
    dateTarget?: DateTimeFilter<"Target"> | Date | string
    createdAt?: DateTimeFilter<"Target"> | Date | string
    updatedAt?: DateTimeFilter<"Target"> | Date | string
    userId?: StringFilter<"Target"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TargetOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    progress?: SortOrder
    amount?: SortOrder
    isActive?: SortOrder
    category?: SortOrder
    dateTarget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TargetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TargetWhereInput | TargetWhereInput[]
    OR?: TargetWhereInput[]
    NOT?: TargetWhereInput | TargetWhereInput[]
    name?: StringFilter<"Target"> | string
    progress?: DecimalFilter<"Target"> | Decimal | DecimalJsLike | number | string
    amount?: DecimalFilter<"Target"> | Decimal | DecimalJsLike | number | string
    isActive?: BoolFilter<"Target"> | boolean
    category?: StringFilter<"Target"> | string
    dateTarget?: DateTimeFilter<"Target"> | Date | string
    createdAt?: DateTimeFilter<"Target"> | Date | string
    updatedAt?: DateTimeFilter<"Target"> | Date | string
    userId?: StringFilter<"Target"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type TargetOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    progress?: SortOrder
    amount?: SortOrder
    isActive?: SortOrder
    category?: SortOrder
    dateTarget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: TargetCountOrderByAggregateInput
    _avg?: TargetAvgOrderByAggregateInput
    _max?: TargetMaxOrderByAggregateInput
    _min?: TargetMinOrderByAggregateInput
    _sum?: TargetSumOrderByAggregateInput
  }

  export type TargetScalarWhereWithAggregatesInput = {
    AND?: TargetScalarWhereWithAggregatesInput | TargetScalarWhereWithAggregatesInput[]
    OR?: TargetScalarWhereWithAggregatesInput[]
    NOT?: TargetScalarWhereWithAggregatesInput | TargetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Target"> | string
    name?: StringWithAggregatesFilter<"Target"> | string
    progress?: DecimalWithAggregatesFilter<"Target"> | Decimal | DecimalJsLike | number | string
    amount?: DecimalWithAggregatesFilter<"Target"> | Decimal | DecimalJsLike | number | string
    isActive?: BoolWithAggregatesFilter<"Target"> | boolean
    category?: StringWithAggregatesFilter<"Target"> | string
    dateTarget?: DateTimeWithAggregatesFilter<"Target"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Target"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Target"> | Date | string
    userId?: StringWithAggregatesFilter<"Target"> | string
  }

  export type FinancialRadiograpWhereInput = {
    AND?: FinancialRadiograpWhereInput | FinancialRadiograpWhereInput[]
    OR?: FinancialRadiograpWhereInput[]
    NOT?: FinancialRadiograpWhereInput | FinancialRadiograpWhereInput[]
    id?: StringFilter<"FinancialRadiograp"> | string
    monthlyIncome?: DecimalNullableFilter<"FinancialRadiograp"> | Decimal | DecimalJsLike | number | string | null
    monthlyExpenses?: DecimalNullableFilter<"FinancialRadiograp"> | Decimal | DecimalJsLike | number | string | null
    savingCapacity?: DecimalNullableFilter<"FinancialRadiograp"> | Decimal | DecimalJsLike | number | string | null
    debts?: DecimalNullableFilter<"FinancialRadiograp"> | Decimal | DecimalJsLike | number | string | null
    savings?: DecimalNullableFilter<"FinancialRadiograp"> | Decimal | DecimalJsLike | number | string | null
    userId?: StringNullableFilter<"FinancialRadiograp"> | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type FinancialRadiograpOrderByWithRelationInput = {
    id?: SortOrder
    monthlyIncome?: SortOrderInput | SortOrder
    monthlyExpenses?: SortOrderInput | SortOrder
    savingCapacity?: SortOrderInput | SortOrder
    debts?: SortOrderInput | SortOrder
    savings?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type FinancialRadiograpWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: FinancialRadiograpWhereInput | FinancialRadiograpWhereInput[]
    OR?: FinancialRadiograpWhereInput[]
    NOT?: FinancialRadiograpWhereInput | FinancialRadiograpWhereInput[]
    monthlyIncome?: DecimalNullableFilter<"FinancialRadiograp"> | Decimal | DecimalJsLike | number | string | null
    monthlyExpenses?: DecimalNullableFilter<"FinancialRadiograp"> | Decimal | DecimalJsLike | number | string | null
    savingCapacity?: DecimalNullableFilter<"FinancialRadiograp"> | Decimal | DecimalJsLike | number | string | null
    debts?: DecimalNullableFilter<"FinancialRadiograp"> | Decimal | DecimalJsLike | number | string | null
    savings?: DecimalNullableFilter<"FinancialRadiograp"> | Decimal | DecimalJsLike | number | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "userId">

  export type FinancialRadiograpOrderByWithAggregationInput = {
    id?: SortOrder
    monthlyIncome?: SortOrderInput | SortOrder
    monthlyExpenses?: SortOrderInput | SortOrder
    savingCapacity?: SortOrderInput | SortOrder
    debts?: SortOrderInput | SortOrder
    savings?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: FinancialRadiograpCountOrderByAggregateInput
    _avg?: FinancialRadiograpAvgOrderByAggregateInput
    _max?: FinancialRadiograpMaxOrderByAggregateInput
    _min?: FinancialRadiograpMinOrderByAggregateInput
    _sum?: FinancialRadiograpSumOrderByAggregateInput
  }

  export type FinancialRadiograpScalarWhereWithAggregatesInput = {
    AND?: FinancialRadiograpScalarWhereWithAggregatesInput | FinancialRadiograpScalarWhereWithAggregatesInput[]
    OR?: FinancialRadiograpScalarWhereWithAggregatesInput[]
    NOT?: FinancialRadiograpScalarWhereWithAggregatesInput | FinancialRadiograpScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FinancialRadiograp"> | string
    monthlyIncome?: DecimalNullableWithAggregatesFilter<"FinancialRadiograp"> | Decimal | DecimalJsLike | number | string | null
    monthlyExpenses?: DecimalNullableWithAggregatesFilter<"FinancialRadiograp"> | Decimal | DecimalJsLike | number | string | null
    savingCapacity?: DecimalNullableWithAggregatesFilter<"FinancialRadiograp"> | Decimal | DecimalJsLike | number | string | null
    debts?: DecimalNullableWithAggregatesFilter<"FinancialRadiograp"> | Decimal | DecimalJsLike | number | string | null
    savings?: DecimalNullableWithAggregatesFilter<"FinancialRadiograp"> | Decimal | DecimalJsLike | number | string | null
    userId?: StringNullableWithAggregatesFilter<"FinancialRadiograp"> | string | null
  }

  export type InvestmentPortfolioWhereInput = {
    AND?: InvestmentPortfolioWhereInput | InvestmentPortfolioWhereInput[]
    OR?: InvestmentPortfolioWhereInput[]
    NOT?: InvestmentPortfolioWhereInput | InvestmentPortfolioWhereInput[]
    id?: StringFilter<"InvestmentPortfolio"> | string
    userId?: StringFilter<"InvestmentPortfolio"> | string
    name?: StringNullableFilter<"InvestmentPortfolio"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    investments?: InvestmentListRelationFilter
  }

  export type InvestmentPortfolioOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    investments?: InvestmentOrderByRelationAggregateInput
  }

  export type InvestmentPortfolioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: InvestmentPortfolioWhereInput | InvestmentPortfolioWhereInput[]
    OR?: InvestmentPortfolioWhereInput[]
    NOT?: InvestmentPortfolioWhereInput | InvestmentPortfolioWhereInput[]
    name?: StringNullableFilter<"InvestmentPortfolio"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    investments?: InvestmentListRelationFilter
  }, "id" | "userId">

  export type InvestmentPortfolioOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrderInput | SortOrder
    _count?: InvestmentPortfolioCountOrderByAggregateInput
    _max?: InvestmentPortfolioMaxOrderByAggregateInput
    _min?: InvestmentPortfolioMinOrderByAggregateInput
  }

  export type InvestmentPortfolioScalarWhereWithAggregatesInput = {
    AND?: InvestmentPortfolioScalarWhereWithAggregatesInput | InvestmentPortfolioScalarWhereWithAggregatesInput[]
    OR?: InvestmentPortfolioScalarWhereWithAggregatesInput[]
    NOT?: InvestmentPortfolioScalarWhereWithAggregatesInput | InvestmentPortfolioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InvestmentPortfolio"> | string
    userId?: StringWithAggregatesFilter<"InvestmentPortfolio"> | string
    name?: StringNullableWithAggregatesFilter<"InvestmentPortfolio"> | string | null
  }

  export type InvestmentWhereInput = {
    AND?: InvestmentWhereInput | InvestmentWhereInput[]
    OR?: InvestmentWhereInput[]
    NOT?: InvestmentWhereInput | InvestmentWhereInput[]
    id?: StringFilter<"Investment"> | string
    amountInvested?: IntFilter<"Investment"> | number
    portfolioId?: StringFilter<"Investment"> | string
    financialInstrumentId?: StringNullableFilter<"Investment"> | string | null
    stockSymbol?: StringNullableFilter<"Investment"> | string | null
    stock?: XOR<StockNullableScalarRelationFilter, StockWhereInput> | null
    portfolio?: XOR<InvestmentPortfolioNullableScalarRelationFilter, InvestmentPortfolioWhereInput> | null
    FinancialInstrument?: XOR<FinancialInstrumentNullableScalarRelationFilter, FinancialInstrumentWhereInput> | null
  }

  export type InvestmentOrderByWithRelationInput = {
    id?: SortOrder
    amountInvested?: SortOrder
    portfolioId?: SortOrder
    financialInstrumentId?: SortOrderInput | SortOrder
    stockSymbol?: SortOrderInput | SortOrder
    stock?: StockOrderByWithRelationInput
    portfolio?: InvestmentPortfolioOrderByWithRelationInput
    FinancialInstrument?: FinancialInstrumentOrderByWithRelationInput
  }

  export type InvestmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InvestmentWhereInput | InvestmentWhereInput[]
    OR?: InvestmentWhereInput[]
    NOT?: InvestmentWhereInput | InvestmentWhereInput[]
    amountInvested?: IntFilter<"Investment"> | number
    portfolioId?: StringFilter<"Investment"> | string
    financialInstrumentId?: StringNullableFilter<"Investment"> | string | null
    stockSymbol?: StringNullableFilter<"Investment"> | string | null
    stock?: XOR<StockNullableScalarRelationFilter, StockWhereInput> | null
    portfolio?: XOR<InvestmentPortfolioNullableScalarRelationFilter, InvestmentPortfolioWhereInput> | null
    FinancialInstrument?: XOR<FinancialInstrumentNullableScalarRelationFilter, FinancialInstrumentWhereInput> | null
  }, "id">

  export type InvestmentOrderByWithAggregationInput = {
    id?: SortOrder
    amountInvested?: SortOrder
    portfolioId?: SortOrder
    financialInstrumentId?: SortOrderInput | SortOrder
    stockSymbol?: SortOrderInput | SortOrder
    _count?: InvestmentCountOrderByAggregateInput
    _avg?: InvestmentAvgOrderByAggregateInput
    _max?: InvestmentMaxOrderByAggregateInput
    _min?: InvestmentMinOrderByAggregateInput
    _sum?: InvestmentSumOrderByAggregateInput
  }

  export type InvestmentScalarWhereWithAggregatesInput = {
    AND?: InvestmentScalarWhereWithAggregatesInput | InvestmentScalarWhereWithAggregatesInput[]
    OR?: InvestmentScalarWhereWithAggregatesInput[]
    NOT?: InvestmentScalarWhereWithAggregatesInput | InvestmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Investment"> | string
    amountInvested?: IntWithAggregatesFilter<"Investment"> | number
    portfolioId?: StringWithAggregatesFilter<"Investment"> | string
    financialInstrumentId?: StringNullableWithAggregatesFilter<"Investment"> | string | null
    stockSymbol?: StringNullableWithAggregatesFilter<"Investment"> | string | null
  }

  export type FinancialInstrumentWhereInput = {
    AND?: FinancialInstrumentWhereInput | FinancialInstrumentWhereInput[]
    OR?: FinancialInstrumentWhereInput[]
    NOT?: FinancialInstrumentWhereInput | FinancialInstrumentWhereInput[]
    id?: StringFilter<"FinancialInstrument"> | string
    name?: StringFilter<"FinancialInstrument"> | string
    type?: StringFilter<"FinancialInstrument"> | string
    category?: StringFilter<"FinancialInstrument"> | string
    performance?: FloatFilter<"FinancialInstrument"> | number
    levelRisk?: IntFilter<"FinancialInstrument"> | number
    deadline?: IntFilter<"FinancialInstrument"> | number
    currency?: EnumCurrencyTypeFilter<"FinancialInstrument"> | $Enums.CurrencyType
    Investments?: InvestmentListRelationFilter
  }

  export type FinancialInstrumentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    category?: SortOrder
    performance?: SortOrder
    levelRisk?: SortOrder
    deadline?: SortOrder
    currency?: SortOrder
    Investments?: InvestmentOrderByRelationAggregateInput
  }

  export type FinancialInstrumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FinancialInstrumentWhereInput | FinancialInstrumentWhereInput[]
    OR?: FinancialInstrumentWhereInput[]
    NOT?: FinancialInstrumentWhereInput | FinancialInstrumentWhereInput[]
    name?: StringFilter<"FinancialInstrument"> | string
    type?: StringFilter<"FinancialInstrument"> | string
    category?: StringFilter<"FinancialInstrument"> | string
    performance?: FloatFilter<"FinancialInstrument"> | number
    levelRisk?: IntFilter<"FinancialInstrument"> | number
    deadline?: IntFilter<"FinancialInstrument"> | number
    currency?: EnumCurrencyTypeFilter<"FinancialInstrument"> | $Enums.CurrencyType
    Investments?: InvestmentListRelationFilter
  }, "id">

  export type FinancialInstrumentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    category?: SortOrder
    performance?: SortOrder
    levelRisk?: SortOrder
    deadline?: SortOrder
    currency?: SortOrder
    _count?: FinancialInstrumentCountOrderByAggregateInput
    _avg?: FinancialInstrumentAvgOrderByAggregateInput
    _max?: FinancialInstrumentMaxOrderByAggregateInput
    _min?: FinancialInstrumentMinOrderByAggregateInput
    _sum?: FinancialInstrumentSumOrderByAggregateInput
  }

  export type FinancialInstrumentScalarWhereWithAggregatesInput = {
    AND?: FinancialInstrumentScalarWhereWithAggregatesInput | FinancialInstrumentScalarWhereWithAggregatesInput[]
    OR?: FinancialInstrumentScalarWhereWithAggregatesInput[]
    NOT?: FinancialInstrumentScalarWhereWithAggregatesInput | FinancialInstrumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FinancialInstrument"> | string
    name?: StringWithAggregatesFilter<"FinancialInstrument"> | string
    type?: StringWithAggregatesFilter<"FinancialInstrument"> | string
    category?: StringWithAggregatesFilter<"FinancialInstrument"> | string
    performance?: FloatWithAggregatesFilter<"FinancialInstrument"> | number
    levelRisk?: IntWithAggregatesFilter<"FinancialInstrument"> | number
    deadline?: IntWithAggregatesFilter<"FinancialInstrument"> | number
    currency?: EnumCurrencyTypeWithAggregatesFilter<"FinancialInstrument"> | $Enums.CurrencyType
  }

  export type NewsWhereInput = {
    AND?: NewsWhereInput | NewsWhereInput[]
    OR?: NewsWhereInput[]
    NOT?: NewsWhereInput | NewsWhereInput[]
    id?: StringFilter<"News"> | string
    title?: StringFilter<"News"> | string
    content?: StringFilter<"News"> | string
    source?: StringFilter<"News"> | string
    dateNews?: DateTimeFilter<"News"> | Date | string
    category?: StringFilter<"News"> | string
    createdAt?: DateTimeFilter<"News"> | Date | string
    comment?: CommentListRelationFilter
  }

  export type NewsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    source?: SortOrder
    dateNews?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    comment?: CommentOrderByRelationAggregateInput
  }

  export type NewsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NewsWhereInput | NewsWhereInput[]
    OR?: NewsWhereInput[]
    NOT?: NewsWhereInput | NewsWhereInput[]
    title?: StringFilter<"News"> | string
    content?: StringFilter<"News"> | string
    source?: StringFilter<"News"> | string
    dateNews?: DateTimeFilter<"News"> | Date | string
    category?: StringFilter<"News"> | string
    createdAt?: DateTimeFilter<"News"> | Date | string
    comment?: CommentListRelationFilter
  }, "id">

  export type NewsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    source?: SortOrder
    dateNews?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    _count?: NewsCountOrderByAggregateInput
    _max?: NewsMaxOrderByAggregateInput
    _min?: NewsMinOrderByAggregateInput
  }

  export type NewsScalarWhereWithAggregatesInput = {
    AND?: NewsScalarWhereWithAggregatesInput | NewsScalarWhereWithAggregatesInput[]
    OR?: NewsScalarWhereWithAggregatesInput[]
    NOT?: NewsScalarWhereWithAggregatesInput | NewsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"News"> | string
    title?: StringWithAggregatesFilter<"News"> | string
    content?: StringWithAggregatesFilter<"News"> | string
    source?: StringWithAggregatesFilter<"News"> | string
    dateNews?: DateTimeWithAggregatesFilter<"News"> | Date | string
    category?: StringWithAggregatesFilter<"News"> | string
    createdAt?: DateTimeWithAggregatesFilter<"News"> | Date | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    dateComment?: DateTimeFilter<"Comment"> | Date | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    userId?: StringNullableFilter<"Comment"> | string | null
    newsId?: StringNullableFilter<"Comment"> | string | null
    news?: XOR<NewsNullableScalarRelationFilter, NewsWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    dateComment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    newsId?: SortOrderInput | SortOrder
    news?: NewsOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    content?: StringFilter<"Comment"> | string
    dateComment?: DateTimeFilter<"Comment"> | Date | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    userId?: StringNullableFilter<"Comment"> | string | null
    newsId?: StringNullableFilter<"Comment"> | string | null
    news?: XOR<NewsNullableScalarRelationFilter, NewsWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    dateComment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    newsId?: SortOrderInput | SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    content?: StringWithAggregatesFilter<"Comment"> | string
    dateComment?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    userId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    newsId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
  }

  export type walletWhereInput = {
    AND?: walletWhereInput | walletWhereInput[]
    OR?: walletWhereInput[]
    NOT?: walletWhereInput | walletWhereInput[]
    id?: StringFilter<"wallet"> | string
    userId?: StringFilter<"wallet"> | string
    balancePesos?: IntFilter<"wallet"> | number
    balanceDollars?: IntFilter<"wallet"> | number
    createdAt?: DateTimeFilter<"wallet"> | Date | string
    updatedAt?: DateTimeFilter<"wallet"> | Date | string
    transactions?: WalletTransactionListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type walletOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    balancePesos?: SortOrder
    balanceDollars?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    transactions?: WalletTransactionOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type walletWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: walletWhereInput | walletWhereInput[]
    OR?: walletWhereInput[]
    NOT?: walletWhereInput | walletWhereInput[]
    userId?: StringFilter<"wallet"> | string
    balancePesos?: IntFilter<"wallet"> | number
    balanceDollars?: IntFilter<"wallet"> | number
    createdAt?: DateTimeFilter<"wallet"> | Date | string
    updatedAt?: DateTimeFilter<"wallet"> | Date | string
    transactions?: WalletTransactionListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type walletOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    balancePesos?: SortOrder
    balanceDollars?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: walletCountOrderByAggregateInput
    _avg?: walletAvgOrderByAggregateInput
    _max?: walletMaxOrderByAggregateInput
    _min?: walletMinOrderByAggregateInput
    _sum?: walletSumOrderByAggregateInput
  }

  export type walletScalarWhereWithAggregatesInput = {
    AND?: walletScalarWhereWithAggregatesInput | walletScalarWhereWithAggregatesInput[]
    OR?: walletScalarWhereWithAggregatesInput[]
    NOT?: walletScalarWhereWithAggregatesInput | walletScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"wallet"> | string
    userId?: StringWithAggregatesFilter<"wallet"> | string
    balancePesos?: IntWithAggregatesFilter<"wallet"> | number
    balanceDollars?: IntWithAggregatesFilter<"wallet"> | number
    createdAt?: DateTimeWithAggregatesFilter<"wallet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"wallet"> | Date | string
  }

  export type WalletTransactionWhereInput = {
    AND?: WalletTransactionWhereInput | WalletTransactionWhereInput[]
    OR?: WalletTransactionWhereInput[]
    NOT?: WalletTransactionWhereInput | WalletTransactionWhereInput[]
    id?: StringFilter<"WalletTransaction"> | string
    walletId?: StringFilter<"WalletTransaction"> | string
    type?: EnumTransactionTypeFilter<"WalletTransaction"> | $Enums.TransactionType
    amount?: FloatFilter<"WalletTransaction"> | number
    currency?: EnumCurrencyTypeFilter<"WalletTransaction"> | $Enums.CurrencyType
    description?: StringNullableFilter<"WalletTransaction"> | string | null
    createdAt?: DateTimeFilter<"WalletTransaction"> | Date | string
    wallet?: XOR<WalletScalarRelationFilter, walletWhereInput>
  }

  export type WalletTransactionOrderByWithRelationInput = {
    id?: SortOrder
    walletId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    wallet?: walletOrderByWithRelationInput
  }

  export type WalletTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WalletTransactionWhereInput | WalletTransactionWhereInput[]
    OR?: WalletTransactionWhereInput[]
    NOT?: WalletTransactionWhereInput | WalletTransactionWhereInput[]
    walletId?: StringFilter<"WalletTransaction"> | string
    type?: EnumTransactionTypeFilter<"WalletTransaction"> | $Enums.TransactionType
    amount?: FloatFilter<"WalletTransaction"> | number
    currency?: EnumCurrencyTypeFilter<"WalletTransaction"> | $Enums.CurrencyType
    description?: StringNullableFilter<"WalletTransaction"> | string | null
    createdAt?: DateTimeFilter<"WalletTransaction"> | Date | string
    wallet?: XOR<WalletScalarRelationFilter, walletWhereInput>
  }, "id">

  export type WalletTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    walletId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: WalletTransactionCountOrderByAggregateInput
    _avg?: WalletTransactionAvgOrderByAggregateInput
    _max?: WalletTransactionMaxOrderByAggregateInput
    _min?: WalletTransactionMinOrderByAggregateInput
    _sum?: WalletTransactionSumOrderByAggregateInput
  }

  export type WalletTransactionScalarWhereWithAggregatesInput = {
    AND?: WalletTransactionScalarWhereWithAggregatesInput | WalletTransactionScalarWhereWithAggregatesInput[]
    OR?: WalletTransactionScalarWhereWithAggregatesInput[]
    NOT?: WalletTransactionScalarWhereWithAggregatesInput | WalletTransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WalletTransaction"> | string
    walletId?: StringWithAggregatesFilter<"WalletTransaction"> | string
    type?: EnumTransactionTypeWithAggregatesFilter<"WalletTransaction"> | $Enums.TransactionType
    amount?: FloatWithAggregatesFilter<"WalletTransaction"> | number
    currency?: EnumCurrencyTypeWithAggregatesFilter<"WalletTransaction"> | $Enums.CurrencyType
    description?: StringNullableWithAggregatesFilter<"WalletTransaction"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"WalletTransaction"> | Date | string
  }

  export type AdministradorWhereInput = {
    AND?: AdministradorWhereInput | AdministradorWhereInput[]
    OR?: AdministradorWhereInput[]
    NOT?: AdministradorWhereInput | AdministradorWhereInput[]
    id?: StringFilter<"Administrador"> | string
    email?: StringFilter<"Administrador"> | string
    password?: StringFilter<"Administrador"> | string
    role?: EnumUserRoleFilter<"Administrador"> | $Enums.UserRole
    name?: StringFilter<"Administrador"> | string
  }

  export type AdministradorOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    name?: SortOrder
  }

  export type AdministradorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: AdministradorWhereInput | AdministradorWhereInput[]
    OR?: AdministradorWhereInput[]
    NOT?: AdministradorWhereInput | AdministradorWhereInput[]
    password?: StringFilter<"Administrador"> | string
    role?: EnumUserRoleFilter<"Administrador"> | $Enums.UserRole
    name?: StringFilter<"Administrador"> | string
  }, "id" | "email">

  export type AdministradorOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    name?: SortOrder
    _count?: AdministradorCountOrderByAggregateInput
    _max?: AdministradorMaxOrderByAggregateInput
    _min?: AdministradorMinOrderByAggregateInput
  }

  export type AdministradorScalarWhereWithAggregatesInput = {
    AND?: AdministradorScalarWhereWithAggregatesInput | AdministradorScalarWhereWithAggregatesInput[]
    OR?: AdministradorScalarWhereWithAggregatesInput[]
    NOT?: AdministradorScalarWhereWithAggregatesInput | AdministradorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Administrador"> | string
    email?: StringWithAggregatesFilter<"Administrador"> | string
    password?: StringWithAggregatesFilter<"Administrador"> | string
    role?: EnumUserRoleWithAggregatesFilter<"Administrador"> | $Enums.UserRole
    name?: StringWithAggregatesFilter<"Administrador"> | string
  }

  export type SupportWhereInput = {
    AND?: SupportWhereInput | SupportWhereInput[]
    OR?: SupportWhereInput[]
    NOT?: SupportWhereInput | SupportWhereInput[]
    id?: StringFilter<"Support"> | string
    userId?: StringFilter<"Support"> | string
    subject?: StringFilter<"Support"> | string
    message?: StringFilter<"Support"> | string
    status?: EnumStatusFilter<"Support"> | $Enums.Status
    createdAt?: DateTimeFilter<"Support"> | Date | string
    updatedAt?: DateTimeFilter<"Support"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SupportOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SupportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SupportWhereInput | SupportWhereInput[]
    OR?: SupportWhereInput[]
    NOT?: SupportWhereInput | SupportWhereInput[]
    userId?: StringFilter<"Support"> | string
    subject?: StringFilter<"Support"> | string
    message?: StringFilter<"Support"> | string
    status?: EnumStatusFilter<"Support"> | $Enums.Status
    createdAt?: DateTimeFilter<"Support"> | Date | string
    updatedAt?: DateTimeFilter<"Support"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SupportOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SupportCountOrderByAggregateInput
    _max?: SupportMaxOrderByAggregateInput
    _min?: SupportMinOrderByAggregateInput
  }

  export type SupportScalarWhereWithAggregatesInput = {
    AND?: SupportScalarWhereWithAggregatesInput | SupportScalarWhereWithAggregatesInput[]
    OR?: SupportScalarWhereWithAggregatesInput[]
    NOT?: SupportScalarWhereWithAggregatesInput | SupportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Support"> | string
    userId?: StringWithAggregatesFilter<"Support"> | string
    subject?: StringWithAggregatesFilter<"Support"> | string
    message?: StringWithAggregatesFilter<"Support"> | string
    status?: EnumStatusWithAggregatesFilter<"Support"> | $Enums.Status
    createdAt?: DateTimeWithAggregatesFilter<"Support"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Support"> | Date | string
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: StringFilter<"Profile"> | string
    userId?: StringFilter<"Profile"> | string
    riskTolerance?: StringNullableFilter<"Profile"> | string | null
    investmentHorizon?: StringNullableFilter<"Profile"> | string | null
    financialSkills?: StringNullableFilter<"Profile"> | string | null
    hasInvestedBefore?: StringNullableFilter<"Profile"> | string | null
    financialGoal?: StringNullableFilter<"Profile"> | string | null
    mainGoal?: StringNullableFilter<"Profile"> | string | null
    monthlyInvestment?: StringNullableFilter<"Profile"> | string | null
    financialInstrument?: StringNullableFilter<"Profile"> | string | null
    investmentMethod?: StringNullableFilter<"Profile"> | string | null
    investmentCategories?: StringNullableFilter<"Profile"> | string | null
    mainIncomeSource?: StringNullableFilter<"Profile"> | string | null
    financialNewsSource?: StringNullableFilter<"Profile"> | string | null
    years?: StringNullableFilter<"Profile"> | string | null
    investingDuration?: StringNullableFilter<"Profile"> | string | null
    savingsOrInvestmentReason?: StringNullableFilter<"Profile"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    riskTolerance?: SortOrderInput | SortOrder
    investmentHorizon?: SortOrderInput | SortOrder
    financialSkills?: SortOrderInput | SortOrder
    hasInvestedBefore?: SortOrderInput | SortOrder
    financialGoal?: SortOrderInput | SortOrder
    mainGoal?: SortOrderInput | SortOrder
    monthlyInvestment?: SortOrderInput | SortOrder
    financialInstrument?: SortOrderInput | SortOrder
    investmentMethod?: SortOrderInput | SortOrder
    investmentCategories?: SortOrderInput | SortOrder
    mainIncomeSource?: SortOrderInput | SortOrder
    financialNewsSource?: SortOrderInput | SortOrder
    years?: SortOrderInput | SortOrder
    investingDuration?: SortOrderInput | SortOrder
    savingsOrInvestmentReason?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    riskTolerance?: StringNullableFilter<"Profile"> | string | null
    investmentHorizon?: StringNullableFilter<"Profile"> | string | null
    financialSkills?: StringNullableFilter<"Profile"> | string | null
    hasInvestedBefore?: StringNullableFilter<"Profile"> | string | null
    financialGoal?: StringNullableFilter<"Profile"> | string | null
    mainGoal?: StringNullableFilter<"Profile"> | string | null
    monthlyInvestment?: StringNullableFilter<"Profile"> | string | null
    financialInstrument?: StringNullableFilter<"Profile"> | string | null
    investmentMethod?: StringNullableFilter<"Profile"> | string | null
    investmentCategories?: StringNullableFilter<"Profile"> | string | null
    mainIncomeSource?: StringNullableFilter<"Profile"> | string | null
    financialNewsSource?: StringNullableFilter<"Profile"> | string | null
    years?: StringNullableFilter<"Profile"> | string | null
    investingDuration?: StringNullableFilter<"Profile"> | string | null
    savingsOrInvestmentReason?: StringNullableFilter<"Profile"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    riskTolerance?: SortOrderInput | SortOrder
    investmentHorizon?: SortOrderInput | SortOrder
    financialSkills?: SortOrderInput | SortOrder
    hasInvestedBefore?: SortOrderInput | SortOrder
    financialGoal?: SortOrderInput | SortOrder
    mainGoal?: SortOrderInput | SortOrder
    monthlyInvestment?: SortOrderInput | SortOrder
    financialInstrument?: SortOrderInput | SortOrder
    investmentMethod?: SortOrderInput | SortOrder
    investmentCategories?: SortOrderInput | SortOrder
    mainIncomeSource?: SortOrderInput | SortOrder
    financialNewsSource?: SortOrderInput | SortOrder
    years?: SortOrderInput | SortOrder
    investingDuration?: SortOrderInput | SortOrder
    savingsOrInvestmentReason?: SortOrderInput | SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Profile"> | string
    userId?: StringWithAggregatesFilter<"Profile"> | string
    riskTolerance?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    investmentHorizon?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    financialSkills?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    hasInvestedBefore?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    financialGoal?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    mainGoal?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    monthlyInvestment?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    financialInstrument?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    investmentMethod?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    investmentCategories?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    mainIncomeSource?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    financialNewsSource?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    years?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    investingDuration?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    savingsOrInvestmentReason?: StringNullableWithAggregatesFilter<"Profile"> | string | null
  }

  export type CustomizationWhereInput = {
    AND?: CustomizationWhereInput | CustomizationWhereInput[]
    OR?: CustomizationWhereInput[]
    NOT?: CustomizationWhereInput | CustomizationWhereInput[]
    id?: StringFilter<"Customization"> | string
    userId?: StringFilter<"Customization"> | string
    categories?: StringNullableFilter<"Customization"> | string | null
    strategy?: StringNullableFilter<"Customization"> | string | null
    method?: StringNullableFilter<"Customization"> | string | null
    newsSource?: StringNullableFilter<"Customization"> | string | null
    instrument?: StringNullableFilter<"Customization"> | string | null
    age?: StringNullableFilter<"Customization"> | string | null
    investingYears?: StringNullableFilter<"Customization"> | string | null
    goal?: StringNullableFilter<"Customization"> | string | null
    monthlyAmount?: IntNullableFilter<"Customization"> | number | null
    incomeSource?: StringNullableFilter<"Customization"> | string | null
    createdAt?: DateTimeFilter<"Customization"> | Date | string
    updatedAt?: DateTimeFilter<"Customization"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CustomizationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    categories?: SortOrderInput | SortOrder
    strategy?: SortOrderInput | SortOrder
    method?: SortOrderInput | SortOrder
    newsSource?: SortOrderInput | SortOrder
    instrument?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    investingYears?: SortOrderInput | SortOrder
    goal?: SortOrderInput | SortOrder
    monthlyAmount?: SortOrderInput | SortOrder
    incomeSource?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CustomizationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: CustomizationWhereInput | CustomizationWhereInput[]
    OR?: CustomizationWhereInput[]
    NOT?: CustomizationWhereInput | CustomizationWhereInput[]
    categories?: StringNullableFilter<"Customization"> | string | null
    strategy?: StringNullableFilter<"Customization"> | string | null
    method?: StringNullableFilter<"Customization"> | string | null
    newsSource?: StringNullableFilter<"Customization"> | string | null
    instrument?: StringNullableFilter<"Customization"> | string | null
    age?: StringNullableFilter<"Customization"> | string | null
    investingYears?: StringNullableFilter<"Customization"> | string | null
    goal?: StringNullableFilter<"Customization"> | string | null
    monthlyAmount?: IntNullableFilter<"Customization"> | number | null
    incomeSource?: StringNullableFilter<"Customization"> | string | null
    createdAt?: DateTimeFilter<"Customization"> | Date | string
    updatedAt?: DateTimeFilter<"Customization"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type CustomizationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    categories?: SortOrderInput | SortOrder
    strategy?: SortOrderInput | SortOrder
    method?: SortOrderInput | SortOrder
    newsSource?: SortOrderInput | SortOrder
    instrument?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    investingYears?: SortOrderInput | SortOrder
    goal?: SortOrderInput | SortOrder
    monthlyAmount?: SortOrderInput | SortOrder
    incomeSource?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomizationCountOrderByAggregateInput
    _avg?: CustomizationAvgOrderByAggregateInput
    _max?: CustomizationMaxOrderByAggregateInput
    _min?: CustomizationMinOrderByAggregateInput
    _sum?: CustomizationSumOrderByAggregateInput
  }

  export type CustomizationScalarWhereWithAggregatesInput = {
    AND?: CustomizationScalarWhereWithAggregatesInput | CustomizationScalarWhereWithAggregatesInput[]
    OR?: CustomizationScalarWhereWithAggregatesInput[]
    NOT?: CustomizationScalarWhereWithAggregatesInput | CustomizationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Customization"> | string
    userId?: StringWithAggregatesFilter<"Customization"> | string
    categories?: StringNullableWithAggregatesFilter<"Customization"> | string | null
    strategy?: StringNullableWithAggregatesFilter<"Customization"> | string | null
    method?: StringNullableWithAggregatesFilter<"Customization"> | string | null
    newsSource?: StringNullableWithAggregatesFilter<"Customization"> | string | null
    instrument?: StringNullableWithAggregatesFilter<"Customization"> | string | null
    age?: StringNullableWithAggregatesFilter<"Customization"> | string | null
    investingYears?: StringNullableWithAggregatesFilter<"Customization"> | string | null
    goal?: StringNullableWithAggregatesFilter<"Customization"> | string | null
    monthlyAmount?: IntNullableWithAggregatesFilter<"Customization"> | number | null
    incomeSource?: StringNullableWithAggregatesFilter<"Customization"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Customization"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Customization"> | Date | string
  }

  export type StockWhereInput = {
    AND?: StockWhereInput | StockWhereInput[]
    OR?: StockWhereInput[]
    NOT?: StockWhereInput | StockWhereInput[]
    symbol?: StringFilter<"Stock"> | string
    name?: StringFilter<"Stock"> | string
    typeDisp?: StringFilter<"Stock"> | string
    currency?: StringFilter<"Stock"> | string
    market?: StringFilter<"Stock"> | string
    marketCap?: IntFilter<"Stock"> | number
    createdAt?: DateTimeFilter<"Stock"> | Date | string
    updatedAt?: DateTimeFilter<"Stock"> | Date | string
    id?: IntFilter<"Stock"> | number
    priceId?: IntFilter<"Stock"> | number
    volumeId?: IntFilter<"Stock"> | number
    week52Id?: IntFilter<"Stock"> | number
    dividendId?: IntFilter<"Stock"> | number
    earningsId?: IntFilter<"Stock"> | number
    dividend?: XOR<DividendScalarRelationFilter, DividendWhereInput>
    earnings?: XOR<EarningsScalarRelationFilter, EarningsWhereInput>
    price?: XOR<PriceScalarRelationFilter, PriceWhereInput>
    volume?: XOR<VolumeScalarRelationFilter, VolumeWhereInput>
    week52?: XOR<Week52ScalarRelationFilter, Week52WhereInput>
    Investment?: InvestmentListRelationFilter
  }

  export type StockOrderByWithRelationInput = {
    symbol?: SortOrder
    name?: SortOrder
    typeDisp?: SortOrder
    currency?: SortOrder
    market?: SortOrder
    marketCap?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    priceId?: SortOrder
    volumeId?: SortOrder
    week52Id?: SortOrder
    dividendId?: SortOrder
    earningsId?: SortOrder
    dividend?: DividendOrderByWithRelationInput
    earnings?: EarningsOrderByWithRelationInput
    price?: PriceOrderByWithRelationInput
    volume?: VolumeOrderByWithRelationInput
    week52?: Week52OrderByWithRelationInput
    Investment?: InvestmentOrderByRelationAggregateInput
  }

  export type StockWhereUniqueInput = Prisma.AtLeast<{
    symbol?: string
    id?: number
    AND?: StockWhereInput | StockWhereInput[]
    OR?: StockWhereInput[]
    NOT?: StockWhereInput | StockWhereInput[]
    name?: StringFilter<"Stock"> | string
    typeDisp?: StringFilter<"Stock"> | string
    currency?: StringFilter<"Stock"> | string
    market?: StringFilter<"Stock"> | string
    marketCap?: IntFilter<"Stock"> | number
    createdAt?: DateTimeFilter<"Stock"> | Date | string
    updatedAt?: DateTimeFilter<"Stock"> | Date | string
    priceId?: IntFilter<"Stock"> | number
    volumeId?: IntFilter<"Stock"> | number
    week52Id?: IntFilter<"Stock"> | number
    dividendId?: IntFilter<"Stock"> | number
    earningsId?: IntFilter<"Stock"> | number
    dividend?: XOR<DividendScalarRelationFilter, DividendWhereInput>
    earnings?: XOR<EarningsScalarRelationFilter, EarningsWhereInput>
    price?: XOR<PriceScalarRelationFilter, PriceWhereInput>
    volume?: XOR<VolumeScalarRelationFilter, VolumeWhereInput>
    week52?: XOR<Week52ScalarRelationFilter, Week52WhereInput>
    Investment?: InvestmentListRelationFilter
  }, "id" | "symbol">

  export type StockOrderByWithAggregationInput = {
    symbol?: SortOrder
    name?: SortOrder
    typeDisp?: SortOrder
    currency?: SortOrder
    market?: SortOrder
    marketCap?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    priceId?: SortOrder
    volumeId?: SortOrder
    week52Id?: SortOrder
    dividendId?: SortOrder
    earningsId?: SortOrder
    _count?: StockCountOrderByAggregateInput
    _avg?: StockAvgOrderByAggregateInput
    _max?: StockMaxOrderByAggregateInput
    _min?: StockMinOrderByAggregateInput
    _sum?: StockSumOrderByAggregateInput
  }

  export type StockScalarWhereWithAggregatesInput = {
    AND?: StockScalarWhereWithAggregatesInput | StockScalarWhereWithAggregatesInput[]
    OR?: StockScalarWhereWithAggregatesInput[]
    NOT?: StockScalarWhereWithAggregatesInput | StockScalarWhereWithAggregatesInput[]
    symbol?: StringWithAggregatesFilter<"Stock"> | string
    name?: StringWithAggregatesFilter<"Stock"> | string
    typeDisp?: StringWithAggregatesFilter<"Stock"> | string
    currency?: StringWithAggregatesFilter<"Stock"> | string
    market?: StringWithAggregatesFilter<"Stock"> | string
    marketCap?: IntWithAggregatesFilter<"Stock"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Stock"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Stock"> | Date | string
    id?: IntWithAggregatesFilter<"Stock"> | number
    priceId?: IntWithAggregatesFilter<"Stock"> | number
    volumeId?: IntWithAggregatesFilter<"Stock"> | number
    week52Id?: IntWithAggregatesFilter<"Stock"> | number
    dividendId?: IntWithAggregatesFilter<"Stock"> | number
    earningsId?: IntWithAggregatesFilter<"Stock"> | number
  }

  export type PriceWhereInput = {
    AND?: PriceWhereInput | PriceWhereInput[]
    OR?: PriceWhereInput[]
    NOT?: PriceWhereInput | PriceWhereInput[]
    current?: FloatNullableFilter<"Price"> | number | null
    changePercent?: FloatNullableFilter<"Price"> | number | null
    open?: FloatNullableFilter<"Price"> | number | null
    dayLow?: FloatNullableFilter<"Price"> | number | null
    dayHigh?: FloatNullableFilter<"Price"> | number | null
    previousClose?: FloatNullableFilter<"Price"> | number | null
    postMarketPrice?: FloatNullableFilter<"Price"> | number | null
    postMarketChange?: FloatNullableFilter<"Price"> | number | null
    id?: IntFilter<"Price"> | number
    Stock?: StockListRelationFilter
  }

  export type PriceOrderByWithRelationInput = {
    current?: SortOrderInput | SortOrder
    changePercent?: SortOrderInput | SortOrder
    open?: SortOrderInput | SortOrder
    dayLow?: SortOrderInput | SortOrder
    dayHigh?: SortOrderInput | SortOrder
    previousClose?: SortOrderInput | SortOrder
    postMarketPrice?: SortOrderInput | SortOrder
    postMarketChange?: SortOrderInput | SortOrder
    id?: SortOrder
    Stock?: StockOrderByRelationAggregateInput
  }

  export type PriceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PriceWhereInput | PriceWhereInput[]
    OR?: PriceWhereInput[]
    NOT?: PriceWhereInput | PriceWhereInput[]
    current?: FloatNullableFilter<"Price"> | number | null
    changePercent?: FloatNullableFilter<"Price"> | number | null
    open?: FloatNullableFilter<"Price"> | number | null
    dayLow?: FloatNullableFilter<"Price"> | number | null
    dayHigh?: FloatNullableFilter<"Price"> | number | null
    previousClose?: FloatNullableFilter<"Price"> | number | null
    postMarketPrice?: FloatNullableFilter<"Price"> | number | null
    postMarketChange?: FloatNullableFilter<"Price"> | number | null
    Stock?: StockListRelationFilter
  }, "id">

  export type PriceOrderByWithAggregationInput = {
    current?: SortOrderInput | SortOrder
    changePercent?: SortOrderInput | SortOrder
    open?: SortOrderInput | SortOrder
    dayLow?: SortOrderInput | SortOrder
    dayHigh?: SortOrderInput | SortOrder
    previousClose?: SortOrderInput | SortOrder
    postMarketPrice?: SortOrderInput | SortOrder
    postMarketChange?: SortOrderInput | SortOrder
    id?: SortOrder
    _count?: PriceCountOrderByAggregateInput
    _avg?: PriceAvgOrderByAggregateInput
    _max?: PriceMaxOrderByAggregateInput
    _min?: PriceMinOrderByAggregateInput
    _sum?: PriceSumOrderByAggregateInput
  }

  export type PriceScalarWhereWithAggregatesInput = {
    AND?: PriceScalarWhereWithAggregatesInput | PriceScalarWhereWithAggregatesInput[]
    OR?: PriceScalarWhereWithAggregatesInput[]
    NOT?: PriceScalarWhereWithAggregatesInput | PriceScalarWhereWithAggregatesInput[]
    current?: FloatNullableWithAggregatesFilter<"Price"> | number | null
    changePercent?: FloatNullableWithAggregatesFilter<"Price"> | number | null
    open?: FloatNullableWithAggregatesFilter<"Price"> | number | null
    dayLow?: FloatNullableWithAggregatesFilter<"Price"> | number | null
    dayHigh?: FloatNullableWithAggregatesFilter<"Price"> | number | null
    previousClose?: FloatNullableWithAggregatesFilter<"Price"> | number | null
    postMarketPrice?: FloatNullableWithAggregatesFilter<"Price"> | number | null
    postMarketChange?: FloatNullableWithAggregatesFilter<"Price"> | number | null
    id?: IntWithAggregatesFilter<"Price"> | number
  }

  export type VolumeWhereInput = {
    AND?: VolumeWhereInput | VolumeWhereInput[]
    OR?: VolumeWhereInput[]
    NOT?: VolumeWhereInput | VolumeWhereInput[]
    current?: IntNullableFilter<"Volume"> | number | null
    average3Months?: IntNullableFilter<"Volume"> | number | null
    average10Days?: IntNullableFilter<"Volume"> | number | null
    id?: IntFilter<"Volume"> | number
    Stock?: StockListRelationFilter
  }

  export type VolumeOrderByWithRelationInput = {
    current?: SortOrderInput | SortOrder
    average3Months?: SortOrderInput | SortOrder
    average10Days?: SortOrderInput | SortOrder
    id?: SortOrder
    Stock?: StockOrderByRelationAggregateInput
  }

  export type VolumeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VolumeWhereInput | VolumeWhereInput[]
    OR?: VolumeWhereInput[]
    NOT?: VolumeWhereInput | VolumeWhereInput[]
    current?: IntNullableFilter<"Volume"> | number | null
    average3Months?: IntNullableFilter<"Volume"> | number | null
    average10Days?: IntNullableFilter<"Volume"> | number | null
    Stock?: StockListRelationFilter
  }, "id">

  export type VolumeOrderByWithAggregationInput = {
    current?: SortOrderInput | SortOrder
    average3Months?: SortOrderInput | SortOrder
    average10Days?: SortOrderInput | SortOrder
    id?: SortOrder
    _count?: VolumeCountOrderByAggregateInput
    _avg?: VolumeAvgOrderByAggregateInput
    _max?: VolumeMaxOrderByAggregateInput
    _min?: VolumeMinOrderByAggregateInput
    _sum?: VolumeSumOrderByAggregateInput
  }

  export type VolumeScalarWhereWithAggregatesInput = {
    AND?: VolumeScalarWhereWithAggregatesInput | VolumeScalarWhereWithAggregatesInput[]
    OR?: VolumeScalarWhereWithAggregatesInput[]
    NOT?: VolumeScalarWhereWithAggregatesInput | VolumeScalarWhereWithAggregatesInput[]
    current?: IntNullableWithAggregatesFilter<"Volume"> | number | null
    average3Months?: IntNullableWithAggregatesFilter<"Volume"> | number | null
    average10Days?: IntNullableWithAggregatesFilter<"Volume"> | number | null
    id?: IntWithAggregatesFilter<"Volume"> | number
  }

  export type Week52WhereInput = {
    AND?: Week52WhereInput | Week52WhereInput[]
    OR?: Week52WhereInput[]
    NOT?: Week52WhereInput | Week52WhereInput[]
    high?: FloatNullableFilter<"Week52"> | number | null
    low?: FloatNullableFilter<"Week52"> | number | null
    changeFromHigh?: FloatNullableFilter<"Week52"> | number | null
    changeFromLow?: FloatNullableFilter<"Week52"> | number | null
    id?: IntFilter<"Week52"> | number
    Stock?: StockListRelationFilter
  }

  export type Week52OrderByWithRelationInput = {
    high?: SortOrderInput | SortOrder
    low?: SortOrderInput | SortOrder
    changeFromHigh?: SortOrderInput | SortOrder
    changeFromLow?: SortOrderInput | SortOrder
    id?: SortOrder
    Stock?: StockOrderByRelationAggregateInput
  }

  export type Week52WhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: Week52WhereInput | Week52WhereInput[]
    OR?: Week52WhereInput[]
    NOT?: Week52WhereInput | Week52WhereInput[]
    high?: FloatNullableFilter<"Week52"> | number | null
    low?: FloatNullableFilter<"Week52"> | number | null
    changeFromHigh?: FloatNullableFilter<"Week52"> | number | null
    changeFromLow?: FloatNullableFilter<"Week52"> | number | null
    Stock?: StockListRelationFilter
  }, "id">

  export type Week52OrderByWithAggregationInput = {
    high?: SortOrderInput | SortOrder
    low?: SortOrderInput | SortOrder
    changeFromHigh?: SortOrderInput | SortOrder
    changeFromLow?: SortOrderInput | SortOrder
    id?: SortOrder
    _count?: Week52CountOrderByAggregateInput
    _avg?: Week52AvgOrderByAggregateInput
    _max?: Week52MaxOrderByAggregateInput
    _min?: Week52MinOrderByAggregateInput
    _sum?: Week52SumOrderByAggregateInput
  }

  export type Week52ScalarWhereWithAggregatesInput = {
    AND?: Week52ScalarWhereWithAggregatesInput | Week52ScalarWhereWithAggregatesInput[]
    OR?: Week52ScalarWhereWithAggregatesInput[]
    NOT?: Week52ScalarWhereWithAggregatesInput | Week52ScalarWhereWithAggregatesInput[]
    high?: FloatNullableWithAggregatesFilter<"Week52"> | number | null
    low?: FloatNullableWithAggregatesFilter<"Week52"> | number | null
    changeFromHigh?: FloatNullableWithAggregatesFilter<"Week52"> | number | null
    changeFromLow?: FloatNullableWithAggregatesFilter<"Week52"> | number | null
    id?: IntWithAggregatesFilter<"Week52"> | number
  }

  export type DividendWhereInput = {
    AND?: DividendWhereInput | DividendWhereInput[]
    OR?: DividendWhereInput[]
    NOT?: DividendWhereInput | DividendWhereInput[]
    rate?: FloatNullableFilter<"Dividend"> | number | null
    yield?: FloatNullableFilter<"Dividend"> | number | null
    date?: DateTimeNullableFilter<"Dividend"> | Date | string | null
    id?: IntFilter<"Dividend"> | number
    Stock?: StockListRelationFilter
  }

  export type DividendOrderByWithRelationInput = {
    rate?: SortOrderInput | SortOrder
    yield?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
    id?: SortOrder
    Stock?: StockOrderByRelationAggregateInput
  }

  export type DividendWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DividendWhereInput | DividendWhereInput[]
    OR?: DividendWhereInput[]
    NOT?: DividendWhereInput | DividendWhereInput[]
    rate?: FloatNullableFilter<"Dividend"> | number | null
    yield?: FloatNullableFilter<"Dividend"> | number | null
    date?: DateTimeNullableFilter<"Dividend"> | Date | string | null
    Stock?: StockListRelationFilter
  }, "id">

  export type DividendOrderByWithAggregationInput = {
    rate?: SortOrderInput | SortOrder
    yield?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
    id?: SortOrder
    _count?: DividendCountOrderByAggregateInput
    _avg?: DividendAvgOrderByAggregateInput
    _max?: DividendMaxOrderByAggregateInput
    _min?: DividendMinOrderByAggregateInput
    _sum?: DividendSumOrderByAggregateInput
  }

  export type DividendScalarWhereWithAggregatesInput = {
    AND?: DividendScalarWhereWithAggregatesInput | DividendScalarWhereWithAggregatesInput[]
    OR?: DividendScalarWhereWithAggregatesInput[]
    NOT?: DividendScalarWhereWithAggregatesInput | DividendScalarWhereWithAggregatesInput[]
    rate?: FloatNullableWithAggregatesFilter<"Dividend"> | number | null
    yield?: FloatNullableWithAggregatesFilter<"Dividend"> | number | null
    date?: DateTimeNullableWithAggregatesFilter<"Dividend"> | Date | string | null
    id?: IntWithAggregatesFilter<"Dividend"> | number
  }

  export type EarningsWhereInput = {
    AND?: EarningsWhereInput | EarningsWhereInput[]
    OR?: EarningsWhereInput[]
    NOT?: EarningsWhereInput | EarningsWhereInput[]
    nextDate?: DateTimeNullableFilter<"Earnings"> | Date | string | null
    epsTrailing12Months?: FloatNullableFilter<"Earnings"> | number | null
    epsForward?: FloatNullableFilter<"Earnings"> | number | null
    peRatio?: FloatNullableFilter<"Earnings"> | number | null
    id?: IntFilter<"Earnings"> | number
    Stock?: StockListRelationFilter
  }

  export type EarningsOrderByWithRelationInput = {
    nextDate?: SortOrderInput | SortOrder
    epsTrailing12Months?: SortOrderInput | SortOrder
    epsForward?: SortOrderInput | SortOrder
    peRatio?: SortOrderInput | SortOrder
    id?: SortOrder
    Stock?: StockOrderByRelationAggregateInput
  }

  export type EarningsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EarningsWhereInput | EarningsWhereInput[]
    OR?: EarningsWhereInput[]
    NOT?: EarningsWhereInput | EarningsWhereInput[]
    nextDate?: DateTimeNullableFilter<"Earnings"> | Date | string | null
    epsTrailing12Months?: FloatNullableFilter<"Earnings"> | number | null
    epsForward?: FloatNullableFilter<"Earnings"> | number | null
    peRatio?: FloatNullableFilter<"Earnings"> | number | null
    Stock?: StockListRelationFilter
  }, "id">

  export type EarningsOrderByWithAggregationInput = {
    nextDate?: SortOrderInput | SortOrder
    epsTrailing12Months?: SortOrderInput | SortOrder
    epsForward?: SortOrderInput | SortOrder
    peRatio?: SortOrderInput | SortOrder
    id?: SortOrder
    _count?: EarningsCountOrderByAggregateInput
    _avg?: EarningsAvgOrderByAggregateInput
    _max?: EarningsMaxOrderByAggregateInput
    _min?: EarningsMinOrderByAggregateInput
    _sum?: EarningsSumOrderByAggregateInput
  }

  export type EarningsScalarWhereWithAggregatesInput = {
    AND?: EarningsScalarWhereWithAggregatesInput | EarningsScalarWhereWithAggregatesInput[]
    OR?: EarningsScalarWhereWithAggregatesInput[]
    NOT?: EarningsScalarWhereWithAggregatesInput | EarningsScalarWhereWithAggregatesInput[]
    nextDate?: DateTimeNullableWithAggregatesFilter<"Earnings"> | Date | string | null
    epsTrailing12Months?: FloatNullableWithAggregatesFilter<"Earnings"> | number | null
    epsForward?: FloatNullableWithAggregatesFilter<"Earnings"> | number | null
    peRatio?: FloatNullableWithAggregatesFilter<"Earnings"> | number | null
    id?: IntWithAggregatesFilter<"Earnings"> | number
  }

  export type UserCreateInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    comment?: CommentCreateNestedManyWithoutUserInput
    financialRadiographies?: FinancialRadiograpCreateNestedOneWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customization?: CustomizationCreateNestedOneWithoutUserInput
    Support?: SupportCreateNestedManyWithoutUserInput
    wallet?: walletCreateNestedManyWithoutUserInput
    target?: TargetCreateNestedManyWithoutUserInput
    investmentPortfolio?: InvestmentPortfolioCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    financialRadiographies?: FinancialRadiograpUncheckedCreateNestedOneWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customization?: CustomizationUncheckedCreateNestedOneWithoutUserInput
    Support?: SupportUncheckedCreateNestedManyWithoutUserInput
    wallet?: walletUncheckedCreateNestedManyWithoutUserInput
    target?: TargetUncheckedCreateNestedManyWithoutUserInput
    investmentPortfolio?: InvestmentPortfolioUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    comment?: CommentUpdateManyWithoutUserNestedInput
    financialRadiographies?: FinancialRadiograpUpdateOneWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customization?: CustomizationUpdateOneWithoutUserNestedInput
    Support?: SupportUpdateManyWithoutUserNestedInput
    wallet?: walletUpdateManyWithoutUserNestedInput
    target?: TargetUpdateManyWithoutUserNestedInput
    investmentPortfolio?: InvestmentPortfolioUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    financialRadiographies?: FinancialRadiograpUncheckedUpdateOneWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customization?: CustomizationUncheckedUpdateOneWithoutUserNestedInput
    Support?: SupportUncheckedUpdateManyWithoutUserNestedInput
    wallet?: walletUncheckedUpdateManyWithoutUserNestedInput
    target?: TargetUncheckedUpdateManyWithoutUserNestedInput
    investmentPortfolio?: InvestmentPortfolioUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TargetCreateInput = {
    id?: string
    name: string
    progress?: Decimal | DecimalJsLike | number | string
    amount: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    category: string
    dateTarget: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutTargetInput
  }

  export type TargetUncheckedCreateInput = {
    id?: string
    name: string
    progress?: Decimal | DecimalJsLike | number | string
    amount: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    category: string
    dateTarget: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type TargetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    progress?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    dateTarget?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTargetNestedInput
  }

  export type TargetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    progress?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    dateTarget?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type TargetCreateManyInput = {
    id?: string
    name: string
    progress?: Decimal | DecimalJsLike | number | string
    amount: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    category: string
    dateTarget: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type TargetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    progress?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    dateTarget?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TargetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    progress?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    dateTarget?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FinancialRadiograpCreateInput = {
    id?: string
    monthlyIncome?: Decimal | DecimalJsLike | number | string | null
    monthlyExpenses?: Decimal | DecimalJsLike | number | string | null
    savingCapacity?: Decimal | DecimalJsLike | number | string | null
    debts?: Decimal | DecimalJsLike | number | string | null
    savings?: Decimal | DecimalJsLike | number | string | null
    user?: UserCreateNestedOneWithoutFinancialRadiographiesInput
  }

  export type FinancialRadiograpUncheckedCreateInput = {
    id?: string
    monthlyIncome?: Decimal | DecimalJsLike | number | string | null
    monthlyExpenses?: Decimal | DecimalJsLike | number | string | null
    savingCapacity?: Decimal | DecimalJsLike | number | string | null
    debts?: Decimal | DecimalJsLike | number | string | null
    savings?: Decimal | DecimalJsLike | number | string | null
    userId?: string | null
  }

  export type FinancialRadiograpUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    monthlyIncome?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    savingCapacity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    debts?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    savings?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    user?: UserUpdateOneWithoutFinancialRadiographiesNestedInput
  }

  export type FinancialRadiograpUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    monthlyIncome?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    savingCapacity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    debts?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    savings?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FinancialRadiograpCreateManyInput = {
    id?: string
    monthlyIncome?: Decimal | DecimalJsLike | number | string | null
    monthlyExpenses?: Decimal | DecimalJsLike | number | string | null
    savingCapacity?: Decimal | DecimalJsLike | number | string | null
    debts?: Decimal | DecimalJsLike | number | string | null
    savings?: Decimal | DecimalJsLike | number | string | null
    userId?: string | null
  }

  export type FinancialRadiograpUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    monthlyIncome?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    savingCapacity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    debts?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    savings?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type FinancialRadiograpUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    monthlyIncome?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    savingCapacity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    debts?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    savings?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvestmentPortfolioCreateInput = {
    id?: string
    name?: string | null
    user: UserCreateNestedOneWithoutInvestmentPortfolioInput
    investments?: InvestmentCreateNestedManyWithoutPortfolioInput
  }

  export type InvestmentPortfolioUncheckedCreateInput = {
    id?: string
    userId: string
    name?: string | null
    investments?: InvestmentUncheckedCreateNestedManyWithoutPortfolioInput
  }

  export type InvestmentPortfolioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutInvestmentPortfolioNestedInput
    investments?: InvestmentUpdateManyWithoutPortfolioNestedInput
  }

  export type InvestmentPortfolioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    investments?: InvestmentUncheckedUpdateManyWithoutPortfolioNestedInput
  }

  export type InvestmentPortfolioCreateManyInput = {
    id?: string
    userId: string
    name?: string | null
  }

  export type InvestmentPortfolioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvestmentPortfolioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvestmentCreateInput = {
    id?: string
    amountInvested: number
    stock?: StockCreateNestedOneWithoutInvestmentInput
    portfolio?: InvestmentPortfolioCreateNestedOneWithoutInvestmentsInput
    FinancialInstrument?: FinancialInstrumentCreateNestedOneWithoutInvestmentsInput
  }

  export type InvestmentUncheckedCreateInput = {
    id?: string
    amountInvested: number
    portfolioId: string
    financialInstrumentId?: string | null
    stockSymbol?: string | null
  }

  export type InvestmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountInvested?: IntFieldUpdateOperationsInput | number
    stock?: StockUpdateOneWithoutInvestmentNestedInput
    portfolio?: InvestmentPortfolioUpdateOneWithoutInvestmentsNestedInput
    FinancialInstrument?: FinancialInstrumentUpdateOneWithoutInvestmentsNestedInput
  }

  export type InvestmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountInvested?: IntFieldUpdateOperationsInput | number
    portfolioId?: StringFieldUpdateOperationsInput | string
    financialInstrumentId?: NullableStringFieldUpdateOperationsInput | string | null
    stockSymbol?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvestmentCreateManyInput = {
    id?: string
    amountInvested: number
    portfolioId: string
    financialInstrumentId?: string | null
    stockSymbol?: string | null
  }

  export type InvestmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountInvested?: IntFieldUpdateOperationsInput | number
  }

  export type InvestmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountInvested?: IntFieldUpdateOperationsInput | number
    portfolioId?: StringFieldUpdateOperationsInput | string
    financialInstrumentId?: NullableStringFieldUpdateOperationsInput | string | null
    stockSymbol?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FinancialInstrumentCreateInput = {
    id?: string
    name: string
    type: string
    category: string
    performance: number
    levelRisk: number
    deadline: number
    currency: $Enums.CurrencyType
    Investments?: InvestmentCreateNestedManyWithoutFinancialInstrumentInput
  }

  export type FinancialInstrumentUncheckedCreateInput = {
    id?: string
    name: string
    type: string
    category: string
    performance: number
    levelRisk: number
    deadline: number
    currency: $Enums.CurrencyType
    Investments?: InvestmentUncheckedCreateNestedManyWithoutFinancialInstrumentInput
  }

  export type FinancialInstrumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    performance?: FloatFieldUpdateOperationsInput | number
    levelRisk?: IntFieldUpdateOperationsInput | number
    deadline?: IntFieldUpdateOperationsInput | number
    currency?: EnumCurrencyTypeFieldUpdateOperationsInput | $Enums.CurrencyType
    Investments?: InvestmentUpdateManyWithoutFinancialInstrumentNestedInput
  }

  export type FinancialInstrumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    performance?: FloatFieldUpdateOperationsInput | number
    levelRisk?: IntFieldUpdateOperationsInput | number
    deadline?: IntFieldUpdateOperationsInput | number
    currency?: EnumCurrencyTypeFieldUpdateOperationsInput | $Enums.CurrencyType
    Investments?: InvestmentUncheckedUpdateManyWithoutFinancialInstrumentNestedInput
  }

  export type FinancialInstrumentCreateManyInput = {
    id?: string
    name: string
    type: string
    category: string
    performance: number
    levelRisk: number
    deadline: number
    currency: $Enums.CurrencyType
  }

  export type FinancialInstrumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    performance?: FloatFieldUpdateOperationsInput | number
    levelRisk?: IntFieldUpdateOperationsInput | number
    deadline?: IntFieldUpdateOperationsInput | number
    currency?: EnumCurrencyTypeFieldUpdateOperationsInput | $Enums.CurrencyType
  }

  export type FinancialInstrumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    performance?: FloatFieldUpdateOperationsInput | number
    levelRisk?: IntFieldUpdateOperationsInput | number
    deadline?: IntFieldUpdateOperationsInput | number
    currency?: EnumCurrencyTypeFieldUpdateOperationsInput | $Enums.CurrencyType
  }

  export type NewsCreateInput = {
    id?: string
    title: string
    content: string
    source: string
    dateNews: Date | string
    category: string
    createdAt?: Date | string
    comment?: CommentCreateNestedManyWithoutNewsInput
  }

  export type NewsUncheckedCreateInput = {
    id?: string
    title: string
    content: string
    source: string
    dateNews: Date | string
    category: string
    createdAt?: Date | string
    comment?: CommentUncheckedCreateNestedManyWithoutNewsInput
  }

  export type NewsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    dateNews?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: CommentUpdateManyWithoutNewsNestedInput
  }

  export type NewsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    dateNews?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comment?: CommentUncheckedUpdateManyWithoutNewsNestedInput
  }

  export type NewsCreateManyInput = {
    id?: string
    title: string
    content: string
    source: string
    dateNews: Date | string
    category: string
    createdAt?: Date | string
  }

  export type NewsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    dateNews?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    dateNews?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    id?: string
    content: string
    dateComment: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    news?: NewsCreateNestedOneWithoutCommentInput
    user?: UserCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    content: string
    dateComment: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    newsId?: string | null
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    dateComment?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    news?: NewsUpdateOneWithoutCommentNestedInput
    user?: UserUpdateOneWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    dateComment?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    newsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentCreateManyInput = {
    id?: string
    content: string
    dateComment: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    newsId?: string | null
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    dateComment?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    dateComment?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    newsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type walletCreateInput = {
    id?: string
    balancePesos: number
    balanceDollars: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: WalletTransactionCreateNestedManyWithoutWalletInput
    user: UserCreateNestedOneWithoutWalletInput
  }

  export type walletUncheckedCreateInput = {
    id?: string
    userId: string
    balancePesos: number
    balanceDollars: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: WalletTransactionUncheckedCreateNestedManyWithoutWalletInput
  }

  export type walletUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    balancePesos?: IntFieldUpdateOperationsInput | number
    balanceDollars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: WalletTransactionUpdateManyWithoutWalletNestedInput
    user?: UserUpdateOneRequiredWithoutWalletNestedInput
  }

  export type walletUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    balancePesos?: IntFieldUpdateOperationsInput | number
    balanceDollars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: WalletTransactionUncheckedUpdateManyWithoutWalletNestedInput
  }

  export type walletCreateManyInput = {
    id?: string
    userId: string
    balancePesos: number
    balanceDollars: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type walletUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    balancePesos?: IntFieldUpdateOperationsInput | number
    balanceDollars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type walletUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    balancePesos?: IntFieldUpdateOperationsInput | number
    balanceDollars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletTransactionCreateInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    currency: $Enums.CurrencyType
    description?: string | null
    createdAt?: Date | string
    wallet: walletCreateNestedOneWithoutTransactionsInput
  }

  export type WalletTransactionUncheckedCreateInput = {
    id?: string
    walletId: string
    type: $Enums.TransactionType
    amount: number
    currency: $Enums.CurrencyType
    description?: string | null
    createdAt?: Date | string
  }

  export type WalletTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyTypeFieldUpdateOperationsInput | $Enums.CurrencyType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wallet?: walletUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type WalletTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletId?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyTypeFieldUpdateOperationsInput | $Enums.CurrencyType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletTransactionCreateManyInput = {
    id?: string
    walletId: string
    type: $Enums.TransactionType
    amount: number
    currency: $Enums.CurrencyType
    description?: string | null
    createdAt?: Date | string
  }

  export type WalletTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyTypeFieldUpdateOperationsInput | $Enums.CurrencyType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletId?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyTypeFieldUpdateOperationsInput | $Enums.CurrencyType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdministradorCreateInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    name: string
  }

  export type AdministradorUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    name: string
  }

  export type AdministradorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AdministradorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AdministradorCreateManyInput = {
    id?: string
    email: string
    password: string
    role?: $Enums.UserRole
    name: string
  }

  export type AdministradorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
  }

  export type AdministradorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SupportCreateInput = {
    id?: string
    subject: string
    message: string
    status?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSupportInput
  }

  export type SupportUncheckedCreateInput = {
    id?: string
    userId: string
    subject: string
    message: string
    status?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SupportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSupportNestedInput
  }

  export type SupportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupportCreateManyInput = {
    id?: string
    userId: string
    subject: string
    message: string
    status?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SupportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateInput = {
    id?: string
    riskTolerance?: string | null
    investmentHorizon?: string | null
    financialSkills?: string | null
    hasInvestedBefore?: string | null
    financialGoal?: string | null
    mainGoal?: string | null
    monthlyInvestment?: string | null
    financialInstrument?: string | null
    investmentMethod?: string | null
    investmentCategories?: string | null
    mainIncomeSource?: string | null
    financialNewsSource?: string | null
    years?: string | null
    investingDuration?: string | null
    savingsOrInvestmentReason?: string | null
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    userId: string
    riskTolerance?: string | null
    investmentHorizon?: string | null
    financialSkills?: string | null
    hasInvestedBefore?: string | null
    financialGoal?: string | null
    mainGoal?: string | null
    monthlyInvestment?: string | null
    financialInstrument?: string | null
    investmentMethod?: string | null
    investmentCategories?: string | null
    mainIncomeSource?: string | null
    financialNewsSource?: string | null
    years?: string | null
    investingDuration?: string | null
    savingsOrInvestmentReason?: string | null
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    riskTolerance?: NullableStringFieldUpdateOperationsInput | string | null
    investmentHorizon?: NullableStringFieldUpdateOperationsInput | string | null
    financialSkills?: NullableStringFieldUpdateOperationsInput | string | null
    hasInvestedBefore?: NullableStringFieldUpdateOperationsInput | string | null
    financialGoal?: NullableStringFieldUpdateOperationsInput | string | null
    mainGoal?: NullableStringFieldUpdateOperationsInput | string | null
    monthlyInvestment?: NullableStringFieldUpdateOperationsInput | string | null
    financialInstrument?: NullableStringFieldUpdateOperationsInput | string | null
    investmentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    investmentCategories?: NullableStringFieldUpdateOperationsInput | string | null
    mainIncomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    financialNewsSource?: NullableStringFieldUpdateOperationsInput | string | null
    years?: NullableStringFieldUpdateOperationsInput | string | null
    investingDuration?: NullableStringFieldUpdateOperationsInput | string | null
    savingsOrInvestmentReason?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    riskTolerance?: NullableStringFieldUpdateOperationsInput | string | null
    investmentHorizon?: NullableStringFieldUpdateOperationsInput | string | null
    financialSkills?: NullableStringFieldUpdateOperationsInput | string | null
    hasInvestedBefore?: NullableStringFieldUpdateOperationsInput | string | null
    financialGoal?: NullableStringFieldUpdateOperationsInput | string | null
    mainGoal?: NullableStringFieldUpdateOperationsInput | string | null
    monthlyInvestment?: NullableStringFieldUpdateOperationsInput | string | null
    financialInstrument?: NullableStringFieldUpdateOperationsInput | string | null
    investmentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    investmentCategories?: NullableStringFieldUpdateOperationsInput | string | null
    mainIncomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    financialNewsSource?: NullableStringFieldUpdateOperationsInput | string | null
    years?: NullableStringFieldUpdateOperationsInput | string | null
    investingDuration?: NullableStringFieldUpdateOperationsInput | string | null
    savingsOrInvestmentReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileCreateManyInput = {
    id?: string
    userId: string
    riskTolerance?: string | null
    investmentHorizon?: string | null
    financialSkills?: string | null
    hasInvestedBefore?: string | null
    financialGoal?: string | null
    mainGoal?: string | null
    monthlyInvestment?: string | null
    financialInstrument?: string | null
    investmentMethod?: string | null
    investmentCategories?: string | null
    mainIncomeSource?: string | null
    financialNewsSource?: string | null
    years?: string | null
    investingDuration?: string | null
    savingsOrInvestmentReason?: string | null
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    riskTolerance?: NullableStringFieldUpdateOperationsInput | string | null
    investmentHorizon?: NullableStringFieldUpdateOperationsInput | string | null
    financialSkills?: NullableStringFieldUpdateOperationsInput | string | null
    hasInvestedBefore?: NullableStringFieldUpdateOperationsInput | string | null
    financialGoal?: NullableStringFieldUpdateOperationsInput | string | null
    mainGoal?: NullableStringFieldUpdateOperationsInput | string | null
    monthlyInvestment?: NullableStringFieldUpdateOperationsInput | string | null
    financialInstrument?: NullableStringFieldUpdateOperationsInput | string | null
    investmentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    investmentCategories?: NullableStringFieldUpdateOperationsInput | string | null
    mainIncomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    financialNewsSource?: NullableStringFieldUpdateOperationsInput | string | null
    years?: NullableStringFieldUpdateOperationsInput | string | null
    investingDuration?: NullableStringFieldUpdateOperationsInput | string | null
    savingsOrInvestmentReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    riskTolerance?: NullableStringFieldUpdateOperationsInput | string | null
    investmentHorizon?: NullableStringFieldUpdateOperationsInput | string | null
    financialSkills?: NullableStringFieldUpdateOperationsInput | string | null
    hasInvestedBefore?: NullableStringFieldUpdateOperationsInput | string | null
    financialGoal?: NullableStringFieldUpdateOperationsInput | string | null
    mainGoal?: NullableStringFieldUpdateOperationsInput | string | null
    monthlyInvestment?: NullableStringFieldUpdateOperationsInput | string | null
    financialInstrument?: NullableStringFieldUpdateOperationsInput | string | null
    investmentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    investmentCategories?: NullableStringFieldUpdateOperationsInput | string | null
    mainIncomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    financialNewsSource?: NullableStringFieldUpdateOperationsInput | string | null
    years?: NullableStringFieldUpdateOperationsInput | string | null
    investingDuration?: NullableStringFieldUpdateOperationsInput | string | null
    savingsOrInvestmentReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomizationCreateInput = {
    id?: string
    categories?: string | null
    strategy?: string | null
    method?: string | null
    newsSource?: string | null
    instrument?: string | null
    age?: string | null
    investingYears?: string | null
    goal?: string | null
    monthlyAmount?: number | null
    incomeSource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCustomizationInput
  }

  export type CustomizationUncheckedCreateInput = {
    id?: string
    userId: string
    categories?: string | null
    strategy?: string | null
    method?: string | null
    newsSource?: string | null
    instrument?: string | null
    age?: string | null
    investingYears?: string | null
    goal?: string | null
    monthlyAmount?: number | null
    incomeSource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomizationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    categories?: NullableStringFieldUpdateOperationsInput | string | null
    strategy?: NullableStringFieldUpdateOperationsInput | string | null
    method?: NullableStringFieldUpdateOperationsInput | string | null
    newsSource?: NullableStringFieldUpdateOperationsInput | string | null
    instrument?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    investingYears?: NullableStringFieldUpdateOperationsInput | string | null
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    monthlyAmount?: NullableIntFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCustomizationNestedInput
  }

  export type CustomizationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    categories?: NullableStringFieldUpdateOperationsInput | string | null
    strategy?: NullableStringFieldUpdateOperationsInput | string | null
    method?: NullableStringFieldUpdateOperationsInput | string | null
    newsSource?: NullableStringFieldUpdateOperationsInput | string | null
    instrument?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    investingYears?: NullableStringFieldUpdateOperationsInput | string | null
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    monthlyAmount?: NullableIntFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomizationCreateManyInput = {
    id?: string
    userId: string
    categories?: string | null
    strategy?: string | null
    method?: string | null
    newsSource?: string | null
    instrument?: string | null
    age?: string | null
    investingYears?: string | null
    goal?: string | null
    monthlyAmount?: number | null
    incomeSource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomizationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    categories?: NullableStringFieldUpdateOperationsInput | string | null
    strategy?: NullableStringFieldUpdateOperationsInput | string | null
    method?: NullableStringFieldUpdateOperationsInput | string | null
    newsSource?: NullableStringFieldUpdateOperationsInput | string | null
    instrument?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    investingYears?: NullableStringFieldUpdateOperationsInput | string | null
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    monthlyAmount?: NullableIntFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomizationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    categories?: NullableStringFieldUpdateOperationsInput | string | null
    strategy?: NullableStringFieldUpdateOperationsInput | string | null
    method?: NullableStringFieldUpdateOperationsInput | string | null
    newsSource?: NullableStringFieldUpdateOperationsInput | string | null
    instrument?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    investingYears?: NullableStringFieldUpdateOperationsInput | string | null
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    monthlyAmount?: NullableIntFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockCreateInput = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dividend: DividendCreateNestedOneWithoutStockInput
    earnings: EarningsCreateNestedOneWithoutStockInput
    price: PriceCreateNestedOneWithoutStockInput
    volume: VolumeCreateNestedOneWithoutStockInput
    week52: Week52CreateNestedOneWithoutStockInput
    Investment?: InvestmentCreateNestedManyWithoutStockInput
  }

  export type StockUncheckedCreateInput = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    priceId: number
    volumeId: number
    week52Id: number
    dividendId: number
    earningsId: number
    Investment?: InvestmentUncheckedCreateNestedManyWithoutStockInput
  }

  export type StockUpdateInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dividend?: DividendUpdateOneRequiredWithoutStockNestedInput
    earnings?: EarningsUpdateOneRequiredWithoutStockNestedInput
    price?: PriceUpdateOneRequiredWithoutStockNestedInput
    volume?: VolumeUpdateOneRequiredWithoutStockNestedInput
    week52?: Week52UpdateOneRequiredWithoutStockNestedInput
    Investment?: InvestmentUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    priceId?: IntFieldUpdateOperationsInput | number
    volumeId?: IntFieldUpdateOperationsInput | number
    week52Id?: IntFieldUpdateOperationsInput | number
    dividendId?: IntFieldUpdateOperationsInput | number
    earningsId?: IntFieldUpdateOperationsInput | number
    Investment?: InvestmentUncheckedUpdateManyWithoutStockNestedInput
  }

  export type StockCreateManyInput = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    priceId: number
    volumeId: number
    week52Id: number
    dividendId: number
    earningsId: number
  }

  export type StockUpdateManyMutationInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockUncheckedUpdateManyInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    priceId?: IntFieldUpdateOperationsInput | number
    volumeId?: IntFieldUpdateOperationsInput | number
    week52Id?: IntFieldUpdateOperationsInput | number
    dividendId?: IntFieldUpdateOperationsInput | number
    earningsId?: IntFieldUpdateOperationsInput | number
  }

  export type PriceCreateInput = {
    current?: number | null
    changePercent?: number | null
    open?: number | null
    dayLow?: number | null
    dayHigh?: number | null
    previousClose?: number | null
    postMarketPrice?: number | null
    postMarketChange?: number | null
    Stock?: StockCreateNestedManyWithoutPriceInput
  }

  export type PriceUncheckedCreateInput = {
    current?: number | null
    changePercent?: number | null
    open?: number | null
    dayLow?: number | null
    dayHigh?: number | null
    previousClose?: number | null
    postMarketPrice?: number | null
    postMarketChange?: number | null
    id?: number
    Stock?: StockUncheckedCreateNestedManyWithoutPriceInput
  }

  export type PriceUpdateInput = {
    current?: NullableFloatFieldUpdateOperationsInput | number | null
    changePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    open?: NullableFloatFieldUpdateOperationsInput | number | null
    dayLow?: NullableFloatFieldUpdateOperationsInput | number | null
    dayHigh?: NullableFloatFieldUpdateOperationsInput | number | null
    previousClose?: NullableFloatFieldUpdateOperationsInput | number | null
    postMarketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    postMarketChange?: NullableFloatFieldUpdateOperationsInput | number | null
    Stock?: StockUpdateManyWithoutPriceNestedInput
  }

  export type PriceUncheckedUpdateInput = {
    current?: NullableFloatFieldUpdateOperationsInput | number | null
    changePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    open?: NullableFloatFieldUpdateOperationsInput | number | null
    dayLow?: NullableFloatFieldUpdateOperationsInput | number | null
    dayHigh?: NullableFloatFieldUpdateOperationsInput | number | null
    previousClose?: NullableFloatFieldUpdateOperationsInput | number | null
    postMarketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    postMarketChange?: NullableFloatFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
    Stock?: StockUncheckedUpdateManyWithoutPriceNestedInput
  }

  export type PriceCreateManyInput = {
    current?: number | null
    changePercent?: number | null
    open?: number | null
    dayLow?: number | null
    dayHigh?: number | null
    previousClose?: number | null
    postMarketPrice?: number | null
    postMarketChange?: number | null
    id?: number
  }

  export type PriceUpdateManyMutationInput = {
    current?: NullableFloatFieldUpdateOperationsInput | number | null
    changePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    open?: NullableFloatFieldUpdateOperationsInput | number | null
    dayLow?: NullableFloatFieldUpdateOperationsInput | number | null
    dayHigh?: NullableFloatFieldUpdateOperationsInput | number | null
    previousClose?: NullableFloatFieldUpdateOperationsInput | number | null
    postMarketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    postMarketChange?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PriceUncheckedUpdateManyInput = {
    current?: NullableFloatFieldUpdateOperationsInput | number | null
    changePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    open?: NullableFloatFieldUpdateOperationsInput | number | null
    dayLow?: NullableFloatFieldUpdateOperationsInput | number | null
    dayHigh?: NullableFloatFieldUpdateOperationsInput | number | null
    previousClose?: NullableFloatFieldUpdateOperationsInput | number | null
    postMarketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    postMarketChange?: NullableFloatFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type VolumeCreateInput = {
    current?: number | null
    average3Months?: number | null
    average10Days?: number | null
    Stock?: StockCreateNestedManyWithoutVolumeInput
  }

  export type VolumeUncheckedCreateInput = {
    current?: number | null
    average3Months?: number | null
    average10Days?: number | null
    id?: number
    Stock?: StockUncheckedCreateNestedManyWithoutVolumeInput
  }

  export type VolumeUpdateInput = {
    current?: NullableIntFieldUpdateOperationsInput | number | null
    average3Months?: NullableIntFieldUpdateOperationsInput | number | null
    average10Days?: NullableIntFieldUpdateOperationsInput | number | null
    Stock?: StockUpdateManyWithoutVolumeNestedInput
  }

  export type VolumeUncheckedUpdateInput = {
    current?: NullableIntFieldUpdateOperationsInput | number | null
    average3Months?: NullableIntFieldUpdateOperationsInput | number | null
    average10Days?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
    Stock?: StockUncheckedUpdateManyWithoutVolumeNestedInput
  }

  export type VolumeCreateManyInput = {
    current?: number | null
    average3Months?: number | null
    average10Days?: number | null
    id?: number
  }

  export type VolumeUpdateManyMutationInput = {
    current?: NullableIntFieldUpdateOperationsInput | number | null
    average3Months?: NullableIntFieldUpdateOperationsInput | number | null
    average10Days?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type VolumeUncheckedUpdateManyInput = {
    current?: NullableIntFieldUpdateOperationsInput | number | null
    average3Months?: NullableIntFieldUpdateOperationsInput | number | null
    average10Days?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type Week52CreateInput = {
    high?: number | null
    low?: number | null
    changeFromHigh?: number | null
    changeFromLow?: number | null
    Stock?: StockCreateNestedManyWithoutWeek52Input
  }

  export type Week52UncheckedCreateInput = {
    high?: number | null
    low?: number | null
    changeFromHigh?: number | null
    changeFromLow?: number | null
    id?: number
    Stock?: StockUncheckedCreateNestedManyWithoutWeek52Input
  }

  export type Week52UpdateInput = {
    high?: NullableFloatFieldUpdateOperationsInput | number | null
    low?: NullableFloatFieldUpdateOperationsInput | number | null
    changeFromHigh?: NullableFloatFieldUpdateOperationsInput | number | null
    changeFromLow?: NullableFloatFieldUpdateOperationsInput | number | null
    Stock?: StockUpdateManyWithoutWeek52NestedInput
  }

  export type Week52UncheckedUpdateInput = {
    high?: NullableFloatFieldUpdateOperationsInput | number | null
    low?: NullableFloatFieldUpdateOperationsInput | number | null
    changeFromHigh?: NullableFloatFieldUpdateOperationsInput | number | null
    changeFromLow?: NullableFloatFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
    Stock?: StockUncheckedUpdateManyWithoutWeek52NestedInput
  }

  export type Week52CreateManyInput = {
    high?: number | null
    low?: number | null
    changeFromHigh?: number | null
    changeFromLow?: number | null
    id?: number
  }

  export type Week52UpdateManyMutationInput = {
    high?: NullableFloatFieldUpdateOperationsInput | number | null
    low?: NullableFloatFieldUpdateOperationsInput | number | null
    changeFromHigh?: NullableFloatFieldUpdateOperationsInput | number | null
    changeFromLow?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type Week52UncheckedUpdateManyInput = {
    high?: NullableFloatFieldUpdateOperationsInput | number | null
    low?: NullableFloatFieldUpdateOperationsInput | number | null
    changeFromHigh?: NullableFloatFieldUpdateOperationsInput | number | null
    changeFromLow?: NullableFloatFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type DividendCreateInput = {
    rate?: number | null
    yield?: number | null
    date?: Date | string | null
    Stock?: StockCreateNestedManyWithoutDividendInput
  }

  export type DividendUncheckedCreateInput = {
    rate?: number | null
    yield?: number | null
    date?: Date | string | null
    id?: number
    Stock?: StockUncheckedCreateNestedManyWithoutDividendInput
  }

  export type DividendUpdateInput = {
    rate?: NullableFloatFieldUpdateOperationsInput | number | null
    yield?: NullableFloatFieldUpdateOperationsInput | number | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Stock?: StockUpdateManyWithoutDividendNestedInput
  }

  export type DividendUncheckedUpdateInput = {
    rate?: NullableFloatFieldUpdateOperationsInput | number | null
    yield?: NullableFloatFieldUpdateOperationsInput | number | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: IntFieldUpdateOperationsInput | number
    Stock?: StockUncheckedUpdateManyWithoutDividendNestedInput
  }

  export type DividendCreateManyInput = {
    rate?: number | null
    yield?: number | null
    date?: Date | string | null
    id?: number
  }

  export type DividendUpdateManyMutationInput = {
    rate?: NullableFloatFieldUpdateOperationsInput | number | null
    yield?: NullableFloatFieldUpdateOperationsInput | number | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DividendUncheckedUpdateManyInput = {
    rate?: NullableFloatFieldUpdateOperationsInput | number | null
    yield?: NullableFloatFieldUpdateOperationsInput | number | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type EarningsCreateInput = {
    nextDate?: Date | string | null
    epsTrailing12Months?: number | null
    epsForward?: number | null
    peRatio?: number | null
    Stock?: StockCreateNestedManyWithoutEarningsInput
  }

  export type EarningsUncheckedCreateInput = {
    nextDate?: Date | string | null
    epsTrailing12Months?: number | null
    epsForward?: number | null
    peRatio?: number | null
    id?: number
    Stock?: StockUncheckedCreateNestedManyWithoutEarningsInput
  }

  export type EarningsUpdateInput = {
    nextDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    epsTrailing12Months?: NullableFloatFieldUpdateOperationsInput | number | null
    epsForward?: NullableFloatFieldUpdateOperationsInput | number | null
    peRatio?: NullableFloatFieldUpdateOperationsInput | number | null
    Stock?: StockUpdateManyWithoutEarningsNestedInput
  }

  export type EarningsUncheckedUpdateInput = {
    nextDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    epsTrailing12Months?: NullableFloatFieldUpdateOperationsInput | number | null
    epsForward?: NullableFloatFieldUpdateOperationsInput | number | null
    peRatio?: NullableFloatFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
    Stock?: StockUncheckedUpdateManyWithoutEarningsNestedInput
  }

  export type EarningsCreateManyInput = {
    nextDate?: Date | string | null
    epsTrailing12Months?: number | null
    epsForward?: number | null
    peRatio?: number | null
    id?: number
  }

  export type EarningsUpdateManyMutationInput = {
    nextDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    epsTrailing12Months?: NullableFloatFieldUpdateOperationsInput | number | null
    epsForward?: NullableFloatFieldUpdateOperationsInput | number | null
    peRatio?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type EarningsUncheckedUpdateManyInput = {
    nextDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    epsTrailing12Months?: NullableFloatFieldUpdateOperationsInput | number | null
    epsForward?: NullableFloatFieldUpdateOperationsInput | number | null
    peRatio?: NullableFloatFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type FinancialRadiograpNullableScalarRelationFilter = {
    is?: FinancialRadiograpWhereInput | null
    isNot?: FinancialRadiograpWhereInput | null
  }

  export type ProfileNullableScalarRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type CustomizationNullableScalarRelationFilter = {
    is?: CustomizationWhereInput | null
    isNot?: CustomizationWhereInput | null
  }

  export type SupportListRelationFilter = {
    every?: SupportWhereInput
    some?: SupportWhereInput
    none?: SupportWhereInput
  }

  export type WalletListRelationFilter = {
    every?: walletWhereInput
    some?: walletWhereInput
    none?: walletWhereInput
  }

  export type TargetListRelationFilter = {
    every?: TargetWhereInput
    some?: TargetWhereInput
    none?: TargetWhereInput
  }

  export type InvestmentPortfolioNullableScalarRelationFilter = {
    is?: InvestmentPortfolioWhereInput | null
    isNot?: InvestmentPortfolioWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SupportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type walletOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TargetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    avatarUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isEmailVerified?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    avatarUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isEmailVerified?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    password?: SortOrder
    avatarUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isEmailVerified?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TargetCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    progress?: SortOrder
    amount?: SortOrder
    isActive?: SortOrder
    category?: SortOrder
    dateTarget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type TargetAvgOrderByAggregateInput = {
    progress?: SortOrder
    amount?: SortOrder
  }

  export type TargetMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    progress?: SortOrder
    amount?: SortOrder
    isActive?: SortOrder
    category?: SortOrder
    dateTarget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type TargetMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    progress?: SortOrder
    amount?: SortOrder
    isActive?: SortOrder
    category?: SortOrder
    dateTarget?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type TargetSumOrderByAggregateInput = {
    progress?: SortOrder
    amount?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type FinancialRadiograpCountOrderByAggregateInput = {
    id?: SortOrder
    monthlyIncome?: SortOrder
    monthlyExpenses?: SortOrder
    savingCapacity?: SortOrder
    debts?: SortOrder
    savings?: SortOrder
    userId?: SortOrder
  }

  export type FinancialRadiograpAvgOrderByAggregateInput = {
    monthlyIncome?: SortOrder
    monthlyExpenses?: SortOrder
    savingCapacity?: SortOrder
    debts?: SortOrder
    savings?: SortOrder
  }

  export type FinancialRadiograpMaxOrderByAggregateInput = {
    id?: SortOrder
    monthlyIncome?: SortOrder
    monthlyExpenses?: SortOrder
    savingCapacity?: SortOrder
    debts?: SortOrder
    savings?: SortOrder
    userId?: SortOrder
  }

  export type FinancialRadiograpMinOrderByAggregateInput = {
    id?: SortOrder
    monthlyIncome?: SortOrder
    monthlyExpenses?: SortOrder
    savingCapacity?: SortOrder
    debts?: SortOrder
    savings?: SortOrder
    userId?: SortOrder
  }

  export type FinancialRadiograpSumOrderByAggregateInput = {
    monthlyIncome?: SortOrder
    monthlyExpenses?: SortOrder
    savingCapacity?: SortOrder
    debts?: SortOrder
    savings?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type InvestmentListRelationFilter = {
    every?: InvestmentWhereInput
    some?: InvestmentWhereInput
    none?: InvestmentWhereInput
  }

  export type InvestmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvestmentPortfolioCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
  }

  export type InvestmentPortfolioMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
  }

  export type InvestmentPortfolioMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StockNullableScalarRelationFilter = {
    is?: StockWhereInput | null
    isNot?: StockWhereInput | null
  }

  export type FinancialInstrumentNullableScalarRelationFilter = {
    is?: FinancialInstrumentWhereInput | null
    isNot?: FinancialInstrumentWhereInput | null
  }

  export type InvestmentCountOrderByAggregateInput = {
    id?: SortOrder
    amountInvested?: SortOrder
    portfolioId?: SortOrder
    financialInstrumentId?: SortOrder
    stockSymbol?: SortOrder
  }

  export type InvestmentAvgOrderByAggregateInput = {
    amountInvested?: SortOrder
  }

  export type InvestmentMaxOrderByAggregateInput = {
    id?: SortOrder
    amountInvested?: SortOrder
    portfolioId?: SortOrder
    financialInstrumentId?: SortOrder
    stockSymbol?: SortOrder
  }

  export type InvestmentMinOrderByAggregateInput = {
    id?: SortOrder
    amountInvested?: SortOrder
    portfolioId?: SortOrder
    financialInstrumentId?: SortOrder
    stockSymbol?: SortOrder
  }

  export type InvestmentSumOrderByAggregateInput = {
    amountInvested?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumCurrencyTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyType | EnumCurrencyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CurrencyType[] | ListEnumCurrencyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CurrencyType[] | ListEnumCurrencyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyTypeFilter<$PrismaModel> | $Enums.CurrencyType
  }

  export type FinancialInstrumentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    category?: SortOrder
    performance?: SortOrder
    levelRisk?: SortOrder
    deadline?: SortOrder
    currency?: SortOrder
  }

  export type FinancialInstrumentAvgOrderByAggregateInput = {
    performance?: SortOrder
    levelRisk?: SortOrder
    deadline?: SortOrder
  }

  export type FinancialInstrumentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    category?: SortOrder
    performance?: SortOrder
    levelRisk?: SortOrder
    deadline?: SortOrder
    currency?: SortOrder
  }

  export type FinancialInstrumentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    category?: SortOrder
    performance?: SortOrder
    levelRisk?: SortOrder
    deadline?: SortOrder
    currency?: SortOrder
  }

  export type FinancialInstrumentSumOrderByAggregateInput = {
    performance?: SortOrder
    levelRisk?: SortOrder
    deadline?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumCurrencyTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyType | EnumCurrencyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CurrencyType[] | ListEnumCurrencyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CurrencyType[] | ListEnumCurrencyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyTypeWithAggregatesFilter<$PrismaModel> | $Enums.CurrencyType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCurrencyTypeFilter<$PrismaModel>
    _max?: NestedEnumCurrencyTypeFilter<$PrismaModel>
  }

  export type NewsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    source?: SortOrder
    dateNews?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
  }

  export type NewsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    source?: SortOrder
    dateNews?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
  }

  export type NewsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    source?: SortOrder
    dateNews?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
  }

  export type NewsNullableScalarRelationFilter = {
    is?: NewsWhereInput | null
    isNot?: NewsWhereInput | null
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    dateComment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    newsId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    dateComment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    newsId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    dateComment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    newsId?: SortOrder
  }

  export type WalletTransactionListRelationFilter = {
    every?: WalletTransactionWhereInput
    some?: WalletTransactionWhereInput
    none?: WalletTransactionWhereInput
  }

  export type WalletTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type walletCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    balancePesos?: SortOrder
    balanceDollars?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type walletAvgOrderByAggregateInput = {
    balancePesos?: SortOrder
    balanceDollars?: SortOrder
  }

  export type walletMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    balancePesos?: SortOrder
    balanceDollars?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type walletMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    balancePesos?: SortOrder
    balanceDollars?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type walletSumOrderByAggregateInput = {
    balancePesos?: SortOrder
    balanceDollars?: SortOrder
  }

  export type EnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type WalletScalarRelationFilter = {
    is?: walletWhereInput
    isNot?: walletWhereInput
  }

  export type WalletTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    walletId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type WalletTransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type WalletTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    walletId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type WalletTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    walletId?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
  }

  export type WalletTransactionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type AdministradorCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    name?: SortOrder
  }

  export type AdministradorMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    name?: SortOrder
  }

  export type AdministradorMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    name?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type SupportCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SupportMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SupportMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    riskTolerance?: SortOrder
    investmentHorizon?: SortOrder
    financialSkills?: SortOrder
    hasInvestedBefore?: SortOrder
    financialGoal?: SortOrder
    mainGoal?: SortOrder
    monthlyInvestment?: SortOrder
    financialInstrument?: SortOrder
    investmentMethod?: SortOrder
    investmentCategories?: SortOrder
    mainIncomeSource?: SortOrder
    financialNewsSource?: SortOrder
    years?: SortOrder
    investingDuration?: SortOrder
    savingsOrInvestmentReason?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    riskTolerance?: SortOrder
    investmentHorizon?: SortOrder
    financialSkills?: SortOrder
    hasInvestedBefore?: SortOrder
    financialGoal?: SortOrder
    mainGoal?: SortOrder
    monthlyInvestment?: SortOrder
    financialInstrument?: SortOrder
    investmentMethod?: SortOrder
    investmentCategories?: SortOrder
    mainIncomeSource?: SortOrder
    financialNewsSource?: SortOrder
    years?: SortOrder
    investingDuration?: SortOrder
    savingsOrInvestmentReason?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    riskTolerance?: SortOrder
    investmentHorizon?: SortOrder
    financialSkills?: SortOrder
    hasInvestedBefore?: SortOrder
    financialGoal?: SortOrder
    mainGoal?: SortOrder
    monthlyInvestment?: SortOrder
    financialInstrument?: SortOrder
    investmentMethod?: SortOrder
    investmentCategories?: SortOrder
    mainIncomeSource?: SortOrder
    financialNewsSource?: SortOrder
    years?: SortOrder
    investingDuration?: SortOrder
    savingsOrInvestmentReason?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CustomizationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    categories?: SortOrder
    strategy?: SortOrder
    method?: SortOrder
    newsSource?: SortOrder
    instrument?: SortOrder
    age?: SortOrder
    investingYears?: SortOrder
    goal?: SortOrder
    monthlyAmount?: SortOrder
    incomeSource?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomizationAvgOrderByAggregateInput = {
    monthlyAmount?: SortOrder
  }

  export type CustomizationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    categories?: SortOrder
    strategy?: SortOrder
    method?: SortOrder
    newsSource?: SortOrder
    instrument?: SortOrder
    age?: SortOrder
    investingYears?: SortOrder
    goal?: SortOrder
    monthlyAmount?: SortOrder
    incomeSource?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomizationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    categories?: SortOrder
    strategy?: SortOrder
    method?: SortOrder
    newsSource?: SortOrder
    instrument?: SortOrder
    age?: SortOrder
    investingYears?: SortOrder
    goal?: SortOrder
    monthlyAmount?: SortOrder
    incomeSource?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomizationSumOrderByAggregateInput = {
    monthlyAmount?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DividendScalarRelationFilter = {
    is?: DividendWhereInput
    isNot?: DividendWhereInput
  }

  export type EarningsScalarRelationFilter = {
    is?: EarningsWhereInput
    isNot?: EarningsWhereInput
  }

  export type PriceScalarRelationFilter = {
    is?: PriceWhereInput
    isNot?: PriceWhereInput
  }

  export type VolumeScalarRelationFilter = {
    is?: VolumeWhereInput
    isNot?: VolumeWhereInput
  }

  export type Week52ScalarRelationFilter = {
    is?: Week52WhereInput
    isNot?: Week52WhereInput
  }

  export type StockCountOrderByAggregateInput = {
    symbol?: SortOrder
    name?: SortOrder
    typeDisp?: SortOrder
    currency?: SortOrder
    market?: SortOrder
    marketCap?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    priceId?: SortOrder
    volumeId?: SortOrder
    week52Id?: SortOrder
    dividendId?: SortOrder
    earningsId?: SortOrder
  }

  export type StockAvgOrderByAggregateInput = {
    marketCap?: SortOrder
    id?: SortOrder
    priceId?: SortOrder
    volumeId?: SortOrder
    week52Id?: SortOrder
    dividendId?: SortOrder
    earningsId?: SortOrder
  }

  export type StockMaxOrderByAggregateInput = {
    symbol?: SortOrder
    name?: SortOrder
    typeDisp?: SortOrder
    currency?: SortOrder
    market?: SortOrder
    marketCap?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    priceId?: SortOrder
    volumeId?: SortOrder
    week52Id?: SortOrder
    dividendId?: SortOrder
    earningsId?: SortOrder
  }

  export type StockMinOrderByAggregateInput = {
    symbol?: SortOrder
    name?: SortOrder
    typeDisp?: SortOrder
    currency?: SortOrder
    market?: SortOrder
    marketCap?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    priceId?: SortOrder
    volumeId?: SortOrder
    week52Id?: SortOrder
    dividendId?: SortOrder
    earningsId?: SortOrder
  }

  export type StockSumOrderByAggregateInput = {
    marketCap?: SortOrder
    id?: SortOrder
    priceId?: SortOrder
    volumeId?: SortOrder
    week52Id?: SortOrder
    dividendId?: SortOrder
    earningsId?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type StockListRelationFilter = {
    every?: StockWhereInput
    some?: StockWhereInput
    none?: StockWhereInput
  }

  export type StockOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PriceCountOrderByAggregateInput = {
    current?: SortOrder
    changePercent?: SortOrder
    open?: SortOrder
    dayLow?: SortOrder
    dayHigh?: SortOrder
    previousClose?: SortOrder
    postMarketPrice?: SortOrder
    postMarketChange?: SortOrder
    id?: SortOrder
  }

  export type PriceAvgOrderByAggregateInput = {
    current?: SortOrder
    changePercent?: SortOrder
    open?: SortOrder
    dayLow?: SortOrder
    dayHigh?: SortOrder
    previousClose?: SortOrder
    postMarketPrice?: SortOrder
    postMarketChange?: SortOrder
    id?: SortOrder
  }

  export type PriceMaxOrderByAggregateInput = {
    current?: SortOrder
    changePercent?: SortOrder
    open?: SortOrder
    dayLow?: SortOrder
    dayHigh?: SortOrder
    previousClose?: SortOrder
    postMarketPrice?: SortOrder
    postMarketChange?: SortOrder
    id?: SortOrder
  }

  export type PriceMinOrderByAggregateInput = {
    current?: SortOrder
    changePercent?: SortOrder
    open?: SortOrder
    dayLow?: SortOrder
    dayHigh?: SortOrder
    previousClose?: SortOrder
    postMarketPrice?: SortOrder
    postMarketChange?: SortOrder
    id?: SortOrder
  }

  export type PriceSumOrderByAggregateInput = {
    current?: SortOrder
    changePercent?: SortOrder
    open?: SortOrder
    dayLow?: SortOrder
    dayHigh?: SortOrder
    previousClose?: SortOrder
    postMarketPrice?: SortOrder
    postMarketChange?: SortOrder
    id?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type VolumeCountOrderByAggregateInput = {
    current?: SortOrder
    average3Months?: SortOrder
    average10Days?: SortOrder
    id?: SortOrder
  }

  export type VolumeAvgOrderByAggregateInput = {
    current?: SortOrder
    average3Months?: SortOrder
    average10Days?: SortOrder
    id?: SortOrder
  }

  export type VolumeMaxOrderByAggregateInput = {
    current?: SortOrder
    average3Months?: SortOrder
    average10Days?: SortOrder
    id?: SortOrder
  }

  export type VolumeMinOrderByAggregateInput = {
    current?: SortOrder
    average3Months?: SortOrder
    average10Days?: SortOrder
    id?: SortOrder
  }

  export type VolumeSumOrderByAggregateInput = {
    current?: SortOrder
    average3Months?: SortOrder
    average10Days?: SortOrder
    id?: SortOrder
  }

  export type Week52CountOrderByAggregateInput = {
    high?: SortOrder
    low?: SortOrder
    changeFromHigh?: SortOrder
    changeFromLow?: SortOrder
    id?: SortOrder
  }

  export type Week52AvgOrderByAggregateInput = {
    high?: SortOrder
    low?: SortOrder
    changeFromHigh?: SortOrder
    changeFromLow?: SortOrder
    id?: SortOrder
  }

  export type Week52MaxOrderByAggregateInput = {
    high?: SortOrder
    low?: SortOrder
    changeFromHigh?: SortOrder
    changeFromLow?: SortOrder
    id?: SortOrder
  }

  export type Week52MinOrderByAggregateInput = {
    high?: SortOrder
    low?: SortOrder
    changeFromHigh?: SortOrder
    changeFromLow?: SortOrder
    id?: SortOrder
  }

  export type Week52SumOrderByAggregateInput = {
    high?: SortOrder
    low?: SortOrder
    changeFromHigh?: SortOrder
    changeFromLow?: SortOrder
    id?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DividendCountOrderByAggregateInput = {
    rate?: SortOrder
    yield?: SortOrder
    date?: SortOrder
    id?: SortOrder
  }

  export type DividendAvgOrderByAggregateInput = {
    rate?: SortOrder
    yield?: SortOrder
    id?: SortOrder
  }

  export type DividendMaxOrderByAggregateInput = {
    rate?: SortOrder
    yield?: SortOrder
    date?: SortOrder
    id?: SortOrder
  }

  export type DividendMinOrderByAggregateInput = {
    rate?: SortOrder
    yield?: SortOrder
    date?: SortOrder
    id?: SortOrder
  }

  export type DividendSumOrderByAggregateInput = {
    rate?: SortOrder
    yield?: SortOrder
    id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EarningsCountOrderByAggregateInput = {
    nextDate?: SortOrder
    epsTrailing12Months?: SortOrder
    epsForward?: SortOrder
    peRatio?: SortOrder
    id?: SortOrder
  }

  export type EarningsAvgOrderByAggregateInput = {
    epsTrailing12Months?: SortOrder
    epsForward?: SortOrder
    peRatio?: SortOrder
    id?: SortOrder
  }

  export type EarningsMaxOrderByAggregateInput = {
    nextDate?: SortOrder
    epsTrailing12Months?: SortOrder
    epsForward?: SortOrder
    peRatio?: SortOrder
    id?: SortOrder
  }

  export type EarningsMinOrderByAggregateInput = {
    nextDate?: SortOrder
    epsTrailing12Months?: SortOrder
    epsForward?: SortOrder
    peRatio?: SortOrder
    id?: SortOrder
  }

  export type EarningsSumOrderByAggregateInput = {
    epsTrailing12Months?: SortOrder
    epsForward?: SortOrder
    peRatio?: SortOrder
    id?: SortOrder
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type FinancialRadiograpCreateNestedOneWithoutUserInput = {
    create?: XOR<FinancialRadiograpCreateWithoutUserInput, FinancialRadiograpUncheckedCreateWithoutUserInput>
    connectOrCreate?: FinancialRadiograpCreateOrConnectWithoutUserInput
    connect?: FinancialRadiograpWhereUniqueInput
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type CustomizationCreateNestedOneWithoutUserInput = {
    create?: XOR<CustomizationCreateWithoutUserInput, CustomizationUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomizationCreateOrConnectWithoutUserInput
    connect?: CustomizationWhereUniqueInput
  }

  export type SupportCreateNestedManyWithoutUserInput = {
    create?: XOR<SupportCreateWithoutUserInput, SupportUncheckedCreateWithoutUserInput> | SupportCreateWithoutUserInput[] | SupportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SupportCreateOrConnectWithoutUserInput | SupportCreateOrConnectWithoutUserInput[]
    createMany?: SupportCreateManyUserInputEnvelope
    connect?: SupportWhereUniqueInput | SupportWhereUniqueInput[]
  }

  export type walletCreateNestedManyWithoutUserInput = {
    create?: XOR<walletCreateWithoutUserInput, walletUncheckedCreateWithoutUserInput> | walletCreateWithoutUserInput[] | walletUncheckedCreateWithoutUserInput[]
    connectOrCreate?: walletCreateOrConnectWithoutUserInput | walletCreateOrConnectWithoutUserInput[]
    createMany?: walletCreateManyUserInputEnvelope
    connect?: walletWhereUniqueInput | walletWhereUniqueInput[]
  }

  export type TargetCreateNestedManyWithoutUserInput = {
    create?: XOR<TargetCreateWithoutUserInput, TargetUncheckedCreateWithoutUserInput> | TargetCreateWithoutUserInput[] | TargetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TargetCreateOrConnectWithoutUserInput | TargetCreateOrConnectWithoutUserInput[]
    createMany?: TargetCreateManyUserInputEnvelope
    connect?: TargetWhereUniqueInput | TargetWhereUniqueInput[]
  }

  export type InvestmentPortfolioCreateNestedOneWithoutUserInput = {
    create?: XOR<InvestmentPortfolioCreateWithoutUserInput, InvestmentPortfolioUncheckedCreateWithoutUserInput>
    connectOrCreate?: InvestmentPortfolioCreateOrConnectWithoutUserInput
    connect?: InvestmentPortfolioWhereUniqueInput
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type FinancialRadiograpUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<FinancialRadiograpCreateWithoutUserInput, FinancialRadiograpUncheckedCreateWithoutUserInput>
    connectOrCreate?: FinancialRadiograpCreateOrConnectWithoutUserInput
    connect?: FinancialRadiograpWhereUniqueInput
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type CustomizationUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CustomizationCreateWithoutUserInput, CustomizationUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomizationCreateOrConnectWithoutUserInput
    connect?: CustomizationWhereUniqueInput
  }

  export type SupportUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SupportCreateWithoutUserInput, SupportUncheckedCreateWithoutUserInput> | SupportCreateWithoutUserInput[] | SupportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SupportCreateOrConnectWithoutUserInput | SupportCreateOrConnectWithoutUserInput[]
    createMany?: SupportCreateManyUserInputEnvelope
    connect?: SupportWhereUniqueInput | SupportWhereUniqueInput[]
  }

  export type walletUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<walletCreateWithoutUserInput, walletUncheckedCreateWithoutUserInput> | walletCreateWithoutUserInput[] | walletUncheckedCreateWithoutUserInput[]
    connectOrCreate?: walletCreateOrConnectWithoutUserInput | walletCreateOrConnectWithoutUserInput[]
    createMany?: walletCreateManyUserInputEnvelope
    connect?: walletWhereUniqueInput | walletWhereUniqueInput[]
  }

  export type TargetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TargetCreateWithoutUserInput, TargetUncheckedCreateWithoutUserInput> | TargetCreateWithoutUserInput[] | TargetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TargetCreateOrConnectWithoutUserInput | TargetCreateOrConnectWithoutUserInput[]
    createMany?: TargetCreateManyUserInputEnvelope
    connect?: TargetWhereUniqueInput | TargetWhereUniqueInput[]
  }

  export type InvestmentPortfolioUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<InvestmentPortfolioCreateWithoutUserInput, InvestmentPortfolioUncheckedCreateWithoutUserInput>
    connectOrCreate?: InvestmentPortfolioCreateOrConnectWithoutUserInput
    connect?: InvestmentPortfolioWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type FinancialRadiograpUpdateOneWithoutUserNestedInput = {
    create?: XOR<FinancialRadiograpCreateWithoutUserInput, FinancialRadiograpUncheckedCreateWithoutUserInput>
    connectOrCreate?: FinancialRadiograpCreateOrConnectWithoutUserInput
    upsert?: FinancialRadiograpUpsertWithoutUserInput
    disconnect?: FinancialRadiograpWhereInput | boolean
    delete?: FinancialRadiograpWhereInput | boolean
    connect?: FinancialRadiograpWhereUniqueInput
    update?: XOR<XOR<FinancialRadiograpUpdateToOneWithWhereWithoutUserInput, FinancialRadiograpUpdateWithoutUserInput>, FinancialRadiograpUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type CustomizationUpdateOneWithoutUserNestedInput = {
    create?: XOR<CustomizationCreateWithoutUserInput, CustomizationUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomizationCreateOrConnectWithoutUserInput
    upsert?: CustomizationUpsertWithoutUserInput
    disconnect?: CustomizationWhereInput | boolean
    delete?: CustomizationWhereInput | boolean
    connect?: CustomizationWhereUniqueInput
    update?: XOR<XOR<CustomizationUpdateToOneWithWhereWithoutUserInput, CustomizationUpdateWithoutUserInput>, CustomizationUncheckedUpdateWithoutUserInput>
  }

  export type SupportUpdateManyWithoutUserNestedInput = {
    create?: XOR<SupportCreateWithoutUserInput, SupportUncheckedCreateWithoutUserInput> | SupportCreateWithoutUserInput[] | SupportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SupportCreateOrConnectWithoutUserInput | SupportCreateOrConnectWithoutUserInput[]
    upsert?: SupportUpsertWithWhereUniqueWithoutUserInput | SupportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SupportCreateManyUserInputEnvelope
    set?: SupportWhereUniqueInput | SupportWhereUniqueInput[]
    disconnect?: SupportWhereUniqueInput | SupportWhereUniqueInput[]
    delete?: SupportWhereUniqueInput | SupportWhereUniqueInput[]
    connect?: SupportWhereUniqueInput | SupportWhereUniqueInput[]
    update?: SupportUpdateWithWhereUniqueWithoutUserInput | SupportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SupportUpdateManyWithWhereWithoutUserInput | SupportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SupportScalarWhereInput | SupportScalarWhereInput[]
  }

  export type walletUpdateManyWithoutUserNestedInput = {
    create?: XOR<walletCreateWithoutUserInput, walletUncheckedCreateWithoutUserInput> | walletCreateWithoutUserInput[] | walletUncheckedCreateWithoutUserInput[]
    connectOrCreate?: walletCreateOrConnectWithoutUserInput | walletCreateOrConnectWithoutUserInput[]
    upsert?: walletUpsertWithWhereUniqueWithoutUserInput | walletUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: walletCreateManyUserInputEnvelope
    set?: walletWhereUniqueInput | walletWhereUniqueInput[]
    disconnect?: walletWhereUniqueInput | walletWhereUniqueInput[]
    delete?: walletWhereUniqueInput | walletWhereUniqueInput[]
    connect?: walletWhereUniqueInput | walletWhereUniqueInput[]
    update?: walletUpdateWithWhereUniqueWithoutUserInput | walletUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: walletUpdateManyWithWhereWithoutUserInput | walletUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: walletScalarWhereInput | walletScalarWhereInput[]
  }

  export type TargetUpdateManyWithoutUserNestedInput = {
    create?: XOR<TargetCreateWithoutUserInput, TargetUncheckedCreateWithoutUserInput> | TargetCreateWithoutUserInput[] | TargetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TargetCreateOrConnectWithoutUserInput | TargetCreateOrConnectWithoutUserInput[]
    upsert?: TargetUpsertWithWhereUniqueWithoutUserInput | TargetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TargetCreateManyUserInputEnvelope
    set?: TargetWhereUniqueInput | TargetWhereUniqueInput[]
    disconnect?: TargetWhereUniqueInput | TargetWhereUniqueInput[]
    delete?: TargetWhereUniqueInput | TargetWhereUniqueInput[]
    connect?: TargetWhereUniqueInput | TargetWhereUniqueInput[]
    update?: TargetUpdateWithWhereUniqueWithoutUserInput | TargetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TargetUpdateManyWithWhereWithoutUserInput | TargetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TargetScalarWhereInput | TargetScalarWhereInput[]
  }

  export type InvestmentPortfolioUpdateOneWithoutUserNestedInput = {
    create?: XOR<InvestmentPortfolioCreateWithoutUserInput, InvestmentPortfolioUncheckedCreateWithoutUserInput>
    connectOrCreate?: InvestmentPortfolioCreateOrConnectWithoutUserInput
    upsert?: InvestmentPortfolioUpsertWithoutUserInput
    disconnect?: InvestmentPortfolioWhereInput | boolean
    delete?: InvestmentPortfolioWhereInput | boolean
    connect?: InvestmentPortfolioWhereUniqueInput
    update?: XOR<XOR<InvestmentPortfolioUpdateToOneWithWhereWithoutUserInput, InvestmentPortfolioUpdateWithoutUserInput>, InvestmentPortfolioUncheckedUpdateWithoutUserInput>
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type FinancialRadiograpUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<FinancialRadiograpCreateWithoutUserInput, FinancialRadiograpUncheckedCreateWithoutUserInput>
    connectOrCreate?: FinancialRadiograpCreateOrConnectWithoutUserInput
    upsert?: FinancialRadiograpUpsertWithoutUserInput
    disconnect?: FinancialRadiograpWhereInput | boolean
    delete?: FinancialRadiograpWhereInput | boolean
    connect?: FinancialRadiograpWhereUniqueInput
    update?: XOR<XOR<FinancialRadiograpUpdateToOneWithWhereWithoutUserInput, FinancialRadiograpUpdateWithoutUserInput>, FinancialRadiograpUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type CustomizationUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CustomizationCreateWithoutUserInput, CustomizationUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomizationCreateOrConnectWithoutUserInput
    upsert?: CustomizationUpsertWithoutUserInput
    disconnect?: CustomizationWhereInput | boolean
    delete?: CustomizationWhereInput | boolean
    connect?: CustomizationWhereUniqueInput
    update?: XOR<XOR<CustomizationUpdateToOneWithWhereWithoutUserInput, CustomizationUpdateWithoutUserInput>, CustomizationUncheckedUpdateWithoutUserInput>
  }

  export type SupportUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SupportCreateWithoutUserInput, SupportUncheckedCreateWithoutUserInput> | SupportCreateWithoutUserInput[] | SupportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SupportCreateOrConnectWithoutUserInput | SupportCreateOrConnectWithoutUserInput[]
    upsert?: SupportUpsertWithWhereUniqueWithoutUserInput | SupportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SupportCreateManyUserInputEnvelope
    set?: SupportWhereUniqueInput | SupportWhereUniqueInput[]
    disconnect?: SupportWhereUniqueInput | SupportWhereUniqueInput[]
    delete?: SupportWhereUniqueInput | SupportWhereUniqueInput[]
    connect?: SupportWhereUniqueInput | SupportWhereUniqueInput[]
    update?: SupportUpdateWithWhereUniqueWithoutUserInput | SupportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SupportUpdateManyWithWhereWithoutUserInput | SupportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SupportScalarWhereInput | SupportScalarWhereInput[]
  }

  export type walletUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<walletCreateWithoutUserInput, walletUncheckedCreateWithoutUserInput> | walletCreateWithoutUserInput[] | walletUncheckedCreateWithoutUserInput[]
    connectOrCreate?: walletCreateOrConnectWithoutUserInput | walletCreateOrConnectWithoutUserInput[]
    upsert?: walletUpsertWithWhereUniqueWithoutUserInput | walletUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: walletCreateManyUserInputEnvelope
    set?: walletWhereUniqueInput | walletWhereUniqueInput[]
    disconnect?: walletWhereUniqueInput | walletWhereUniqueInput[]
    delete?: walletWhereUniqueInput | walletWhereUniqueInput[]
    connect?: walletWhereUniqueInput | walletWhereUniqueInput[]
    update?: walletUpdateWithWhereUniqueWithoutUserInput | walletUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: walletUpdateManyWithWhereWithoutUserInput | walletUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: walletScalarWhereInput | walletScalarWhereInput[]
  }

  export type TargetUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TargetCreateWithoutUserInput, TargetUncheckedCreateWithoutUserInput> | TargetCreateWithoutUserInput[] | TargetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TargetCreateOrConnectWithoutUserInput | TargetCreateOrConnectWithoutUserInput[]
    upsert?: TargetUpsertWithWhereUniqueWithoutUserInput | TargetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TargetCreateManyUserInputEnvelope
    set?: TargetWhereUniqueInput | TargetWhereUniqueInput[]
    disconnect?: TargetWhereUniqueInput | TargetWhereUniqueInput[]
    delete?: TargetWhereUniqueInput | TargetWhereUniqueInput[]
    connect?: TargetWhereUniqueInput | TargetWhereUniqueInput[]
    update?: TargetUpdateWithWhereUniqueWithoutUserInput | TargetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TargetUpdateManyWithWhereWithoutUserInput | TargetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TargetScalarWhereInput | TargetScalarWhereInput[]
  }

  export type InvestmentPortfolioUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<InvestmentPortfolioCreateWithoutUserInput, InvestmentPortfolioUncheckedCreateWithoutUserInput>
    connectOrCreate?: InvestmentPortfolioCreateOrConnectWithoutUserInput
    upsert?: InvestmentPortfolioUpsertWithoutUserInput
    disconnect?: InvestmentPortfolioWhereInput | boolean
    delete?: InvestmentPortfolioWhereInput | boolean
    connect?: InvestmentPortfolioWhereUniqueInput
    update?: XOR<XOR<InvestmentPortfolioUpdateToOneWithWhereWithoutUserInput, InvestmentPortfolioUpdateWithoutUserInput>, InvestmentPortfolioUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutTargetInput = {
    create?: XOR<UserCreateWithoutTargetInput, UserUncheckedCreateWithoutTargetInput>
    connectOrCreate?: UserCreateOrConnectWithoutTargetInput
    connect?: UserWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UserUpdateOneRequiredWithoutTargetNestedInput = {
    create?: XOR<UserCreateWithoutTargetInput, UserUncheckedCreateWithoutTargetInput>
    connectOrCreate?: UserCreateOrConnectWithoutTargetInput
    upsert?: UserUpsertWithoutTargetInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTargetInput, UserUpdateWithoutTargetInput>, UserUncheckedUpdateWithoutTargetInput>
  }

  export type UserCreateNestedOneWithoutFinancialRadiographiesInput = {
    create?: XOR<UserCreateWithoutFinancialRadiographiesInput, UserUncheckedCreateWithoutFinancialRadiographiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFinancialRadiographiesInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UserUpdateOneWithoutFinancialRadiographiesNestedInput = {
    create?: XOR<UserCreateWithoutFinancialRadiographiesInput, UserUncheckedCreateWithoutFinancialRadiographiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFinancialRadiographiesInput
    upsert?: UserUpsertWithoutFinancialRadiographiesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFinancialRadiographiesInput, UserUpdateWithoutFinancialRadiographiesInput>, UserUncheckedUpdateWithoutFinancialRadiographiesInput>
  }

  export type UserCreateNestedOneWithoutInvestmentPortfolioInput = {
    create?: XOR<UserCreateWithoutInvestmentPortfolioInput, UserUncheckedCreateWithoutInvestmentPortfolioInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvestmentPortfolioInput
    connect?: UserWhereUniqueInput
  }

  export type InvestmentCreateNestedManyWithoutPortfolioInput = {
    create?: XOR<InvestmentCreateWithoutPortfolioInput, InvestmentUncheckedCreateWithoutPortfolioInput> | InvestmentCreateWithoutPortfolioInput[] | InvestmentUncheckedCreateWithoutPortfolioInput[]
    connectOrCreate?: InvestmentCreateOrConnectWithoutPortfolioInput | InvestmentCreateOrConnectWithoutPortfolioInput[]
    createMany?: InvestmentCreateManyPortfolioInputEnvelope
    connect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
  }

  export type InvestmentUncheckedCreateNestedManyWithoutPortfolioInput = {
    create?: XOR<InvestmentCreateWithoutPortfolioInput, InvestmentUncheckedCreateWithoutPortfolioInput> | InvestmentCreateWithoutPortfolioInput[] | InvestmentUncheckedCreateWithoutPortfolioInput[]
    connectOrCreate?: InvestmentCreateOrConnectWithoutPortfolioInput | InvestmentCreateOrConnectWithoutPortfolioInput[]
    createMany?: InvestmentCreateManyPortfolioInputEnvelope
    connect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutInvestmentPortfolioNestedInput = {
    create?: XOR<UserCreateWithoutInvestmentPortfolioInput, UserUncheckedCreateWithoutInvestmentPortfolioInput>
    connectOrCreate?: UserCreateOrConnectWithoutInvestmentPortfolioInput
    upsert?: UserUpsertWithoutInvestmentPortfolioInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInvestmentPortfolioInput, UserUpdateWithoutInvestmentPortfolioInput>, UserUncheckedUpdateWithoutInvestmentPortfolioInput>
  }

  export type InvestmentUpdateManyWithoutPortfolioNestedInput = {
    create?: XOR<InvestmentCreateWithoutPortfolioInput, InvestmentUncheckedCreateWithoutPortfolioInput> | InvestmentCreateWithoutPortfolioInput[] | InvestmentUncheckedCreateWithoutPortfolioInput[]
    connectOrCreate?: InvestmentCreateOrConnectWithoutPortfolioInput | InvestmentCreateOrConnectWithoutPortfolioInput[]
    upsert?: InvestmentUpsertWithWhereUniqueWithoutPortfolioInput | InvestmentUpsertWithWhereUniqueWithoutPortfolioInput[]
    createMany?: InvestmentCreateManyPortfolioInputEnvelope
    set?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    disconnect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    delete?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    connect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    update?: InvestmentUpdateWithWhereUniqueWithoutPortfolioInput | InvestmentUpdateWithWhereUniqueWithoutPortfolioInput[]
    updateMany?: InvestmentUpdateManyWithWhereWithoutPortfolioInput | InvestmentUpdateManyWithWhereWithoutPortfolioInput[]
    deleteMany?: InvestmentScalarWhereInput | InvestmentScalarWhereInput[]
  }

  export type InvestmentUncheckedUpdateManyWithoutPortfolioNestedInput = {
    create?: XOR<InvestmentCreateWithoutPortfolioInput, InvestmentUncheckedCreateWithoutPortfolioInput> | InvestmentCreateWithoutPortfolioInput[] | InvestmentUncheckedCreateWithoutPortfolioInput[]
    connectOrCreate?: InvestmentCreateOrConnectWithoutPortfolioInput | InvestmentCreateOrConnectWithoutPortfolioInput[]
    upsert?: InvestmentUpsertWithWhereUniqueWithoutPortfolioInput | InvestmentUpsertWithWhereUniqueWithoutPortfolioInput[]
    createMany?: InvestmentCreateManyPortfolioInputEnvelope
    set?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    disconnect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    delete?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    connect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    update?: InvestmentUpdateWithWhereUniqueWithoutPortfolioInput | InvestmentUpdateWithWhereUniqueWithoutPortfolioInput[]
    updateMany?: InvestmentUpdateManyWithWhereWithoutPortfolioInput | InvestmentUpdateManyWithWhereWithoutPortfolioInput[]
    deleteMany?: InvestmentScalarWhereInput | InvestmentScalarWhereInput[]
  }

  export type StockCreateNestedOneWithoutInvestmentInput = {
    create?: XOR<StockCreateWithoutInvestmentInput, StockUncheckedCreateWithoutInvestmentInput>
    connectOrCreate?: StockCreateOrConnectWithoutInvestmentInput
    connect?: StockWhereUniqueInput
  }

  export type InvestmentPortfolioCreateNestedOneWithoutInvestmentsInput = {
    create?: XOR<InvestmentPortfolioCreateWithoutInvestmentsInput, InvestmentPortfolioUncheckedCreateWithoutInvestmentsInput>
    connectOrCreate?: InvestmentPortfolioCreateOrConnectWithoutInvestmentsInput
    connect?: InvestmentPortfolioWhereUniqueInput
  }

  export type FinancialInstrumentCreateNestedOneWithoutInvestmentsInput = {
    create?: XOR<FinancialInstrumentCreateWithoutInvestmentsInput, FinancialInstrumentUncheckedCreateWithoutInvestmentsInput>
    connectOrCreate?: FinancialInstrumentCreateOrConnectWithoutInvestmentsInput
    connect?: FinancialInstrumentWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StockUpdateOneWithoutInvestmentNestedInput = {
    create?: XOR<StockCreateWithoutInvestmentInput, StockUncheckedCreateWithoutInvestmentInput>
    connectOrCreate?: StockCreateOrConnectWithoutInvestmentInput
    upsert?: StockUpsertWithoutInvestmentInput
    disconnect?: StockWhereInput | boolean
    delete?: StockWhereInput | boolean
    connect?: StockWhereUniqueInput
    update?: XOR<XOR<StockUpdateToOneWithWhereWithoutInvestmentInput, StockUpdateWithoutInvestmentInput>, StockUncheckedUpdateWithoutInvestmentInput>
  }

  export type InvestmentPortfolioUpdateOneWithoutInvestmentsNestedInput = {
    create?: XOR<InvestmentPortfolioCreateWithoutInvestmentsInput, InvestmentPortfolioUncheckedCreateWithoutInvestmentsInput>
    connectOrCreate?: InvestmentPortfolioCreateOrConnectWithoutInvestmentsInput
    upsert?: InvestmentPortfolioUpsertWithoutInvestmentsInput
    disconnect?: InvestmentPortfolioWhereInput | boolean
    delete?: InvestmentPortfolioWhereInput | boolean
    connect?: InvestmentPortfolioWhereUniqueInput
    update?: XOR<XOR<InvestmentPortfolioUpdateToOneWithWhereWithoutInvestmentsInput, InvestmentPortfolioUpdateWithoutInvestmentsInput>, InvestmentPortfolioUncheckedUpdateWithoutInvestmentsInput>
  }

  export type FinancialInstrumentUpdateOneWithoutInvestmentsNestedInput = {
    create?: XOR<FinancialInstrumentCreateWithoutInvestmentsInput, FinancialInstrumentUncheckedCreateWithoutInvestmentsInput>
    connectOrCreate?: FinancialInstrumentCreateOrConnectWithoutInvestmentsInput
    upsert?: FinancialInstrumentUpsertWithoutInvestmentsInput
    disconnect?: FinancialInstrumentWhereInput | boolean
    delete?: FinancialInstrumentWhereInput | boolean
    connect?: FinancialInstrumentWhereUniqueInput
    update?: XOR<XOR<FinancialInstrumentUpdateToOneWithWhereWithoutInvestmentsInput, FinancialInstrumentUpdateWithoutInvestmentsInput>, FinancialInstrumentUncheckedUpdateWithoutInvestmentsInput>
  }

  export type InvestmentCreateNestedManyWithoutFinancialInstrumentInput = {
    create?: XOR<InvestmentCreateWithoutFinancialInstrumentInput, InvestmentUncheckedCreateWithoutFinancialInstrumentInput> | InvestmentCreateWithoutFinancialInstrumentInput[] | InvestmentUncheckedCreateWithoutFinancialInstrumentInput[]
    connectOrCreate?: InvestmentCreateOrConnectWithoutFinancialInstrumentInput | InvestmentCreateOrConnectWithoutFinancialInstrumentInput[]
    createMany?: InvestmentCreateManyFinancialInstrumentInputEnvelope
    connect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
  }

  export type InvestmentUncheckedCreateNestedManyWithoutFinancialInstrumentInput = {
    create?: XOR<InvestmentCreateWithoutFinancialInstrumentInput, InvestmentUncheckedCreateWithoutFinancialInstrumentInput> | InvestmentCreateWithoutFinancialInstrumentInput[] | InvestmentUncheckedCreateWithoutFinancialInstrumentInput[]
    connectOrCreate?: InvestmentCreateOrConnectWithoutFinancialInstrumentInput | InvestmentCreateOrConnectWithoutFinancialInstrumentInput[]
    createMany?: InvestmentCreateManyFinancialInstrumentInputEnvelope
    connect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumCurrencyTypeFieldUpdateOperationsInput = {
    set?: $Enums.CurrencyType
  }

  export type InvestmentUpdateManyWithoutFinancialInstrumentNestedInput = {
    create?: XOR<InvestmentCreateWithoutFinancialInstrumentInput, InvestmentUncheckedCreateWithoutFinancialInstrumentInput> | InvestmentCreateWithoutFinancialInstrumentInput[] | InvestmentUncheckedCreateWithoutFinancialInstrumentInput[]
    connectOrCreate?: InvestmentCreateOrConnectWithoutFinancialInstrumentInput | InvestmentCreateOrConnectWithoutFinancialInstrumentInput[]
    upsert?: InvestmentUpsertWithWhereUniqueWithoutFinancialInstrumentInput | InvestmentUpsertWithWhereUniqueWithoutFinancialInstrumentInput[]
    createMany?: InvestmentCreateManyFinancialInstrumentInputEnvelope
    set?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    disconnect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    delete?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    connect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    update?: InvestmentUpdateWithWhereUniqueWithoutFinancialInstrumentInput | InvestmentUpdateWithWhereUniqueWithoutFinancialInstrumentInput[]
    updateMany?: InvestmentUpdateManyWithWhereWithoutFinancialInstrumentInput | InvestmentUpdateManyWithWhereWithoutFinancialInstrumentInput[]
    deleteMany?: InvestmentScalarWhereInput | InvestmentScalarWhereInput[]
  }

  export type InvestmentUncheckedUpdateManyWithoutFinancialInstrumentNestedInput = {
    create?: XOR<InvestmentCreateWithoutFinancialInstrumentInput, InvestmentUncheckedCreateWithoutFinancialInstrumentInput> | InvestmentCreateWithoutFinancialInstrumentInput[] | InvestmentUncheckedCreateWithoutFinancialInstrumentInput[]
    connectOrCreate?: InvestmentCreateOrConnectWithoutFinancialInstrumentInput | InvestmentCreateOrConnectWithoutFinancialInstrumentInput[]
    upsert?: InvestmentUpsertWithWhereUniqueWithoutFinancialInstrumentInput | InvestmentUpsertWithWhereUniqueWithoutFinancialInstrumentInput[]
    createMany?: InvestmentCreateManyFinancialInstrumentInputEnvelope
    set?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    disconnect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    delete?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    connect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    update?: InvestmentUpdateWithWhereUniqueWithoutFinancialInstrumentInput | InvestmentUpdateWithWhereUniqueWithoutFinancialInstrumentInput[]
    updateMany?: InvestmentUpdateManyWithWhereWithoutFinancialInstrumentInput | InvestmentUpdateManyWithWhereWithoutFinancialInstrumentInput[]
    deleteMany?: InvestmentScalarWhereInput | InvestmentScalarWhereInput[]
  }

  export type CommentCreateNestedManyWithoutNewsInput = {
    create?: XOR<CommentCreateWithoutNewsInput, CommentUncheckedCreateWithoutNewsInput> | CommentCreateWithoutNewsInput[] | CommentUncheckedCreateWithoutNewsInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutNewsInput | CommentCreateOrConnectWithoutNewsInput[]
    createMany?: CommentCreateManyNewsInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutNewsInput = {
    create?: XOR<CommentCreateWithoutNewsInput, CommentUncheckedCreateWithoutNewsInput> | CommentCreateWithoutNewsInput[] | CommentUncheckedCreateWithoutNewsInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutNewsInput | CommentCreateOrConnectWithoutNewsInput[]
    createMany?: CommentCreateManyNewsInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CommentUpdateManyWithoutNewsNestedInput = {
    create?: XOR<CommentCreateWithoutNewsInput, CommentUncheckedCreateWithoutNewsInput> | CommentCreateWithoutNewsInput[] | CommentUncheckedCreateWithoutNewsInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutNewsInput | CommentCreateOrConnectWithoutNewsInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutNewsInput | CommentUpsertWithWhereUniqueWithoutNewsInput[]
    createMany?: CommentCreateManyNewsInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutNewsInput | CommentUpdateWithWhereUniqueWithoutNewsInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutNewsInput | CommentUpdateManyWithWhereWithoutNewsInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutNewsNestedInput = {
    create?: XOR<CommentCreateWithoutNewsInput, CommentUncheckedCreateWithoutNewsInput> | CommentCreateWithoutNewsInput[] | CommentUncheckedCreateWithoutNewsInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutNewsInput | CommentCreateOrConnectWithoutNewsInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutNewsInput | CommentUpsertWithWhereUniqueWithoutNewsInput[]
    createMany?: CommentCreateManyNewsInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutNewsInput | CommentUpdateWithWhereUniqueWithoutNewsInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutNewsInput | CommentUpdateManyWithWhereWithoutNewsInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type NewsCreateNestedOneWithoutCommentInput = {
    create?: XOR<NewsCreateWithoutCommentInput, NewsUncheckedCreateWithoutCommentInput>
    connectOrCreate?: NewsCreateOrConnectWithoutCommentInput
    connect?: NewsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommentInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    connect?: UserWhereUniqueInput
  }

  export type NewsUpdateOneWithoutCommentNestedInput = {
    create?: XOR<NewsCreateWithoutCommentInput, NewsUncheckedCreateWithoutCommentInput>
    connectOrCreate?: NewsCreateOrConnectWithoutCommentInput
    upsert?: NewsUpsertWithoutCommentInput
    disconnect?: NewsWhereInput | boolean
    delete?: NewsWhereInput | boolean
    connect?: NewsWhereUniqueInput
    update?: XOR<XOR<NewsUpdateToOneWithWhereWithoutCommentInput, NewsUpdateWithoutCommentInput>, NewsUncheckedUpdateWithoutCommentInput>
  }

  export type UserUpdateOneWithoutCommentNestedInput = {
    create?: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentInput
    upsert?: UserUpsertWithoutCommentInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentInput, UserUpdateWithoutCommentInput>, UserUncheckedUpdateWithoutCommentInput>
  }

  export type WalletTransactionCreateNestedManyWithoutWalletInput = {
    create?: XOR<WalletTransactionCreateWithoutWalletInput, WalletTransactionUncheckedCreateWithoutWalletInput> | WalletTransactionCreateWithoutWalletInput[] | WalletTransactionUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutWalletInput | WalletTransactionCreateOrConnectWithoutWalletInput[]
    createMany?: WalletTransactionCreateManyWalletInputEnvelope
    connect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutWalletInput = {
    create?: XOR<UserCreateWithoutWalletInput, UserUncheckedCreateWithoutWalletInput>
    connectOrCreate?: UserCreateOrConnectWithoutWalletInput
    connect?: UserWhereUniqueInput
  }

  export type WalletTransactionUncheckedCreateNestedManyWithoutWalletInput = {
    create?: XOR<WalletTransactionCreateWithoutWalletInput, WalletTransactionUncheckedCreateWithoutWalletInput> | WalletTransactionCreateWithoutWalletInput[] | WalletTransactionUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutWalletInput | WalletTransactionCreateOrConnectWithoutWalletInput[]
    createMany?: WalletTransactionCreateManyWalletInputEnvelope
    connect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
  }

  export type WalletTransactionUpdateManyWithoutWalletNestedInput = {
    create?: XOR<WalletTransactionCreateWithoutWalletInput, WalletTransactionUncheckedCreateWithoutWalletInput> | WalletTransactionCreateWithoutWalletInput[] | WalletTransactionUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutWalletInput | WalletTransactionCreateOrConnectWithoutWalletInput[]
    upsert?: WalletTransactionUpsertWithWhereUniqueWithoutWalletInput | WalletTransactionUpsertWithWhereUniqueWithoutWalletInput[]
    createMany?: WalletTransactionCreateManyWalletInputEnvelope
    set?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    disconnect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    delete?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    connect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    update?: WalletTransactionUpdateWithWhereUniqueWithoutWalletInput | WalletTransactionUpdateWithWhereUniqueWithoutWalletInput[]
    updateMany?: WalletTransactionUpdateManyWithWhereWithoutWalletInput | WalletTransactionUpdateManyWithWhereWithoutWalletInput[]
    deleteMany?: WalletTransactionScalarWhereInput | WalletTransactionScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutWalletNestedInput = {
    create?: XOR<UserCreateWithoutWalletInput, UserUncheckedCreateWithoutWalletInput>
    connectOrCreate?: UserCreateOrConnectWithoutWalletInput
    upsert?: UserUpsertWithoutWalletInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWalletInput, UserUpdateWithoutWalletInput>, UserUncheckedUpdateWithoutWalletInput>
  }

  export type WalletTransactionUncheckedUpdateManyWithoutWalletNestedInput = {
    create?: XOR<WalletTransactionCreateWithoutWalletInput, WalletTransactionUncheckedCreateWithoutWalletInput> | WalletTransactionCreateWithoutWalletInput[] | WalletTransactionUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: WalletTransactionCreateOrConnectWithoutWalletInput | WalletTransactionCreateOrConnectWithoutWalletInput[]
    upsert?: WalletTransactionUpsertWithWhereUniqueWithoutWalletInput | WalletTransactionUpsertWithWhereUniqueWithoutWalletInput[]
    createMany?: WalletTransactionCreateManyWalletInputEnvelope
    set?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    disconnect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    delete?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    connect?: WalletTransactionWhereUniqueInput | WalletTransactionWhereUniqueInput[]
    update?: WalletTransactionUpdateWithWhereUniqueWithoutWalletInput | WalletTransactionUpdateWithWhereUniqueWithoutWalletInput[]
    updateMany?: WalletTransactionUpdateManyWithWhereWithoutWalletInput | WalletTransactionUpdateManyWithWhereWithoutWalletInput[]
    deleteMany?: WalletTransactionScalarWhereInput | WalletTransactionScalarWhereInput[]
  }

  export type walletCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<walletCreateWithoutTransactionsInput, walletUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: walletCreateOrConnectWithoutTransactionsInput
    connect?: walletWhereUniqueInput
  }

  export type EnumTransactionTypeFieldUpdateOperationsInput = {
    set?: $Enums.TransactionType
  }

  export type walletUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<walletCreateWithoutTransactionsInput, walletUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: walletCreateOrConnectWithoutTransactionsInput
    upsert?: walletUpsertWithoutTransactionsInput
    connect?: walletWhereUniqueInput
    update?: XOR<XOR<walletUpdateToOneWithWhereWithoutTransactionsInput, walletUpdateWithoutTransactionsInput>, walletUncheckedUpdateWithoutTransactionsInput>
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type UserCreateNestedOneWithoutSupportInput = {
    create?: XOR<UserCreateWithoutSupportInput, UserUncheckedCreateWithoutSupportInput>
    connectOrCreate?: UserCreateOrConnectWithoutSupportInput
    connect?: UserWhereUniqueInput
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type UserUpdateOneRequiredWithoutSupportNestedInput = {
    create?: XOR<UserCreateWithoutSupportInput, UserUncheckedCreateWithoutSupportInput>
    connectOrCreate?: UserCreateOrConnectWithoutSupportInput
    upsert?: UserUpsertWithoutSupportInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSupportInput, UserUpdateWithoutSupportInput>, UserUncheckedUpdateWithoutSupportInput>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserCreateNestedOneWithoutCustomizationInput = {
    create?: XOR<UserCreateWithoutCustomizationInput, UserUncheckedCreateWithoutCustomizationInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomizationInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutCustomizationNestedInput = {
    create?: XOR<UserCreateWithoutCustomizationInput, UserUncheckedCreateWithoutCustomizationInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomizationInput
    upsert?: UserUpsertWithoutCustomizationInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCustomizationInput, UserUpdateWithoutCustomizationInput>, UserUncheckedUpdateWithoutCustomizationInput>
  }

  export type DividendCreateNestedOneWithoutStockInput = {
    create?: XOR<DividendCreateWithoutStockInput, DividendUncheckedCreateWithoutStockInput>
    connectOrCreate?: DividendCreateOrConnectWithoutStockInput
    connect?: DividendWhereUniqueInput
  }

  export type EarningsCreateNestedOneWithoutStockInput = {
    create?: XOR<EarningsCreateWithoutStockInput, EarningsUncheckedCreateWithoutStockInput>
    connectOrCreate?: EarningsCreateOrConnectWithoutStockInput
    connect?: EarningsWhereUniqueInput
  }

  export type PriceCreateNestedOneWithoutStockInput = {
    create?: XOR<PriceCreateWithoutStockInput, PriceUncheckedCreateWithoutStockInput>
    connectOrCreate?: PriceCreateOrConnectWithoutStockInput
    connect?: PriceWhereUniqueInput
  }

  export type VolumeCreateNestedOneWithoutStockInput = {
    create?: XOR<VolumeCreateWithoutStockInput, VolumeUncheckedCreateWithoutStockInput>
    connectOrCreate?: VolumeCreateOrConnectWithoutStockInput
    connect?: VolumeWhereUniqueInput
  }

  export type Week52CreateNestedOneWithoutStockInput = {
    create?: XOR<Week52CreateWithoutStockInput, Week52UncheckedCreateWithoutStockInput>
    connectOrCreate?: Week52CreateOrConnectWithoutStockInput
    connect?: Week52WhereUniqueInput
  }

  export type InvestmentCreateNestedManyWithoutStockInput = {
    create?: XOR<InvestmentCreateWithoutStockInput, InvestmentUncheckedCreateWithoutStockInput> | InvestmentCreateWithoutStockInput[] | InvestmentUncheckedCreateWithoutStockInput[]
    connectOrCreate?: InvestmentCreateOrConnectWithoutStockInput | InvestmentCreateOrConnectWithoutStockInput[]
    createMany?: InvestmentCreateManyStockInputEnvelope
    connect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
  }

  export type InvestmentUncheckedCreateNestedManyWithoutStockInput = {
    create?: XOR<InvestmentCreateWithoutStockInput, InvestmentUncheckedCreateWithoutStockInput> | InvestmentCreateWithoutStockInput[] | InvestmentUncheckedCreateWithoutStockInput[]
    connectOrCreate?: InvestmentCreateOrConnectWithoutStockInput | InvestmentCreateOrConnectWithoutStockInput[]
    createMany?: InvestmentCreateManyStockInputEnvelope
    connect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
  }

  export type DividendUpdateOneRequiredWithoutStockNestedInput = {
    create?: XOR<DividendCreateWithoutStockInput, DividendUncheckedCreateWithoutStockInput>
    connectOrCreate?: DividendCreateOrConnectWithoutStockInput
    upsert?: DividendUpsertWithoutStockInput
    connect?: DividendWhereUniqueInput
    update?: XOR<XOR<DividendUpdateToOneWithWhereWithoutStockInput, DividendUpdateWithoutStockInput>, DividendUncheckedUpdateWithoutStockInput>
  }

  export type EarningsUpdateOneRequiredWithoutStockNestedInput = {
    create?: XOR<EarningsCreateWithoutStockInput, EarningsUncheckedCreateWithoutStockInput>
    connectOrCreate?: EarningsCreateOrConnectWithoutStockInput
    upsert?: EarningsUpsertWithoutStockInput
    connect?: EarningsWhereUniqueInput
    update?: XOR<XOR<EarningsUpdateToOneWithWhereWithoutStockInput, EarningsUpdateWithoutStockInput>, EarningsUncheckedUpdateWithoutStockInput>
  }

  export type PriceUpdateOneRequiredWithoutStockNestedInput = {
    create?: XOR<PriceCreateWithoutStockInput, PriceUncheckedCreateWithoutStockInput>
    connectOrCreate?: PriceCreateOrConnectWithoutStockInput
    upsert?: PriceUpsertWithoutStockInput
    connect?: PriceWhereUniqueInput
    update?: XOR<XOR<PriceUpdateToOneWithWhereWithoutStockInput, PriceUpdateWithoutStockInput>, PriceUncheckedUpdateWithoutStockInput>
  }

  export type VolumeUpdateOneRequiredWithoutStockNestedInput = {
    create?: XOR<VolumeCreateWithoutStockInput, VolumeUncheckedCreateWithoutStockInput>
    connectOrCreate?: VolumeCreateOrConnectWithoutStockInput
    upsert?: VolumeUpsertWithoutStockInput
    connect?: VolumeWhereUniqueInput
    update?: XOR<XOR<VolumeUpdateToOneWithWhereWithoutStockInput, VolumeUpdateWithoutStockInput>, VolumeUncheckedUpdateWithoutStockInput>
  }

  export type Week52UpdateOneRequiredWithoutStockNestedInput = {
    create?: XOR<Week52CreateWithoutStockInput, Week52UncheckedCreateWithoutStockInput>
    connectOrCreate?: Week52CreateOrConnectWithoutStockInput
    upsert?: Week52UpsertWithoutStockInput
    connect?: Week52WhereUniqueInput
    update?: XOR<XOR<Week52UpdateToOneWithWhereWithoutStockInput, Week52UpdateWithoutStockInput>, Week52UncheckedUpdateWithoutStockInput>
  }

  export type InvestmentUpdateManyWithoutStockNestedInput = {
    create?: XOR<InvestmentCreateWithoutStockInput, InvestmentUncheckedCreateWithoutStockInput> | InvestmentCreateWithoutStockInput[] | InvestmentUncheckedCreateWithoutStockInput[]
    connectOrCreate?: InvestmentCreateOrConnectWithoutStockInput | InvestmentCreateOrConnectWithoutStockInput[]
    upsert?: InvestmentUpsertWithWhereUniqueWithoutStockInput | InvestmentUpsertWithWhereUniqueWithoutStockInput[]
    createMany?: InvestmentCreateManyStockInputEnvelope
    set?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    disconnect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    delete?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    connect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    update?: InvestmentUpdateWithWhereUniqueWithoutStockInput | InvestmentUpdateWithWhereUniqueWithoutStockInput[]
    updateMany?: InvestmentUpdateManyWithWhereWithoutStockInput | InvestmentUpdateManyWithWhereWithoutStockInput[]
    deleteMany?: InvestmentScalarWhereInput | InvestmentScalarWhereInput[]
  }

  export type InvestmentUncheckedUpdateManyWithoutStockNestedInput = {
    create?: XOR<InvestmentCreateWithoutStockInput, InvestmentUncheckedCreateWithoutStockInput> | InvestmentCreateWithoutStockInput[] | InvestmentUncheckedCreateWithoutStockInput[]
    connectOrCreate?: InvestmentCreateOrConnectWithoutStockInput | InvestmentCreateOrConnectWithoutStockInput[]
    upsert?: InvestmentUpsertWithWhereUniqueWithoutStockInput | InvestmentUpsertWithWhereUniqueWithoutStockInput[]
    createMany?: InvestmentCreateManyStockInputEnvelope
    set?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    disconnect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    delete?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    connect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    update?: InvestmentUpdateWithWhereUniqueWithoutStockInput | InvestmentUpdateWithWhereUniqueWithoutStockInput[]
    updateMany?: InvestmentUpdateManyWithWhereWithoutStockInput | InvestmentUpdateManyWithWhereWithoutStockInput[]
    deleteMany?: InvestmentScalarWhereInput | InvestmentScalarWhereInput[]
  }

  export type StockCreateNestedManyWithoutPriceInput = {
    create?: XOR<StockCreateWithoutPriceInput, StockUncheckedCreateWithoutPriceInput> | StockCreateWithoutPriceInput[] | StockUncheckedCreateWithoutPriceInput[]
    connectOrCreate?: StockCreateOrConnectWithoutPriceInput | StockCreateOrConnectWithoutPriceInput[]
    createMany?: StockCreateManyPriceInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type StockUncheckedCreateNestedManyWithoutPriceInput = {
    create?: XOR<StockCreateWithoutPriceInput, StockUncheckedCreateWithoutPriceInput> | StockCreateWithoutPriceInput[] | StockUncheckedCreateWithoutPriceInput[]
    connectOrCreate?: StockCreateOrConnectWithoutPriceInput | StockCreateOrConnectWithoutPriceInput[]
    createMany?: StockCreateManyPriceInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StockUpdateManyWithoutPriceNestedInput = {
    create?: XOR<StockCreateWithoutPriceInput, StockUncheckedCreateWithoutPriceInput> | StockCreateWithoutPriceInput[] | StockUncheckedCreateWithoutPriceInput[]
    connectOrCreate?: StockCreateOrConnectWithoutPriceInput | StockCreateOrConnectWithoutPriceInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutPriceInput | StockUpsertWithWhereUniqueWithoutPriceInput[]
    createMany?: StockCreateManyPriceInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutPriceInput | StockUpdateWithWhereUniqueWithoutPriceInput[]
    updateMany?: StockUpdateManyWithWhereWithoutPriceInput | StockUpdateManyWithWhereWithoutPriceInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type StockUncheckedUpdateManyWithoutPriceNestedInput = {
    create?: XOR<StockCreateWithoutPriceInput, StockUncheckedCreateWithoutPriceInput> | StockCreateWithoutPriceInput[] | StockUncheckedCreateWithoutPriceInput[]
    connectOrCreate?: StockCreateOrConnectWithoutPriceInput | StockCreateOrConnectWithoutPriceInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutPriceInput | StockUpsertWithWhereUniqueWithoutPriceInput[]
    createMany?: StockCreateManyPriceInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutPriceInput | StockUpdateWithWhereUniqueWithoutPriceInput[]
    updateMany?: StockUpdateManyWithWhereWithoutPriceInput | StockUpdateManyWithWhereWithoutPriceInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type StockCreateNestedManyWithoutVolumeInput = {
    create?: XOR<StockCreateWithoutVolumeInput, StockUncheckedCreateWithoutVolumeInput> | StockCreateWithoutVolumeInput[] | StockUncheckedCreateWithoutVolumeInput[]
    connectOrCreate?: StockCreateOrConnectWithoutVolumeInput | StockCreateOrConnectWithoutVolumeInput[]
    createMany?: StockCreateManyVolumeInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type StockUncheckedCreateNestedManyWithoutVolumeInput = {
    create?: XOR<StockCreateWithoutVolumeInput, StockUncheckedCreateWithoutVolumeInput> | StockCreateWithoutVolumeInput[] | StockUncheckedCreateWithoutVolumeInput[]
    connectOrCreate?: StockCreateOrConnectWithoutVolumeInput | StockCreateOrConnectWithoutVolumeInput[]
    createMany?: StockCreateManyVolumeInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type StockUpdateManyWithoutVolumeNestedInput = {
    create?: XOR<StockCreateWithoutVolumeInput, StockUncheckedCreateWithoutVolumeInput> | StockCreateWithoutVolumeInput[] | StockUncheckedCreateWithoutVolumeInput[]
    connectOrCreate?: StockCreateOrConnectWithoutVolumeInput | StockCreateOrConnectWithoutVolumeInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutVolumeInput | StockUpsertWithWhereUniqueWithoutVolumeInput[]
    createMany?: StockCreateManyVolumeInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutVolumeInput | StockUpdateWithWhereUniqueWithoutVolumeInput[]
    updateMany?: StockUpdateManyWithWhereWithoutVolumeInput | StockUpdateManyWithWhereWithoutVolumeInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type StockUncheckedUpdateManyWithoutVolumeNestedInput = {
    create?: XOR<StockCreateWithoutVolumeInput, StockUncheckedCreateWithoutVolumeInput> | StockCreateWithoutVolumeInput[] | StockUncheckedCreateWithoutVolumeInput[]
    connectOrCreate?: StockCreateOrConnectWithoutVolumeInput | StockCreateOrConnectWithoutVolumeInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutVolumeInput | StockUpsertWithWhereUniqueWithoutVolumeInput[]
    createMany?: StockCreateManyVolumeInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutVolumeInput | StockUpdateWithWhereUniqueWithoutVolumeInput[]
    updateMany?: StockUpdateManyWithWhereWithoutVolumeInput | StockUpdateManyWithWhereWithoutVolumeInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type StockCreateNestedManyWithoutWeek52Input = {
    create?: XOR<StockCreateWithoutWeek52Input, StockUncheckedCreateWithoutWeek52Input> | StockCreateWithoutWeek52Input[] | StockUncheckedCreateWithoutWeek52Input[]
    connectOrCreate?: StockCreateOrConnectWithoutWeek52Input | StockCreateOrConnectWithoutWeek52Input[]
    createMany?: StockCreateManyWeek52InputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type StockUncheckedCreateNestedManyWithoutWeek52Input = {
    create?: XOR<StockCreateWithoutWeek52Input, StockUncheckedCreateWithoutWeek52Input> | StockCreateWithoutWeek52Input[] | StockUncheckedCreateWithoutWeek52Input[]
    connectOrCreate?: StockCreateOrConnectWithoutWeek52Input | StockCreateOrConnectWithoutWeek52Input[]
    createMany?: StockCreateManyWeek52InputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type StockUpdateManyWithoutWeek52NestedInput = {
    create?: XOR<StockCreateWithoutWeek52Input, StockUncheckedCreateWithoutWeek52Input> | StockCreateWithoutWeek52Input[] | StockUncheckedCreateWithoutWeek52Input[]
    connectOrCreate?: StockCreateOrConnectWithoutWeek52Input | StockCreateOrConnectWithoutWeek52Input[]
    upsert?: StockUpsertWithWhereUniqueWithoutWeek52Input | StockUpsertWithWhereUniqueWithoutWeek52Input[]
    createMany?: StockCreateManyWeek52InputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutWeek52Input | StockUpdateWithWhereUniqueWithoutWeek52Input[]
    updateMany?: StockUpdateManyWithWhereWithoutWeek52Input | StockUpdateManyWithWhereWithoutWeek52Input[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type StockUncheckedUpdateManyWithoutWeek52NestedInput = {
    create?: XOR<StockCreateWithoutWeek52Input, StockUncheckedCreateWithoutWeek52Input> | StockCreateWithoutWeek52Input[] | StockUncheckedCreateWithoutWeek52Input[]
    connectOrCreate?: StockCreateOrConnectWithoutWeek52Input | StockCreateOrConnectWithoutWeek52Input[]
    upsert?: StockUpsertWithWhereUniqueWithoutWeek52Input | StockUpsertWithWhereUniqueWithoutWeek52Input[]
    createMany?: StockCreateManyWeek52InputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutWeek52Input | StockUpdateWithWhereUniqueWithoutWeek52Input[]
    updateMany?: StockUpdateManyWithWhereWithoutWeek52Input | StockUpdateManyWithWhereWithoutWeek52Input[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type StockCreateNestedManyWithoutDividendInput = {
    create?: XOR<StockCreateWithoutDividendInput, StockUncheckedCreateWithoutDividendInput> | StockCreateWithoutDividendInput[] | StockUncheckedCreateWithoutDividendInput[]
    connectOrCreate?: StockCreateOrConnectWithoutDividendInput | StockCreateOrConnectWithoutDividendInput[]
    createMany?: StockCreateManyDividendInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type StockUncheckedCreateNestedManyWithoutDividendInput = {
    create?: XOR<StockCreateWithoutDividendInput, StockUncheckedCreateWithoutDividendInput> | StockCreateWithoutDividendInput[] | StockUncheckedCreateWithoutDividendInput[]
    connectOrCreate?: StockCreateOrConnectWithoutDividendInput | StockCreateOrConnectWithoutDividendInput[]
    createMany?: StockCreateManyDividendInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type StockUpdateManyWithoutDividendNestedInput = {
    create?: XOR<StockCreateWithoutDividendInput, StockUncheckedCreateWithoutDividendInput> | StockCreateWithoutDividendInput[] | StockUncheckedCreateWithoutDividendInput[]
    connectOrCreate?: StockCreateOrConnectWithoutDividendInput | StockCreateOrConnectWithoutDividendInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutDividendInput | StockUpsertWithWhereUniqueWithoutDividendInput[]
    createMany?: StockCreateManyDividendInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutDividendInput | StockUpdateWithWhereUniqueWithoutDividendInput[]
    updateMany?: StockUpdateManyWithWhereWithoutDividendInput | StockUpdateManyWithWhereWithoutDividendInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type StockUncheckedUpdateManyWithoutDividendNestedInput = {
    create?: XOR<StockCreateWithoutDividendInput, StockUncheckedCreateWithoutDividendInput> | StockCreateWithoutDividendInput[] | StockUncheckedCreateWithoutDividendInput[]
    connectOrCreate?: StockCreateOrConnectWithoutDividendInput | StockCreateOrConnectWithoutDividendInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutDividendInput | StockUpsertWithWhereUniqueWithoutDividendInput[]
    createMany?: StockCreateManyDividendInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutDividendInput | StockUpdateWithWhereUniqueWithoutDividendInput[]
    updateMany?: StockUpdateManyWithWhereWithoutDividendInput | StockUpdateManyWithWhereWithoutDividendInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type StockCreateNestedManyWithoutEarningsInput = {
    create?: XOR<StockCreateWithoutEarningsInput, StockUncheckedCreateWithoutEarningsInput> | StockCreateWithoutEarningsInput[] | StockUncheckedCreateWithoutEarningsInput[]
    connectOrCreate?: StockCreateOrConnectWithoutEarningsInput | StockCreateOrConnectWithoutEarningsInput[]
    createMany?: StockCreateManyEarningsInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type StockUncheckedCreateNestedManyWithoutEarningsInput = {
    create?: XOR<StockCreateWithoutEarningsInput, StockUncheckedCreateWithoutEarningsInput> | StockCreateWithoutEarningsInput[] | StockUncheckedCreateWithoutEarningsInput[]
    connectOrCreate?: StockCreateOrConnectWithoutEarningsInput | StockCreateOrConnectWithoutEarningsInput[]
    createMany?: StockCreateManyEarningsInputEnvelope
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
  }

  export type StockUpdateManyWithoutEarningsNestedInput = {
    create?: XOR<StockCreateWithoutEarningsInput, StockUncheckedCreateWithoutEarningsInput> | StockCreateWithoutEarningsInput[] | StockUncheckedCreateWithoutEarningsInput[]
    connectOrCreate?: StockCreateOrConnectWithoutEarningsInput | StockCreateOrConnectWithoutEarningsInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutEarningsInput | StockUpsertWithWhereUniqueWithoutEarningsInput[]
    createMany?: StockCreateManyEarningsInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutEarningsInput | StockUpdateWithWhereUniqueWithoutEarningsInput[]
    updateMany?: StockUpdateManyWithWhereWithoutEarningsInput | StockUpdateManyWithWhereWithoutEarningsInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type StockUncheckedUpdateManyWithoutEarningsNestedInput = {
    create?: XOR<StockCreateWithoutEarningsInput, StockUncheckedCreateWithoutEarningsInput> | StockCreateWithoutEarningsInput[] | StockUncheckedCreateWithoutEarningsInput[]
    connectOrCreate?: StockCreateOrConnectWithoutEarningsInput | StockCreateOrConnectWithoutEarningsInput[]
    upsert?: StockUpsertWithWhereUniqueWithoutEarningsInput | StockUpsertWithWhereUniqueWithoutEarningsInput[]
    createMany?: StockCreateManyEarningsInputEnvelope
    set?: StockWhereUniqueInput | StockWhereUniqueInput[]
    disconnect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    delete?: StockWhereUniqueInput | StockWhereUniqueInput[]
    connect?: StockWhereUniqueInput | StockWhereUniqueInput[]
    update?: StockUpdateWithWhereUniqueWithoutEarningsInput | StockUpdateWithWhereUniqueWithoutEarningsInput[]
    updateMany?: StockUpdateManyWithWhereWithoutEarningsInput | StockUpdateManyWithWhereWithoutEarningsInput[]
    deleteMany?: StockScalarWhereInput | StockScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumCurrencyTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyType | EnumCurrencyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CurrencyType[] | ListEnumCurrencyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CurrencyType[] | ListEnumCurrencyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyTypeFilter<$PrismaModel> | $Enums.CurrencyType
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumCurrencyTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyType | EnumCurrencyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CurrencyType[] | ListEnumCurrencyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CurrencyType[] | ListEnumCurrencyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyTypeWithAggregatesFilter<$PrismaModel> | $Enums.CurrencyType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCurrencyTypeFilter<$PrismaModel>
    _max?: NestedEnumCurrencyTypeFilter<$PrismaModel>
  }

  export type NestedEnumTransactionTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeFilter<$PrismaModel> | $Enums.TransactionType
  }

  export type NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TransactionType | EnumTransactionTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TransactionType[] | ListEnumTransactionTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTransactionTypeWithAggregatesFilter<$PrismaModel> | $Enums.TransactionType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTransactionTypeFilter<$PrismaModel>
    _max?: NestedEnumTransactionTypeFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.Status[] | ListEnumStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CommentCreateWithoutUserInput = {
    id?: string
    content: string
    dateComment: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    news?: NewsCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: string
    content: string
    dateComment: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    newsId?: string | null
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FinancialRadiograpCreateWithoutUserInput = {
    id?: string
    monthlyIncome?: Decimal | DecimalJsLike | number | string | null
    monthlyExpenses?: Decimal | DecimalJsLike | number | string | null
    savingCapacity?: Decimal | DecimalJsLike | number | string | null
    debts?: Decimal | DecimalJsLike | number | string | null
    savings?: Decimal | DecimalJsLike | number | string | null
  }

  export type FinancialRadiograpUncheckedCreateWithoutUserInput = {
    id?: string
    monthlyIncome?: Decimal | DecimalJsLike | number | string | null
    monthlyExpenses?: Decimal | DecimalJsLike | number | string | null
    savingCapacity?: Decimal | DecimalJsLike | number | string | null
    debts?: Decimal | DecimalJsLike | number | string | null
    savings?: Decimal | DecimalJsLike | number | string | null
  }

  export type FinancialRadiograpCreateOrConnectWithoutUserInput = {
    where: FinancialRadiograpWhereUniqueInput
    create: XOR<FinancialRadiograpCreateWithoutUserInput, FinancialRadiograpUncheckedCreateWithoutUserInput>
  }

  export type ProfileCreateWithoutUserInput = {
    id?: string
    riskTolerance?: string | null
    investmentHorizon?: string | null
    financialSkills?: string | null
    hasInvestedBefore?: string | null
    financialGoal?: string | null
    mainGoal?: string | null
    monthlyInvestment?: string | null
    financialInstrument?: string | null
    investmentMethod?: string | null
    investmentCategories?: string | null
    mainIncomeSource?: string | null
    financialNewsSource?: string | null
    years?: string | null
    investingDuration?: string | null
    savingsOrInvestmentReason?: string | null
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: string
    riskTolerance?: string | null
    investmentHorizon?: string | null
    financialSkills?: string | null
    hasInvestedBefore?: string | null
    financialGoal?: string | null
    mainGoal?: string | null
    monthlyInvestment?: string | null
    financialInstrument?: string | null
    investmentMethod?: string | null
    investmentCategories?: string | null
    mainIncomeSource?: string | null
    financialNewsSource?: string | null
    years?: string | null
    investingDuration?: string | null
    savingsOrInvestmentReason?: string | null
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type CustomizationCreateWithoutUserInput = {
    id?: string
    categories?: string | null
    strategy?: string | null
    method?: string | null
    newsSource?: string | null
    instrument?: string | null
    age?: string | null
    investingYears?: string | null
    goal?: string | null
    monthlyAmount?: number | null
    incomeSource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomizationUncheckedCreateWithoutUserInput = {
    id?: string
    categories?: string | null
    strategy?: string | null
    method?: string | null
    newsSource?: string | null
    instrument?: string | null
    age?: string | null
    investingYears?: string | null
    goal?: string | null
    monthlyAmount?: number | null
    incomeSource?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomizationCreateOrConnectWithoutUserInput = {
    where: CustomizationWhereUniqueInput
    create: XOR<CustomizationCreateWithoutUserInput, CustomizationUncheckedCreateWithoutUserInput>
  }

  export type SupportCreateWithoutUserInput = {
    id?: string
    subject: string
    message: string
    status?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SupportUncheckedCreateWithoutUserInput = {
    id?: string
    subject: string
    message: string
    status?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SupportCreateOrConnectWithoutUserInput = {
    where: SupportWhereUniqueInput
    create: XOR<SupportCreateWithoutUserInput, SupportUncheckedCreateWithoutUserInput>
  }

  export type SupportCreateManyUserInputEnvelope = {
    data: SupportCreateManyUserInput | SupportCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type walletCreateWithoutUserInput = {
    id?: string
    balancePesos: number
    balanceDollars: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: WalletTransactionCreateNestedManyWithoutWalletInput
  }

  export type walletUncheckedCreateWithoutUserInput = {
    id?: string
    balancePesos: number
    balanceDollars: number
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: WalletTransactionUncheckedCreateNestedManyWithoutWalletInput
  }

  export type walletCreateOrConnectWithoutUserInput = {
    where: walletWhereUniqueInput
    create: XOR<walletCreateWithoutUserInput, walletUncheckedCreateWithoutUserInput>
  }

  export type walletCreateManyUserInputEnvelope = {
    data: walletCreateManyUserInput | walletCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TargetCreateWithoutUserInput = {
    id?: string
    name: string
    progress?: Decimal | DecimalJsLike | number | string
    amount: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    category: string
    dateTarget: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TargetUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    progress?: Decimal | DecimalJsLike | number | string
    amount: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    category: string
    dateTarget: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TargetCreateOrConnectWithoutUserInput = {
    where: TargetWhereUniqueInput
    create: XOR<TargetCreateWithoutUserInput, TargetUncheckedCreateWithoutUserInput>
  }

  export type TargetCreateManyUserInputEnvelope = {
    data: TargetCreateManyUserInput | TargetCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InvestmentPortfolioCreateWithoutUserInput = {
    id?: string
    name?: string | null
    investments?: InvestmentCreateNestedManyWithoutPortfolioInput
  }

  export type InvestmentPortfolioUncheckedCreateWithoutUserInput = {
    id?: string
    name?: string | null
    investments?: InvestmentUncheckedCreateNestedManyWithoutPortfolioInput
  }

  export type InvestmentPortfolioCreateOrConnectWithoutUserInput = {
    where: InvestmentPortfolioWhereUniqueInput
    create: XOR<InvestmentPortfolioCreateWithoutUserInput, InvestmentPortfolioUncheckedCreateWithoutUserInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    dateComment?: DateTimeFilter<"Comment"> | Date | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    userId?: StringNullableFilter<"Comment"> | string | null
    newsId?: StringNullableFilter<"Comment"> | string | null
  }

  export type FinancialRadiograpUpsertWithoutUserInput = {
    update: XOR<FinancialRadiograpUpdateWithoutUserInput, FinancialRadiograpUncheckedUpdateWithoutUserInput>
    create: XOR<FinancialRadiograpCreateWithoutUserInput, FinancialRadiograpUncheckedCreateWithoutUserInput>
    where?: FinancialRadiograpWhereInput
  }

  export type FinancialRadiograpUpdateToOneWithWhereWithoutUserInput = {
    where?: FinancialRadiograpWhereInput
    data: XOR<FinancialRadiograpUpdateWithoutUserInput, FinancialRadiograpUncheckedUpdateWithoutUserInput>
  }

  export type FinancialRadiograpUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    monthlyIncome?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    savingCapacity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    debts?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    savings?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type FinancialRadiograpUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    monthlyIncome?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    monthlyExpenses?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    savingCapacity?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    debts?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    savings?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    riskTolerance?: NullableStringFieldUpdateOperationsInput | string | null
    investmentHorizon?: NullableStringFieldUpdateOperationsInput | string | null
    financialSkills?: NullableStringFieldUpdateOperationsInput | string | null
    hasInvestedBefore?: NullableStringFieldUpdateOperationsInput | string | null
    financialGoal?: NullableStringFieldUpdateOperationsInput | string | null
    mainGoal?: NullableStringFieldUpdateOperationsInput | string | null
    monthlyInvestment?: NullableStringFieldUpdateOperationsInput | string | null
    financialInstrument?: NullableStringFieldUpdateOperationsInput | string | null
    investmentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    investmentCategories?: NullableStringFieldUpdateOperationsInput | string | null
    mainIncomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    financialNewsSource?: NullableStringFieldUpdateOperationsInput | string | null
    years?: NullableStringFieldUpdateOperationsInput | string | null
    investingDuration?: NullableStringFieldUpdateOperationsInput | string | null
    savingsOrInvestmentReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    riskTolerance?: NullableStringFieldUpdateOperationsInput | string | null
    investmentHorizon?: NullableStringFieldUpdateOperationsInput | string | null
    financialSkills?: NullableStringFieldUpdateOperationsInput | string | null
    hasInvestedBefore?: NullableStringFieldUpdateOperationsInput | string | null
    financialGoal?: NullableStringFieldUpdateOperationsInput | string | null
    mainGoal?: NullableStringFieldUpdateOperationsInput | string | null
    monthlyInvestment?: NullableStringFieldUpdateOperationsInput | string | null
    financialInstrument?: NullableStringFieldUpdateOperationsInput | string | null
    investmentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    investmentCategories?: NullableStringFieldUpdateOperationsInput | string | null
    mainIncomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    financialNewsSource?: NullableStringFieldUpdateOperationsInput | string | null
    years?: NullableStringFieldUpdateOperationsInput | string | null
    investingDuration?: NullableStringFieldUpdateOperationsInput | string | null
    savingsOrInvestmentReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CustomizationUpsertWithoutUserInput = {
    update: XOR<CustomizationUpdateWithoutUserInput, CustomizationUncheckedUpdateWithoutUserInput>
    create: XOR<CustomizationCreateWithoutUserInput, CustomizationUncheckedCreateWithoutUserInput>
    where?: CustomizationWhereInput
  }

  export type CustomizationUpdateToOneWithWhereWithoutUserInput = {
    where?: CustomizationWhereInput
    data: XOR<CustomizationUpdateWithoutUserInput, CustomizationUncheckedUpdateWithoutUserInput>
  }

  export type CustomizationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    categories?: NullableStringFieldUpdateOperationsInput | string | null
    strategy?: NullableStringFieldUpdateOperationsInput | string | null
    method?: NullableStringFieldUpdateOperationsInput | string | null
    newsSource?: NullableStringFieldUpdateOperationsInput | string | null
    instrument?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    investingYears?: NullableStringFieldUpdateOperationsInput | string | null
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    monthlyAmount?: NullableIntFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomizationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    categories?: NullableStringFieldUpdateOperationsInput | string | null
    strategy?: NullableStringFieldUpdateOperationsInput | string | null
    method?: NullableStringFieldUpdateOperationsInput | string | null
    newsSource?: NullableStringFieldUpdateOperationsInput | string | null
    instrument?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableStringFieldUpdateOperationsInput | string | null
    investingYears?: NullableStringFieldUpdateOperationsInput | string | null
    goal?: NullableStringFieldUpdateOperationsInput | string | null
    monthlyAmount?: NullableIntFieldUpdateOperationsInput | number | null
    incomeSource?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupportUpsertWithWhereUniqueWithoutUserInput = {
    where: SupportWhereUniqueInput
    update: XOR<SupportUpdateWithoutUserInput, SupportUncheckedUpdateWithoutUserInput>
    create: XOR<SupportCreateWithoutUserInput, SupportUncheckedCreateWithoutUserInput>
  }

  export type SupportUpdateWithWhereUniqueWithoutUserInput = {
    where: SupportWhereUniqueInput
    data: XOR<SupportUpdateWithoutUserInput, SupportUncheckedUpdateWithoutUserInput>
  }

  export type SupportUpdateManyWithWhereWithoutUserInput = {
    where: SupportScalarWhereInput
    data: XOR<SupportUpdateManyMutationInput, SupportUncheckedUpdateManyWithoutUserInput>
  }

  export type SupportScalarWhereInput = {
    AND?: SupportScalarWhereInput | SupportScalarWhereInput[]
    OR?: SupportScalarWhereInput[]
    NOT?: SupportScalarWhereInput | SupportScalarWhereInput[]
    id?: StringFilter<"Support"> | string
    userId?: StringFilter<"Support"> | string
    subject?: StringFilter<"Support"> | string
    message?: StringFilter<"Support"> | string
    status?: EnumStatusFilter<"Support"> | $Enums.Status
    createdAt?: DateTimeFilter<"Support"> | Date | string
    updatedAt?: DateTimeFilter<"Support"> | Date | string
  }

  export type walletUpsertWithWhereUniqueWithoutUserInput = {
    where: walletWhereUniqueInput
    update: XOR<walletUpdateWithoutUserInput, walletUncheckedUpdateWithoutUserInput>
    create: XOR<walletCreateWithoutUserInput, walletUncheckedCreateWithoutUserInput>
  }

  export type walletUpdateWithWhereUniqueWithoutUserInput = {
    where: walletWhereUniqueInput
    data: XOR<walletUpdateWithoutUserInput, walletUncheckedUpdateWithoutUserInput>
  }

  export type walletUpdateManyWithWhereWithoutUserInput = {
    where: walletScalarWhereInput
    data: XOR<walletUpdateManyMutationInput, walletUncheckedUpdateManyWithoutUserInput>
  }

  export type walletScalarWhereInput = {
    AND?: walletScalarWhereInput | walletScalarWhereInput[]
    OR?: walletScalarWhereInput[]
    NOT?: walletScalarWhereInput | walletScalarWhereInput[]
    id?: StringFilter<"wallet"> | string
    userId?: StringFilter<"wallet"> | string
    balancePesos?: IntFilter<"wallet"> | number
    balanceDollars?: IntFilter<"wallet"> | number
    createdAt?: DateTimeFilter<"wallet"> | Date | string
    updatedAt?: DateTimeFilter<"wallet"> | Date | string
  }

  export type TargetUpsertWithWhereUniqueWithoutUserInput = {
    where: TargetWhereUniqueInput
    update: XOR<TargetUpdateWithoutUserInput, TargetUncheckedUpdateWithoutUserInput>
    create: XOR<TargetCreateWithoutUserInput, TargetUncheckedCreateWithoutUserInput>
  }

  export type TargetUpdateWithWhereUniqueWithoutUserInput = {
    where: TargetWhereUniqueInput
    data: XOR<TargetUpdateWithoutUserInput, TargetUncheckedUpdateWithoutUserInput>
  }

  export type TargetUpdateManyWithWhereWithoutUserInput = {
    where: TargetScalarWhereInput
    data: XOR<TargetUpdateManyMutationInput, TargetUncheckedUpdateManyWithoutUserInput>
  }

  export type TargetScalarWhereInput = {
    AND?: TargetScalarWhereInput | TargetScalarWhereInput[]
    OR?: TargetScalarWhereInput[]
    NOT?: TargetScalarWhereInput | TargetScalarWhereInput[]
    id?: StringFilter<"Target"> | string
    name?: StringFilter<"Target"> | string
    progress?: DecimalFilter<"Target"> | Decimal | DecimalJsLike | number | string
    amount?: DecimalFilter<"Target"> | Decimal | DecimalJsLike | number | string
    isActive?: BoolFilter<"Target"> | boolean
    category?: StringFilter<"Target"> | string
    dateTarget?: DateTimeFilter<"Target"> | Date | string
    createdAt?: DateTimeFilter<"Target"> | Date | string
    updatedAt?: DateTimeFilter<"Target"> | Date | string
    userId?: StringFilter<"Target"> | string
  }

  export type InvestmentPortfolioUpsertWithoutUserInput = {
    update: XOR<InvestmentPortfolioUpdateWithoutUserInput, InvestmentPortfolioUncheckedUpdateWithoutUserInput>
    create: XOR<InvestmentPortfolioCreateWithoutUserInput, InvestmentPortfolioUncheckedCreateWithoutUserInput>
    where?: InvestmentPortfolioWhereInput
  }

  export type InvestmentPortfolioUpdateToOneWithWhereWithoutUserInput = {
    where?: InvestmentPortfolioWhereInput
    data: XOR<InvestmentPortfolioUpdateWithoutUserInput, InvestmentPortfolioUncheckedUpdateWithoutUserInput>
  }

  export type InvestmentPortfolioUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    investments?: InvestmentUpdateManyWithoutPortfolioNestedInput
  }

  export type InvestmentPortfolioUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    investments?: InvestmentUncheckedUpdateManyWithoutPortfolioNestedInput
  }

  export type UserCreateWithoutTargetInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    comment?: CommentCreateNestedManyWithoutUserInput
    financialRadiographies?: FinancialRadiograpCreateNestedOneWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customization?: CustomizationCreateNestedOneWithoutUserInput
    Support?: SupportCreateNestedManyWithoutUserInput
    wallet?: walletCreateNestedManyWithoutUserInput
    investmentPortfolio?: InvestmentPortfolioCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTargetInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    financialRadiographies?: FinancialRadiograpUncheckedCreateNestedOneWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customization?: CustomizationUncheckedCreateNestedOneWithoutUserInput
    Support?: SupportUncheckedCreateNestedManyWithoutUserInput
    wallet?: walletUncheckedCreateNestedManyWithoutUserInput
    investmentPortfolio?: InvestmentPortfolioUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTargetInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTargetInput, UserUncheckedCreateWithoutTargetInput>
  }

  export type UserUpsertWithoutTargetInput = {
    update: XOR<UserUpdateWithoutTargetInput, UserUncheckedUpdateWithoutTargetInput>
    create: XOR<UserCreateWithoutTargetInput, UserUncheckedCreateWithoutTargetInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTargetInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTargetInput, UserUncheckedUpdateWithoutTargetInput>
  }

  export type UserUpdateWithoutTargetInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    comment?: CommentUpdateManyWithoutUserNestedInput
    financialRadiographies?: FinancialRadiograpUpdateOneWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customization?: CustomizationUpdateOneWithoutUserNestedInput
    Support?: SupportUpdateManyWithoutUserNestedInput
    wallet?: walletUpdateManyWithoutUserNestedInput
    investmentPortfolio?: InvestmentPortfolioUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTargetInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    financialRadiographies?: FinancialRadiograpUncheckedUpdateOneWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customization?: CustomizationUncheckedUpdateOneWithoutUserNestedInput
    Support?: SupportUncheckedUpdateManyWithoutUserNestedInput
    wallet?: walletUncheckedUpdateManyWithoutUserNestedInput
    investmentPortfolio?: InvestmentPortfolioUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutFinancialRadiographiesInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    comment?: CommentCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customization?: CustomizationCreateNestedOneWithoutUserInput
    Support?: SupportCreateNestedManyWithoutUserInput
    wallet?: walletCreateNestedManyWithoutUserInput
    target?: TargetCreateNestedManyWithoutUserInput
    investmentPortfolio?: InvestmentPortfolioCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFinancialRadiographiesInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customization?: CustomizationUncheckedCreateNestedOneWithoutUserInput
    Support?: SupportUncheckedCreateNestedManyWithoutUserInput
    wallet?: walletUncheckedCreateNestedManyWithoutUserInput
    target?: TargetUncheckedCreateNestedManyWithoutUserInput
    investmentPortfolio?: InvestmentPortfolioUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFinancialRadiographiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFinancialRadiographiesInput, UserUncheckedCreateWithoutFinancialRadiographiesInput>
  }

  export type UserUpsertWithoutFinancialRadiographiesInput = {
    update: XOR<UserUpdateWithoutFinancialRadiographiesInput, UserUncheckedUpdateWithoutFinancialRadiographiesInput>
    create: XOR<UserCreateWithoutFinancialRadiographiesInput, UserUncheckedCreateWithoutFinancialRadiographiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFinancialRadiographiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFinancialRadiographiesInput, UserUncheckedUpdateWithoutFinancialRadiographiesInput>
  }

  export type UserUpdateWithoutFinancialRadiographiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    comment?: CommentUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customization?: CustomizationUpdateOneWithoutUserNestedInput
    Support?: SupportUpdateManyWithoutUserNestedInput
    wallet?: walletUpdateManyWithoutUserNestedInput
    target?: TargetUpdateManyWithoutUserNestedInput
    investmentPortfolio?: InvestmentPortfolioUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFinancialRadiographiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customization?: CustomizationUncheckedUpdateOneWithoutUserNestedInput
    Support?: SupportUncheckedUpdateManyWithoutUserNestedInput
    wallet?: walletUncheckedUpdateManyWithoutUserNestedInput
    target?: TargetUncheckedUpdateManyWithoutUserNestedInput
    investmentPortfolio?: InvestmentPortfolioUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutInvestmentPortfolioInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    comment?: CommentCreateNestedManyWithoutUserInput
    financialRadiographies?: FinancialRadiograpCreateNestedOneWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customization?: CustomizationCreateNestedOneWithoutUserInput
    Support?: SupportCreateNestedManyWithoutUserInput
    wallet?: walletCreateNestedManyWithoutUserInput
    target?: TargetCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInvestmentPortfolioInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    financialRadiographies?: FinancialRadiograpUncheckedCreateNestedOneWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customization?: CustomizationUncheckedCreateNestedOneWithoutUserInput
    Support?: SupportUncheckedCreateNestedManyWithoutUserInput
    wallet?: walletUncheckedCreateNestedManyWithoutUserInput
    target?: TargetUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInvestmentPortfolioInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInvestmentPortfolioInput, UserUncheckedCreateWithoutInvestmentPortfolioInput>
  }

  export type InvestmentCreateWithoutPortfolioInput = {
    id?: string
    amountInvested: number
    stock?: StockCreateNestedOneWithoutInvestmentInput
    FinancialInstrument?: FinancialInstrumentCreateNestedOneWithoutInvestmentsInput
  }

  export type InvestmentUncheckedCreateWithoutPortfolioInput = {
    id?: string
    amountInvested: number
    financialInstrumentId?: string | null
    stockSymbol?: string | null
  }

  export type InvestmentCreateOrConnectWithoutPortfolioInput = {
    where: InvestmentWhereUniqueInput
    create: XOR<InvestmentCreateWithoutPortfolioInput, InvestmentUncheckedCreateWithoutPortfolioInput>
  }

  export type InvestmentCreateManyPortfolioInputEnvelope = {
    data: InvestmentCreateManyPortfolioInput | InvestmentCreateManyPortfolioInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutInvestmentPortfolioInput = {
    update: XOR<UserUpdateWithoutInvestmentPortfolioInput, UserUncheckedUpdateWithoutInvestmentPortfolioInput>
    create: XOR<UserCreateWithoutInvestmentPortfolioInput, UserUncheckedCreateWithoutInvestmentPortfolioInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInvestmentPortfolioInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInvestmentPortfolioInput, UserUncheckedUpdateWithoutInvestmentPortfolioInput>
  }

  export type UserUpdateWithoutInvestmentPortfolioInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    comment?: CommentUpdateManyWithoutUserNestedInput
    financialRadiographies?: FinancialRadiograpUpdateOneWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customization?: CustomizationUpdateOneWithoutUserNestedInput
    Support?: SupportUpdateManyWithoutUserNestedInput
    wallet?: walletUpdateManyWithoutUserNestedInput
    target?: TargetUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInvestmentPortfolioInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    financialRadiographies?: FinancialRadiograpUncheckedUpdateOneWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customization?: CustomizationUncheckedUpdateOneWithoutUserNestedInput
    Support?: SupportUncheckedUpdateManyWithoutUserNestedInput
    wallet?: walletUncheckedUpdateManyWithoutUserNestedInput
    target?: TargetUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InvestmentUpsertWithWhereUniqueWithoutPortfolioInput = {
    where: InvestmentWhereUniqueInput
    update: XOR<InvestmentUpdateWithoutPortfolioInput, InvestmentUncheckedUpdateWithoutPortfolioInput>
    create: XOR<InvestmentCreateWithoutPortfolioInput, InvestmentUncheckedCreateWithoutPortfolioInput>
  }

  export type InvestmentUpdateWithWhereUniqueWithoutPortfolioInput = {
    where: InvestmentWhereUniqueInput
    data: XOR<InvestmentUpdateWithoutPortfolioInput, InvestmentUncheckedUpdateWithoutPortfolioInput>
  }

  export type InvestmentUpdateManyWithWhereWithoutPortfolioInput = {
    where: InvestmentScalarWhereInput
    data: XOR<InvestmentUpdateManyMutationInput, InvestmentUncheckedUpdateManyWithoutPortfolioInput>
  }

  export type InvestmentScalarWhereInput = {
    AND?: InvestmentScalarWhereInput | InvestmentScalarWhereInput[]
    OR?: InvestmentScalarWhereInput[]
    NOT?: InvestmentScalarWhereInput | InvestmentScalarWhereInput[]
    id?: StringFilter<"Investment"> | string
    amountInvested?: IntFilter<"Investment"> | number
    portfolioId?: StringFilter<"Investment"> | string
    financialInstrumentId?: StringNullableFilter<"Investment"> | string | null
    stockSymbol?: StringNullableFilter<"Investment"> | string | null
  }

  export type StockCreateWithoutInvestmentInput = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dividend: DividendCreateNestedOneWithoutStockInput
    earnings: EarningsCreateNestedOneWithoutStockInput
    price: PriceCreateNestedOneWithoutStockInput
    volume: VolumeCreateNestedOneWithoutStockInput
    week52: Week52CreateNestedOneWithoutStockInput
  }

  export type StockUncheckedCreateWithoutInvestmentInput = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    priceId: number
    volumeId: number
    week52Id: number
    dividendId: number
    earningsId: number
  }

  export type StockCreateOrConnectWithoutInvestmentInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutInvestmentInput, StockUncheckedCreateWithoutInvestmentInput>
  }

  export type InvestmentPortfolioCreateWithoutInvestmentsInput = {
    id?: string
    name?: string | null
    user: UserCreateNestedOneWithoutInvestmentPortfolioInput
  }

  export type InvestmentPortfolioUncheckedCreateWithoutInvestmentsInput = {
    id?: string
    userId: string
    name?: string | null
  }

  export type InvestmentPortfolioCreateOrConnectWithoutInvestmentsInput = {
    where: InvestmentPortfolioWhereUniqueInput
    create: XOR<InvestmentPortfolioCreateWithoutInvestmentsInput, InvestmentPortfolioUncheckedCreateWithoutInvestmentsInput>
  }

  export type FinancialInstrumentCreateWithoutInvestmentsInput = {
    id?: string
    name: string
    type: string
    category: string
    performance: number
    levelRisk: number
    deadline: number
    currency: $Enums.CurrencyType
  }

  export type FinancialInstrumentUncheckedCreateWithoutInvestmentsInput = {
    id?: string
    name: string
    type: string
    category: string
    performance: number
    levelRisk: number
    deadline: number
    currency: $Enums.CurrencyType
  }

  export type FinancialInstrumentCreateOrConnectWithoutInvestmentsInput = {
    where: FinancialInstrumentWhereUniqueInput
    create: XOR<FinancialInstrumentCreateWithoutInvestmentsInput, FinancialInstrumentUncheckedCreateWithoutInvestmentsInput>
  }

  export type StockUpsertWithoutInvestmentInput = {
    update: XOR<StockUpdateWithoutInvestmentInput, StockUncheckedUpdateWithoutInvestmentInput>
    create: XOR<StockCreateWithoutInvestmentInput, StockUncheckedCreateWithoutInvestmentInput>
    where?: StockWhereInput
  }

  export type StockUpdateToOneWithWhereWithoutInvestmentInput = {
    where?: StockWhereInput
    data: XOR<StockUpdateWithoutInvestmentInput, StockUncheckedUpdateWithoutInvestmentInput>
  }

  export type StockUpdateWithoutInvestmentInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dividend?: DividendUpdateOneRequiredWithoutStockNestedInput
    earnings?: EarningsUpdateOneRequiredWithoutStockNestedInput
    price?: PriceUpdateOneRequiredWithoutStockNestedInput
    volume?: VolumeUpdateOneRequiredWithoutStockNestedInput
    week52?: Week52UpdateOneRequiredWithoutStockNestedInput
  }

  export type StockUncheckedUpdateWithoutInvestmentInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    priceId?: IntFieldUpdateOperationsInput | number
    volumeId?: IntFieldUpdateOperationsInput | number
    week52Id?: IntFieldUpdateOperationsInput | number
    dividendId?: IntFieldUpdateOperationsInput | number
    earningsId?: IntFieldUpdateOperationsInput | number
  }

  export type InvestmentPortfolioUpsertWithoutInvestmentsInput = {
    update: XOR<InvestmentPortfolioUpdateWithoutInvestmentsInput, InvestmentPortfolioUncheckedUpdateWithoutInvestmentsInput>
    create: XOR<InvestmentPortfolioCreateWithoutInvestmentsInput, InvestmentPortfolioUncheckedCreateWithoutInvestmentsInput>
    where?: InvestmentPortfolioWhereInput
  }

  export type InvestmentPortfolioUpdateToOneWithWhereWithoutInvestmentsInput = {
    where?: InvestmentPortfolioWhereInput
    data: XOR<InvestmentPortfolioUpdateWithoutInvestmentsInput, InvestmentPortfolioUncheckedUpdateWithoutInvestmentsInput>
  }

  export type InvestmentPortfolioUpdateWithoutInvestmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutInvestmentPortfolioNestedInput
  }

  export type InvestmentPortfolioUncheckedUpdateWithoutInvestmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FinancialInstrumentUpsertWithoutInvestmentsInput = {
    update: XOR<FinancialInstrumentUpdateWithoutInvestmentsInput, FinancialInstrumentUncheckedUpdateWithoutInvestmentsInput>
    create: XOR<FinancialInstrumentCreateWithoutInvestmentsInput, FinancialInstrumentUncheckedCreateWithoutInvestmentsInput>
    where?: FinancialInstrumentWhereInput
  }

  export type FinancialInstrumentUpdateToOneWithWhereWithoutInvestmentsInput = {
    where?: FinancialInstrumentWhereInput
    data: XOR<FinancialInstrumentUpdateWithoutInvestmentsInput, FinancialInstrumentUncheckedUpdateWithoutInvestmentsInput>
  }

  export type FinancialInstrumentUpdateWithoutInvestmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    performance?: FloatFieldUpdateOperationsInput | number
    levelRisk?: IntFieldUpdateOperationsInput | number
    deadline?: IntFieldUpdateOperationsInput | number
    currency?: EnumCurrencyTypeFieldUpdateOperationsInput | $Enums.CurrencyType
  }

  export type FinancialInstrumentUncheckedUpdateWithoutInvestmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    performance?: FloatFieldUpdateOperationsInput | number
    levelRisk?: IntFieldUpdateOperationsInput | number
    deadline?: IntFieldUpdateOperationsInput | number
    currency?: EnumCurrencyTypeFieldUpdateOperationsInput | $Enums.CurrencyType
  }

  export type InvestmentCreateWithoutFinancialInstrumentInput = {
    id?: string
    amountInvested: number
    stock?: StockCreateNestedOneWithoutInvestmentInput
    portfolio?: InvestmentPortfolioCreateNestedOneWithoutInvestmentsInput
  }

  export type InvestmentUncheckedCreateWithoutFinancialInstrumentInput = {
    id?: string
    amountInvested: number
    portfolioId: string
    stockSymbol?: string | null
  }

  export type InvestmentCreateOrConnectWithoutFinancialInstrumentInput = {
    where: InvestmentWhereUniqueInput
    create: XOR<InvestmentCreateWithoutFinancialInstrumentInput, InvestmentUncheckedCreateWithoutFinancialInstrumentInput>
  }

  export type InvestmentCreateManyFinancialInstrumentInputEnvelope = {
    data: InvestmentCreateManyFinancialInstrumentInput | InvestmentCreateManyFinancialInstrumentInput[]
    skipDuplicates?: boolean
  }

  export type InvestmentUpsertWithWhereUniqueWithoutFinancialInstrumentInput = {
    where: InvestmentWhereUniqueInput
    update: XOR<InvestmentUpdateWithoutFinancialInstrumentInput, InvestmentUncheckedUpdateWithoutFinancialInstrumentInput>
    create: XOR<InvestmentCreateWithoutFinancialInstrumentInput, InvestmentUncheckedCreateWithoutFinancialInstrumentInput>
  }

  export type InvestmentUpdateWithWhereUniqueWithoutFinancialInstrumentInput = {
    where: InvestmentWhereUniqueInput
    data: XOR<InvestmentUpdateWithoutFinancialInstrumentInput, InvestmentUncheckedUpdateWithoutFinancialInstrumentInput>
  }

  export type InvestmentUpdateManyWithWhereWithoutFinancialInstrumentInput = {
    where: InvestmentScalarWhereInput
    data: XOR<InvestmentUpdateManyMutationInput, InvestmentUncheckedUpdateManyWithoutFinancialInstrumentInput>
  }

  export type CommentCreateWithoutNewsInput = {
    id?: string
    content: string
    dateComment: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutNewsInput = {
    id?: string
    content: string
    dateComment: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type CommentCreateOrConnectWithoutNewsInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutNewsInput, CommentUncheckedCreateWithoutNewsInput>
  }

  export type CommentCreateManyNewsInputEnvelope = {
    data: CommentCreateManyNewsInput | CommentCreateManyNewsInput[]
    skipDuplicates?: boolean
  }

  export type CommentUpsertWithWhereUniqueWithoutNewsInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutNewsInput, CommentUncheckedUpdateWithoutNewsInput>
    create: XOR<CommentCreateWithoutNewsInput, CommentUncheckedCreateWithoutNewsInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutNewsInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutNewsInput, CommentUncheckedUpdateWithoutNewsInput>
  }

  export type CommentUpdateManyWithWhereWithoutNewsInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutNewsInput>
  }

  export type NewsCreateWithoutCommentInput = {
    id?: string
    title: string
    content: string
    source: string
    dateNews: Date | string
    category: string
    createdAt?: Date | string
  }

  export type NewsUncheckedCreateWithoutCommentInput = {
    id?: string
    title: string
    content: string
    source: string
    dateNews: Date | string
    category: string
    createdAt?: Date | string
  }

  export type NewsCreateOrConnectWithoutCommentInput = {
    where: NewsWhereUniqueInput
    create: XOR<NewsCreateWithoutCommentInput, NewsUncheckedCreateWithoutCommentInput>
  }

  export type UserCreateWithoutCommentInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    financialRadiographies?: FinancialRadiograpCreateNestedOneWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customization?: CustomizationCreateNestedOneWithoutUserInput
    Support?: SupportCreateNestedManyWithoutUserInput
    wallet?: walletCreateNestedManyWithoutUserInput
    target?: TargetCreateNestedManyWithoutUserInput
    investmentPortfolio?: InvestmentPortfolioCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    financialRadiographies?: FinancialRadiograpUncheckedCreateNestedOneWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customization?: CustomizationUncheckedCreateNestedOneWithoutUserInput
    Support?: SupportUncheckedCreateNestedManyWithoutUserInput
    wallet?: walletUncheckedCreateNestedManyWithoutUserInput
    target?: TargetUncheckedCreateNestedManyWithoutUserInput
    investmentPortfolio?: InvestmentPortfolioUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
  }

  export type NewsUpsertWithoutCommentInput = {
    update: XOR<NewsUpdateWithoutCommentInput, NewsUncheckedUpdateWithoutCommentInput>
    create: XOR<NewsCreateWithoutCommentInput, NewsUncheckedCreateWithoutCommentInput>
    where?: NewsWhereInput
  }

  export type NewsUpdateToOneWithWhereWithoutCommentInput = {
    where?: NewsWhereInput
    data: XOR<NewsUpdateWithoutCommentInput, NewsUncheckedUpdateWithoutCommentInput>
  }

  export type NewsUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    dateNews?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    source?: StringFieldUpdateOperationsInput | string
    dateNews?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutCommentInput = {
    update: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
    create: XOR<UserCreateWithoutCommentInput, UserUncheckedCreateWithoutCommentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentInput, UserUncheckedUpdateWithoutCommentInput>
  }

  export type UserUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    financialRadiographies?: FinancialRadiograpUpdateOneWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customization?: CustomizationUpdateOneWithoutUserNestedInput
    Support?: SupportUpdateManyWithoutUserNestedInput
    wallet?: walletUpdateManyWithoutUserNestedInput
    target?: TargetUpdateManyWithoutUserNestedInput
    investmentPortfolio?: InvestmentPortfolioUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    financialRadiographies?: FinancialRadiograpUncheckedUpdateOneWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customization?: CustomizationUncheckedUpdateOneWithoutUserNestedInput
    Support?: SupportUncheckedUpdateManyWithoutUserNestedInput
    wallet?: walletUncheckedUpdateManyWithoutUserNestedInput
    target?: TargetUncheckedUpdateManyWithoutUserNestedInput
    investmentPortfolio?: InvestmentPortfolioUncheckedUpdateOneWithoutUserNestedInput
  }

  export type WalletTransactionCreateWithoutWalletInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    currency: $Enums.CurrencyType
    description?: string | null
    createdAt?: Date | string
  }

  export type WalletTransactionUncheckedCreateWithoutWalletInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    currency: $Enums.CurrencyType
    description?: string | null
    createdAt?: Date | string
  }

  export type WalletTransactionCreateOrConnectWithoutWalletInput = {
    where: WalletTransactionWhereUniqueInput
    create: XOR<WalletTransactionCreateWithoutWalletInput, WalletTransactionUncheckedCreateWithoutWalletInput>
  }

  export type WalletTransactionCreateManyWalletInputEnvelope = {
    data: WalletTransactionCreateManyWalletInput | WalletTransactionCreateManyWalletInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutWalletInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    comment?: CommentCreateNestedManyWithoutUserInput
    financialRadiographies?: FinancialRadiograpCreateNestedOneWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customization?: CustomizationCreateNestedOneWithoutUserInput
    Support?: SupportCreateNestedManyWithoutUserInput
    target?: TargetCreateNestedManyWithoutUserInput
    investmentPortfolio?: InvestmentPortfolioCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWalletInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    financialRadiographies?: FinancialRadiograpUncheckedCreateNestedOneWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customization?: CustomizationUncheckedCreateNestedOneWithoutUserInput
    Support?: SupportUncheckedCreateNestedManyWithoutUserInput
    target?: TargetUncheckedCreateNestedManyWithoutUserInput
    investmentPortfolio?: InvestmentPortfolioUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWalletInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWalletInput, UserUncheckedCreateWithoutWalletInput>
  }

  export type WalletTransactionUpsertWithWhereUniqueWithoutWalletInput = {
    where: WalletTransactionWhereUniqueInput
    update: XOR<WalletTransactionUpdateWithoutWalletInput, WalletTransactionUncheckedUpdateWithoutWalletInput>
    create: XOR<WalletTransactionCreateWithoutWalletInput, WalletTransactionUncheckedCreateWithoutWalletInput>
  }

  export type WalletTransactionUpdateWithWhereUniqueWithoutWalletInput = {
    where: WalletTransactionWhereUniqueInput
    data: XOR<WalletTransactionUpdateWithoutWalletInput, WalletTransactionUncheckedUpdateWithoutWalletInput>
  }

  export type WalletTransactionUpdateManyWithWhereWithoutWalletInput = {
    where: WalletTransactionScalarWhereInput
    data: XOR<WalletTransactionUpdateManyMutationInput, WalletTransactionUncheckedUpdateManyWithoutWalletInput>
  }

  export type WalletTransactionScalarWhereInput = {
    AND?: WalletTransactionScalarWhereInput | WalletTransactionScalarWhereInput[]
    OR?: WalletTransactionScalarWhereInput[]
    NOT?: WalletTransactionScalarWhereInput | WalletTransactionScalarWhereInput[]
    id?: StringFilter<"WalletTransaction"> | string
    walletId?: StringFilter<"WalletTransaction"> | string
    type?: EnumTransactionTypeFilter<"WalletTransaction"> | $Enums.TransactionType
    amount?: FloatFilter<"WalletTransaction"> | number
    currency?: EnumCurrencyTypeFilter<"WalletTransaction"> | $Enums.CurrencyType
    description?: StringNullableFilter<"WalletTransaction"> | string | null
    createdAt?: DateTimeFilter<"WalletTransaction"> | Date | string
  }

  export type UserUpsertWithoutWalletInput = {
    update: XOR<UserUpdateWithoutWalletInput, UserUncheckedUpdateWithoutWalletInput>
    create: XOR<UserCreateWithoutWalletInput, UserUncheckedCreateWithoutWalletInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWalletInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWalletInput, UserUncheckedUpdateWithoutWalletInput>
  }

  export type UserUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    comment?: CommentUpdateManyWithoutUserNestedInput
    financialRadiographies?: FinancialRadiograpUpdateOneWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customization?: CustomizationUpdateOneWithoutUserNestedInput
    Support?: SupportUpdateManyWithoutUserNestedInput
    target?: TargetUpdateManyWithoutUserNestedInput
    investmentPortfolio?: InvestmentPortfolioUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    financialRadiographies?: FinancialRadiograpUncheckedUpdateOneWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customization?: CustomizationUncheckedUpdateOneWithoutUserNestedInput
    Support?: SupportUncheckedUpdateManyWithoutUserNestedInput
    target?: TargetUncheckedUpdateManyWithoutUserNestedInput
    investmentPortfolio?: InvestmentPortfolioUncheckedUpdateOneWithoutUserNestedInput
  }

  export type walletCreateWithoutTransactionsInput = {
    id?: string
    balancePesos: number
    balanceDollars: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWalletInput
  }

  export type walletUncheckedCreateWithoutTransactionsInput = {
    id?: string
    userId: string
    balancePesos: number
    balanceDollars: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type walletCreateOrConnectWithoutTransactionsInput = {
    where: walletWhereUniqueInput
    create: XOR<walletCreateWithoutTransactionsInput, walletUncheckedCreateWithoutTransactionsInput>
  }

  export type walletUpsertWithoutTransactionsInput = {
    update: XOR<walletUpdateWithoutTransactionsInput, walletUncheckedUpdateWithoutTransactionsInput>
    create: XOR<walletCreateWithoutTransactionsInput, walletUncheckedCreateWithoutTransactionsInput>
    where?: walletWhereInput
  }

  export type walletUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: walletWhereInput
    data: XOR<walletUpdateWithoutTransactionsInput, walletUncheckedUpdateWithoutTransactionsInput>
  }

  export type walletUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    balancePesos?: IntFieldUpdateOperationsInput | number
    balanceDollars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWalletNestedInput
  }

  export type walletUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    balancePesos?: IntFieldUpdateOperationsInput | number
    balanceDollars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutSupportInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    comment?: CommentCreateNestedManyWithoutUserInput
    financialRadiographies?: FinancialRadiograpCreateNestedOneWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    customization?: CustomizationCreateNestedOneWithoutUserInput
    wallet?: walletCreateNestedManyWithoutUserInput
    target?: TargetCreateNestedManyWithoutUserInput
    investmentPortfolio?: InvestmentPortfolioCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSupportInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    financialRadiographies?: FinancialRadiograpUncheckedCreateNestedOneWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    customization?: CustomizationUncheckedCreateNestedOneWithoutUserInput
    wallet?: walletUncheckedCreateNestedManyWithoutUserInput
    target?: TargetUncheckedCreateNestedManyWithoutUserInput
    investmentPortfolio?: InvestmentPortfolioUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSupportInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSupportInput, UserUncheckedCreateWithoutSupportInput>
  }

  export type UserUpsertWithoutSupportInput = {
    update: XOR<UserUpdateWithoutSupportInput, UserUncheckedUpdateWithoutSupportInput>
    create: XOR<UserCreateWithoutSupportInput, UserUncheckedCreateWithoutSupportInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSupportInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSupportInput, UserUncheckedUpdateWithoutSupportInput>
  }

  export type UserUpdateWithoutSupportInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    comment?: CommentUpdateManyWithoutUserNestedInput
    financialRadiographies?: FinancialRadiograpUpdateOneWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    customization?: CustomizationUpdateOneWithoutUserNestedInput
    wallet?: walletUpdateManyWithoutUserNestedInput
    target?: TargetUpdateManyWithoutUserNestedInput
    investmentPortfolio?: InvestmentPortfolioUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSupportInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    financialRadiographies?: FinancialRadiograpUncheckedUpdateOneWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    customization?: CustomizationUncheckedUpdateOneWithoutUserNestedInput
    wallet?: walletUncheckedUpdateManyWithoutUserNestedInput
    target?: TargetUncheckedUpdateManyWithoutUserNestedInput
    investmentPortfolio?: InvestmentPortfolioUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    comment?: CommentCreateNestedManyWithoutUserInput
    financialRadiographies?: FinancialRadiograpCreateNestedOneWithoutUserInput
    customization?: CustomizationCreateNestedOneWithoutUserInput
    Support?: SupportCreateNestedManyWithoutUserInput
    wallet?: walletCreateNestedManyWithoutUserInput
    target?: TargetCreateNestedManyWithoutUserInput
    investmentPortfolio?: InvestmentPortfolioCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    financialRadiographies?: FinancialRadiograpUncheckedCreateNestedOneWithoutUserInput
    customization?: CustomizationUncheckedCreateNestedOneWithoutUserInput
    Support?: SupportUncheckedCreateNestedManyWithoutUserInput
    wallet?: walletUncheckedCreateNestedManyWithoutUserInput
    target?: TargetUncheckedCreateNestedManyWithoutUserInput
    investmentPortfolio?: InvestmentPortfolioUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    comment?: CommentUpdateManyWithoutUserNestedInput
    financialRadiographies?: FinancialRadiograpUpdateOneWithoutUserNestedInput
    customization?: CustomizationUpdateOneWithoutUserNestedInput
    Support?: SupportUpdateManyWithoutUserNestedInput
    wallet?: walletUpdateManyWithoutUserNestedInput
    target?: TargetUpdateManyWithoutUserNestedInput
    investmentPortfolio?: InvestmentPortfolioUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    financialRadiographies?: FinancialRadiograpUncheckedUpdateOneWithoutUserNestedInput
    customization?: CustomizationUncheckedUpdateOneWithoutUserNestedInput
    Support?: SupportUncheckedUpdateManyWithoutUserNestedInput
    wallet?: walletUncheckedUpdateManyWithoutUserNestedInput
    target?: TargetUncheckedUpdateManyWithoutUserNestedInput
    investmentPortfolio?: InvestmentPortfolioUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutCustomizationInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    comment?: CommentCreateNestedManyWithoutUserInput
    financialRadiographies?: FinancialRadiograpCreateNestedOneWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    Support?: SupportCreateNestedManyWithoutUserInput
    wallet?: walletCreateNestedManyWithoutUserInput
    target?: TargetCreateNestedManyWithoutUserInput
    investmentPortfolio?: InvestmentPortfolioCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCustomizationInput = {
    id?: string
    email: string
    firstName?: string | null
    lastName?: string | null
    password: string
    avatarUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isEmailVerified?: boolean
    comment?: CommentUncheckedCreateNestedManyWithoutUserInput
    financialRadiographies?: FinancialRadiograpUncheckedCreateNestedOneWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    Support?: SupportUncheckedCreateNestedManyWithoutUserInput
    wallet?: walletUncheckedCreateNestedManyWithoutUserInput
    target?: TargetUncheckedCreateNestedManyWithoutUserInput
    investmentPortfolio?: InvestmentPortfolioUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCustomizationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCustomizationInput, UserUncheckedCreateWithoutCustomizationInput>
  }

  export type UserUpsertWithoutCustomizationInput = {
    update: XOR<UserUpdateWithoutCustomizationInput, UserUncheckedUpdateWithoutCustomizationInput>
    create: XOR<UserCreateWithoutCustomizationInput, UserUncheckedCreateWithoutCustomizationInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCustomizationInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCustomizationInput, UserUncheckedUpdateWithoutCustomizationInput>
  }

  export type UserUpdateWithoutCustomizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    comment?: CommentUpdateManyWithoutUserNestedInput
    financialRadiographies?: FinancialRadiograpUpdateOneWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    Support?: SupportUpdateManyWithoutUserNestedInput
    wallet?: walletUpdateManyWithoutUserNestedInput
    target?: TargetUpdateManyWithoutUserNestedInput
    investmentPortfolio?: InvestmentPortfolioUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCustomizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isEmailVerified?: BoolFieldUpdateOperationsInput | boolean
    comment?: CommentUncheckedUpdateManyWithoutUserNestedInput
    financialRadiographies?: FinancialRadiograpUncheckedUpdateOneWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    Support?: SupportUncheckedUpdateManyWithoutUserNestedInput
    wallet?: walletUncheckedUpdateManyWithoutUserNestedInput
    target?: TargetUncheckedUpdateManyWithoutUserNestedInput
    investmentPortfolio?: InvestmentPortfolioUncheckedUpdateOneWithoutUserNestedInput
  }

  export type DividendCreateWithoutStockInput = {
    rate?: number | null
    yield?: number | null
    date?: Date | string | null
  }

  export type DividendUncheckedCreateWithoutStockInput = {
    rate?: number | null
    yield?: number | null
    date?: Date | string | null
    id?: number
  }

  export type DividendCreateOrConnectWithoutStockInput = {
    where: DividendWhereUniqueInput
    create: XOR<DividendCreateWithoutStockInput, DividendUncheckedCreateWithoutStockInput>
  }

  export type EarningsCreateWithoutStockInput = {
    nextDate?: Date | string | null
    epsTrailing12Months?: number | null
    epsForward?: number | null
    peRatio?: number | null
  }

  export type EarningsUncheckedCreateWithoutStockInput = {
    nextDate?: Date | string | null
    epsTrailing12Months?: number | null
    epsForward?: number | null
    peRatio?: number | null
    id?: number
  }

  export type EarningsCreateOrConnectWithoutStockInput = {
    where: EarningsWhereUniqueInput
    create: XOR<EarningsCreateWithoutStockInput, EarningsUncheckedCreateWithoutStockInput>
  }

  export type PriceCreateWithoutStockInput = {
    current?: number | null
    changePercent?: number | null
    open?: number | null
    dayLow?: number | null
    dayHigh?: number | null
    previousClose?: number | null
    postMarketPrice?: number | null
    postMarketChange?: number | null
  }

  export type PriceUncheckedCreateWithoutStockInput = {
    current?: number | null
    changePercent?: number | null
    open?: number | null
    dayLow?: number | null
    dayHigh?: number | null
    previousClose?: number | null
    postMarketPrice?: number | null
    postMarketChange?: number | null
    id?: number
  }

  export type PriceCreateOrConnectWithoutStockInput = {
    where: PriceWhereUniqueInput
    create: XOR<PriceCreateWithoutStockInput, PriceUncheckedCreateWithoutStockInput>
  }

  export type VolumeCreateWithoutStockInput = {
    current?: number | null
    average3Months?: number | null
    average10Days?: number | null
  }

  export type VolumeUncheckedCreateWithoutStockInput = {
    current?: number | null
    average3Months?: number | null
    average10Days?: number | null
    id?: number
  }

  export type VolumeCreateOrConnectWithoutStockInput = {
    where: VolumeWhereUniqueInput
    create: XOR<VolumeCreateWithoutStockInput, VolumeUncheckedCreateWithoutStockInput>
  }

  export type Week52CreateWithoutStockInput = {
    high?: number | null
    low?: number | null
    changeFromHigh?: number | null
    changeFromLow?: number | null
  }

  export type Week52UncheckedCreateWithoutStockInput = {
    high?: number | null
    low?: number | null
    changeFromHigh?: number | null
    changeFromLow?: number | null
    id?: number
  }

  export type Week52CreateOrConnectWithoutStockInput = {
    where: Week52WhereUniqueInput
    create: XOR<Week52CreateWithoutStockInput, Week52UncheckedCreateWithoutStockInput>
  }

  export type InvestmentCreateWithoutStockInput = {
    id?: string
    amountInvested: number
    portfolio?: InvestmentPortfolioCreateNestedOneWithoutInvestmentsInput
    FinancialInstrument?: FinancialInstrumentCreateNestedOneWithoutInvestmentsInput
  }

  export type InvestmentUncheckedCreateWithoutStockInput = {
    id?: string
    amountInvested: number
    portfolioId: string
    financialInstrumentId?: string | null
  }

  export type InvestmentCreateOrConnectWithoutStockInput = {
    where: InvestmentWhereUniqueInput
    create: XOR<InvestmentCreateWithoutStockInput, InvestmentUncheckedCreateWithoutStockInput>
  }

  export type InvestmentCreateManyStockInputEnvelope = {
    data: InvestmentCreateManyStockInput | InvestmentCreateManyStockInput[]
    skipDuplicates?: boolean
  }

  export type DividendUpsertWithoutStockInput = {
    update: XOR<DividendUpdateWithoutStockInput, DividendUncheckedUpdateWithoutStockInput>
    create: XOR<DividendCreateWithoutStockInput, DividendUncheckedCreateWithoutStockInput>
    where?: DividendWhereInput
  }

  export type DividendUpdateToOneWithWhereWithoutStockInput = {
    where?: DividendWhereInput
    data: XOR<DividendUpdateWithoutStockInput, DividendUncheckedUpdateWithoutStockInput>
  }

  export type DividendUpdateWithoutStockInput = {
    rate?: NullableFloatFieldUpdateOperationsInput | number | null
    yield?: NullableFloatFieldUpdateOperationsInput | number | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DividendUncheckedUpdateWithoutStockInput = {
    rate?: NullableFloatFieldUpdateOperationsInput | number | null
    yield?: NullableFloatFieldUpdateOperationsInput | number | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type EarningsUpsertWithoutStockInput = {
    update: XOR<EarningsUpdateWithoutStockInput, EarningsUncheckedUpdateWithoutStockInput>
    create: XOR<EarningsCreateWithoutStockInput, EarningsUncheckedCreateWithoutStockInput>
    where?: EarningsWhereInput
  }

  export type EarningsUpdateToOneWithWhereWithoutStockInput = {
    where?: EarningsWhereInput
    data: XOR<EarningsUpdateWithoutStockInput, EarningsUncheckedUpdateWithoutStockInput>
  }

  export type EarningsUpdateWithoutStockInput = {
    nextDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    epsTrailing12Months?: NullableFloatFieldUpdateOperationsInput | number | null
    epsForward?: NullableFloatFieldUpdateOperationsInput | number | null
    peRatio?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type EarningsUncheckedUpdateWithoutStockInput = {
    nextDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    epsTrailing12Months?: NullableFloatFieldUpdateOperationsInput | number | null
    epsForward?: NullableFloatFieldUpdateOperationsInput | number | null
    peRatio?: NullableFloatFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type PriceUpsertWithoutStockInput = {
    update: XOR<PriceUpdateWithoutStockInput, PriceUncheckedUpdateWithoutStockInput>
    create: XOR<PriceCreateWithoutStockInput, PriceUncheckedCreateWithoutStockInput>
    where?: PriceWhereInput
  }

  export type PriceUpdateToOneWithWhereWithoutStockInput = {
    where?: PriceWhereInput
    data: XOR<PriceUpdateWithoutStockInput, PriceUncheckedUpdateWithoutStockInput>
  }

  export type PriceUpdateWithoutStockInput = {
    current?: NullableFloatFieldUpdateOperationsInput | number | null
    changePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    open?: NullableFloatFieldUpdateOperationsInput | number | null
    dayLow?: NullableFloatFieldUpdateOperationsInput | number | null
    dayHigh?: NullableFloatFieldUpdateOperationsInput | number | null
    previousClose?: NullableFloatFieldUpdateOperationsInput | number | null
    postMarketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    postMarketChange?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PriceUncheckedUpdateWithoutStockInput = {
    current?: NullableFloatFieldUpdateOperationsInput | number | null
    changePercent?: NullableFloatFieldUpdateOperationsInput | number | null
    open?: NullableFloatFieldUpdateOperationsInput | number | null
    dayLow?: NullableFloatFieldUpdateOperationsInput | number | null
    dayHigh?: NullableFloatFieldUpdateOperationsInput | number | null
    previousClose?: NullableFloatFieldUpdateOperationsInput | number | null
    postMarketPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    postMarketChange?: NullableFloatFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type VolumeUpsertWithoutStockInput = {
    update: XOR<VolumeUpdateWithoutStockInput, VolumeUncheckedUpdateWithoutStockInput>
    create: XOR<VolumeCreateWithoutStockInput, VolumeUncheckedCreateWithoutStockInput>
    where?: VolumeWhereInput
  }

  export type VolumeUpdateToOneWithWhereWithoutStockInput = {
    where?: VolumeWhereInput
    data: XOR<VolumeUpdateWithoutStockInput, VolumeUncheckedUpdateWithoutStockInput>
  }

  export type VolumeUpdateWithoutStockInput = {
    current?: NullableIntFieldUpdateOperationsInput | number | null
    average3Months?: NullableIntFieldUpdateOperationsInput | number | null
    average10Days?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type VolumeUncheckedUpdateWithoutStockInput = {
    current?: NullableIntFieldUpdateOperationsInput | number | null
    average3Months?: NullableIntFieldUpdateOperationsInput | number | null
    average10Days?: NullableIntFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type Week52UpsertWithoutStockInput = {
    update: XOR<Week52UpdateWithoutStockInput, Week52UncheckedUpdateWithoutStockInput>
    create: XOR<Week52CreateWithoutStockInput, Week52UncheckedCreateWithoutStockInput>
    where?: Week52WhereInput
  }

  export type Week52UpdateToOneWithWhereWithoutStockInput = {
    where?: Week52WhereInput
    data: XOR<Week52UpdateWithoutStockInput, Week52UncheckedUpdateWithoutStockInput>
  }

  export type Week52UpdateWithoutStockInput = {
    high?: NullableFloatFieldUpdateOperationsInput | number | null
    low?: NullableFloatFieldUpdateOperationsInput | number | null
    changeFromHigh?: NullableFloatFieldUpdateOperationsInput | number | null
    changeFromLow?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type Week52UncheckedUpdateWithoutStockInput = {
    high?: NullableFloatFieldUpdateOperationsInput | number | null
    low?: NullableFloatFieldUpdateOperationsInput | number | null
    changeFromHigh?: NullableFloatFieldUpdateOperationsInput | number | null
    changeFromLow?: NullableFloatFieldUpdateOperationsInput | number | null
    id?: IntFieldUpdateOperationsInput | number
  }

  export type InvestmentUpsertWithWhereUniqueWithoutStockInput = {
    where: InvestmentWhereUniqueInput
    update: XOR<InvestmentUpdateWithoutStockInput, InvestmentUncheckedUpdateWithoutStockInput>
    create: XOR<InvestmentCreateWithoutStockInput, InvestmentUncheckedCreateWithoutStockInput>
  }

  export type InvestmentUpdateWithWhereUniqueWithoutStockInput = {
    where: InvestmentWhereUniqueInput
    data: XOR<InvestmentUpdateWithoutStockInput, InvestmentUncheckedUpdateWithoutStockInput>
  }

  export type InvestmentUpdateManyWithWhereWithoutStockInput = {
    where: InvestmentScalarWhereInput
    data: XOR<InvestmentUpdateManyMutationInput, InvestmentUncheckedUpdateManyWithoutStockInput>
  }

  export type StockCreateWithoutPriceInput = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dividend: DividendCreateNestedOneWithoutStockInput
    earnings: EarningsCreateNestedOneWithoutStockInput
    volume: VolumeCreateNestedOneWithoutStockInput
    week52: Week52CreateNestedOneWithoutStockInput
    Investment?: InvestmentCreateNestedManyWithoutStockInput
  }

  export type StockUncheckedCreateWithoutPriceInput = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    volumeId: number
    week52Id: number
    dividendId: number
    earningsId: number
    Investment?: InvestmentUncheckedCreateNestedManyWithoutStockInput
  }

  export type StockCreateOrConnectWithoutPriceInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutPriceInput, StockUncheckedCreateWithoutPriceInput>
  }

  export type StockCreateManyPriceInputEnvelope = {
    data: StockCreateManyPriceInput | StockCreateManyPriceInput[]
    skipDuplicates?: boolean
  }

  export type StockUpsertWithWhereUniqueWithoutPriceInput = {
    where: StockWhereUniqueInput
    update: XOR<StockUpdateWithoutPriceInput, StockUncheckedUpdateWithoutPriceInput>
    create: XOR<StockCreateWithoutPriceInput, StockUncheckedCreateWithoutPriceInput>
  }

  export type StockUpdateWithWhereUniqueWithoutPriceInput = {
    where: StockWhereUniqueInput
    data: XOR<StockUpdateWithoutPriceInput, StockUncheckedUpdateWithoutPriceInput>
  }

  export type StockUpdateManyWithWhereWithoutPriceInput = {
    where: StockScalarWhereInput
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyWithoutPriceInput>
  }

  export type StockScalarWhereInput = {
    AND?: StockScalarWhereInput | StockScalarWhereInput[]
    OR?: StockScalarWhereInput[]
    NOT?: StockScalarWhereInput | StockScalarWhereInput[]
    symbol?: StringFilter<"Stock"> | string
    name?: StringFilter<"Stock"> | string
    typeDisp?: StringFilter<"Stock"> | string
    currency?: StringFilter<"Stock"> | string
    market?: StringFilter<"Stock"> | string
    marketCap?: IntFilter<"Stock"> | number
    createdAt?: DateTimeFilter<"Stock"> | Date | string
    updatedAt?: DateTimeFilter<"Stock"> | Date | string
    id?: IntFilter<"Stock"> | number
    priceId?: IntFilter<"Stock"> | number
    volumeId?: IntFilter<"Stock"> | number
    week52Id?: IntFilter<"Stock"> | number
    dividendId?: IntFilter<"Stock"> | number
    earningsId?: IntFilter<"Stock"> | number
  }

  export type StockCreateWithoutVolumeInput = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dividend: DividendCreateNestedOneWithoutStockInput
    earnings: EarningsCreateNestedOneWithoutStockInput
    price: PriceCreateNestedOneWithoutStockInput
    week52: Week52CreateNestedOneWithoutStockInput
    Investment?: InvestmentCreateNestedManyWithoutStockInput
  }

  export type StockUncheckedCreateWithoutVolumeInput = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    priceId: number
    week52Id: number
    dividendId: number
    earningsId: number
    Investment?: InvestmentUncheckedCreateNestedManyWithoutStockInput
  }

  export type StockCreateOrConnectWithoutVolumeInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutVolumeInput, StockUncheckedCreateWithoutVolumeInput>
  }

  export type StockCreateManyVolumeInputEnvelope = {
    data: StockCreateManyVolumeInput | StockCreateManyVolumeInput[]
    skipDuplicates?: boolean
  }

  export type StockUpsertWithWhereUniqueWithoutVolumeInput = {
    where: StockWhereUniqueInput
    update: XOR<StockUpdateWithoutVolumeInput, StockUncheckedUpdateWithoutVolumeInput>
    create: XOR<StockCreateWithoutVolumeInput, StockUncheckedCreateWithoutVolumeInput>
  }

  export type StockUpdateWithWhereUniqueWithoutVolumeInput = {
    where: StockWhereUniqueInput
    data: XOR<StockUpdateWithoutVolumeInput, StockUncheckedUpdateWithoutVolumeInput>
  }

  export type StockUpdateManyWithWhereWithoutVolumeInput = {
    where: StockScalarWhereInput
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyWithoutVolumeInput>
  }

  export type StockCreateWithoutWeek52Input = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dividend: DividendCreateNestedOneWithoutStockInput
    earnings: EarningsCreateNestedOneWithoutStockInput
    price: PriceCreateNestedOneWithoutStockInput
    volume: VolumeCreateNestedOneWithoutStockInput
    Investment?: InvestmentCreateNestedManyWithoutStockInput
  }

  export type StockUncheckedCreateWithoutWeek52Input = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    priceId: number
    volumeId: number
    dividendId: number
    earningsId: number
    Investment?: InvestmentUncheckedCreateNestedManyWithoutStockInput
  }

  export type StockCreateOrConnectWithoutWeek52Input = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutWeek52Input, StockUncheckedCreateWithoutWeek52Input>
  }

  export type StockCreateManyWeek52InputEnvelope = {
    data: StockCreateManyWeek52Input | StockCreateManyWeek52Input[]
    skipDuplicates?: boolean
  }

  export type StockUpsertWithWhereUniqueWithoutWeek52Input = {
    where: StockWhereUniqueInput
    update: XOR<StockUpdateWithoutWeek52Input, StockUncheckedUpdateWithoutWeek52Input>
    create: XOR<StockCreateWithoutWeek52Input, StockUncheckedCreateWithoutWeek52Input>
  }

  export type StockUpdateWithWhereUniqueWithoutWeek52Input = {
    where: StockWhereUniqueInput
    data: XOR<StockUpdateWithoutWeek52Input, StockUncheckedUpdateWithoutWeek52Input>
  }

  export type StockUpdateManyWithWhereWithoutWeek52Input = {
    where: StockScalarWhereInput
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyWithoutWeek52Input>
  }

  export type StockCreateWithoutDividendInput = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    earnings: EarningsCreateNestedOneWithoutStockInput
    price: PriceCreateNestedOneWithoutStockInput
    volume: VolumeCreateNestedOneWithoutStockInput
    week52: Week52CreateNestedOneWithoutStockInput
    Investment?: InvestmentCreateNestedManyWithoutStockInput
  }

  export type StockUncheckedCreateWithoutDividendInput = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    priceId: number
    volumeId: number
    week52Id: number
    earningsId: number
    Investment?: InvestmentUncheckedCreateNestedManyWithoutStockInput
  }

  export type StockCreateOrConnectWithoutDividendInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutDividendInput, StockUncheckedCreateWithoutDividendInput>
  }

  export type StockCreateManyDividendInputEnvelope = {
    data: StockCreateManyDividendInput | StockCreateManyDividendInput[]
    skipDuplicates?: boolean
  }

  export type StockUpsertWithWhereUniqueWithoutDividendInput = {
    where: StockWhereUniqueInput
    update: XOR<StockUpdateWithoutDividendInput, StockUncheckedUpdateWithoutDividendInput>
    create: XOR<StockCreateWithoutDividendInput, StockUncheckedCreateWithoutDividendInput>
  }

  export type StockUpdateWithWhereUniqueWithoutDividendInput = {
    where: StockWhereUniqueInput
    data: XOR<StockUpdateWithoutDividendInput, StockUncheckedUpdateWithoutDividendInput>
  }

  export type StockUpdateManyWithWhereWithoutDividendInput = {
    where: StockScalarWhereInput
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyWithoutDividendInput>
  }

  export type StockCreateWithoutEarningsInput = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    dividend: DividendCreateNestedOneWithoutStockInput
    price: PriceCreateNestedOneWithoutStockInput
    volume: VolumeCreateNestedOneWithoutStockInput
    week52: Week52CreateNestedOneWithoutStockInput
    Investment?: InvestmentCreateNestedManyWithoutStockInput
  }

  export type StockUncheckedCreateWithoutEarningsInput = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    priceId: number
    volumeId: number
    week52Id: number
    dividendId: number
    Investment?: InvestmentUncheckedCreateNestedManyWithoutStockInput
  }

  export type StockCreateOrConnectWithoutEarningsInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutEarningsInput, StockUncheckedCreateWithoutEarningsInput>
  }

  export type StockCreateManyEarningsInputEnvelope = {
    data: StockCreateManyEarningsInput | StockCreateManyEarningsInput[]
    skipDuplicates?: boolean
  }

  export type StockUpsertWithWhereUniqueWithoutEarningsInput = {
    where: StockWhereUniqueInput
    update: XOR<StockUpdateWithoutEarningsInput, StockUncheckedUpdateWithoutEarningsInput>
    create: XOR<StockCreateWithoutEarningsInput, StockUncheckedCreateWithoutEarningsInput>
  }

  export type StockUpdateWithWhereUniqueWithoutEarningsInput = {
    where: StockWhereUniqueInput
    data: XOR<StockUpdateWithoutEarningsInput, StockUncheckedUpdateWithoutEarningsInput>
  }

  export type StockUpdateManyWithWhereWithoutEarningsInput = {
    where: StockScalarWhereInput
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyWithoutEarningsInput>
  }

  export type CommentCreateManyUserInput = {
    id?: string
    content: string
    dateComment: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    newsId?: string | null
  }

  export type SupportCreateManyUserInput = {
    id?: string
    subject: string
    message: string
    status?: $Enums.Status
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type walletCreateManyUserInput = {
    id?: string
    balancePesos: number
    balanceDollars: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TargetCreateManyUserInput = {
    id?: string
    name: string
    progress?: Decimal | DecimalJsLike | number | string
    amount: Decimal | DecimalJsLike | number | string
    isActive?: boolean
    category: string
    dateTarget: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    dateComment?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    news?: NewsUpdateOneWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    dateComment?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    newsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    dateComment?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    newsId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SupportUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupportUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SupportUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type walletUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    balancePesos?: IntFieldUpdateOperationsInput | number
    balanceDollars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: WalletTransactionUpdateManyWithoutWalletNestedInput
  }

  export type walletUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    balancePesos?: IntFieldUpdateOperationsInput | number
    balanceDollars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: WalletTransactionUncheckedUpdateManyWithoutWalletNestedInput
  }

  export type walletUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    balancePesos?: IntFieldUpdateOperationsInput | number
    balanceDollars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TargetUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    progress?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    dateTarget?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TargetUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    progress?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    dateTarget?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TargetUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    progress?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: StringFieldUpdateOperationsInput | string
    dateTarget?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvestmentCreateManyPortfolioInput = {
    id?: string
    amountInvested: number
    financialInstrumentId?: string | null
    stockSymbol?: string | null
  }

  export type InvestmentUpdateWithoutPortfolioInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountInvested?: IntFieldUpdateOperationsInput | number
    stock?: StockUpdateOneWithoutInvestmentNestedInput
    FinancialInstrument?: FinancialInstrumentUpdateOneWithoutInvestmentsNestedInput
  }

  export type InvestmentUncheckedUpdateWithoutPortfolioInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountInvested?: IntFieldUpdateOperationsInput | number
    financialInstrumentId?: NullableStringFieldUpdateOperationsInput | string | null
    stockSymbol?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvestmentUncheckedUpdateManyWithoutPortfolioInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountInvested?: IntFieldUpdateOperationsInput | number
    financialInstrumentId?: NullableStringFieldUpdateOperationsInput | string | null
    stockSymbol?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvestmentCreateManyFinancialInstrumentInput = {
    id?: string
    amountInvested: number
    portfolioId: string
    stockSymbol?: string | null
  }

  export type InvestmentUpdateWithoutFinancialInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountInvested?: IntFieldUpdateOperationsInput | number
    stock?: StockUpdateOneWithoutInvestmentNestedInput
    portfolio?: InvestmentPortfolioUpdateOneWithoutInvestmentsNestedInput
  }

  export type InvestmentUncheckedUpdateWithoutFinancialInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountInvested?: IntFieldUpdateOperationsInput | number
    portfolioId?: StringFieldUpdateOperationsInput | string
    stockSymbol?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvestmentUncheckedUpdateManyWithoutFinancialInstrumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountInvested?: IntFieldUpdateOperationsInput | number
    portfolioId?: StringFieldUpdateOperationsInput | string
    stockSymbol?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentCreateManyNewsInput = {
    id?: string
    content: string
    dateComment: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type CommentUpdateWithoutNewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    dateComment?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutNewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    dateComment?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUncheckedUpdateManyWithoutNewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    dateComment?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WalletTransactionCreateManyWalletInput = {
    id?: string
    type: $Enums.TransactionType
    amount: number
    currency: $Enums.CurrencyType
    description?: string | null
    createdAt?: Date | string
  }

  export type WalletTransactionUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyTypeFieldUpdateOperationsInput | $Enums.CurrencyType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletTransactionUncheckedUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyTypeFieldUpdateOperationsInput | $Enums.CurrencyType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletTransactionUncheckedUpdateManyWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumTransactionTypeFieldUpdateOperationsInput | $Enums.TransactionType
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyTypeFieldUpdateOperationsInput | $Enums.CurrencyType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvestmentCreateManyStockInput = {
    id?: string
    amountInvested: number
    portfolioId: string
    financialInstrumentId?: string | null
  }

  export type InvestmentUpdateWithoutStockInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountInvested?: IntFieldUpdateOperationsInput | number
    portfolio?: InvestmentPortfolioUpdateOneWithoutInvestmentsNestedInput
    FinancialInstrument?: FinancialInstrumentUpdateOneWithoutInvestmentsNestedInput
  }

  export type InvestmentUncheckedUpdateWithoutStockInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountInvested?: IntFieldUpdateOperationsInput | number
    portfolioId?: StringFieldUpdateOperationsInput | string
    financialInstrumentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvestmentUncheckedUpdateManyWithoutStockInput = {
    id?: StringFieldUpdateOperationsInput | string
    amountInvested?: IntFieldUpdateOperationsInput | number
    portfolioId?: StringFieldUpdateOperationsInput | string
    financialInstrumentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StockCreateManyPriceInput = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    volumeId: number
    week52Id: number
    dividendId: number
    earningsId: number
  }

  export type StockUpdateWithoutPriceInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dividend?: DividendUpdateOneRequiredWithoutStockNestedInput
    earnings?: EarningsUpdateOneRequiredWithoutStockNestedInput
    volume?: VolumeUpdateOneRequiredWithoutStockNestedInput
    week52?: Week52UpdateOneRequiredWithoutStockNestedInput
    Investment?: InvestmentUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateWithoutPriceInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    volumeId?: IntFieldUpdateOperationsInput | number
    week52Id?: IntFieldUpdateOperationsInput | number
    dividendId?: IntFieldUpdateOperationsInput | number
    earningsId?: IntFieldUpdateOperationsInput | number
    Investment?: InvestmentUncheckedUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateManyWithoutPriceInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    volumeId?: IntFieldUpdateOperationsInput | number
    week52Id?: IntFieldUpdateOperationsInput | number
    dividendId?: IntFieldUpdateOperationsInput | number
    earningsId?: IntFieldUpdateOperationsInput | number
  }

  export type StockCreateManyVolumeInput = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    priceId: number
    week52Id: number
    dividendId: number
    earningsId: number
  }

  export type StockUpdateWithoutVolumeInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dividend?: DividendUpdateOneRequiredWithoutStockNestedInput
    earnings?: EarningsUpdateOneRequiredWithoutStockNestedInput
    price?: PriceUpdateOneRequiredWithoutStockNestedInput
    week52?: Week52UpdateOneRequiredWithoutStockNestedInput
    Investment?: InvestmentUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateWithoutVolumeInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    priceId?: IntFieldUpdateOperationsInput | number
    week52Id?: IntFieldUpdateOperationsInput | number
    dividendId?: IntFieldUpdateOperationsInput | number
    earningsId?: IntFieldUpdateOperationsInput | number
    Investment?: InvestmentUncheckedUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateManyWithoutVolumeInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    priceId?: IntFieldUpdateOperationsInput | number
    week52Id?: IntFieldUpdateOperationsInput | number
    dividendId?: IntFieldUpdateOperationsInput | number
    earningsId?: IntFieldUpdateOperationsInput | number
  }

  export type StockCreateManyWeek52Input = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    priceId: number
    volumeId: number
    dividendId: number
    earningsId: number
  }

  export type StockUpdateWithoutWeek52Input = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dividend?: DividendUpdateOneRequiredWithoutStockNestedInput
    earnings?: EarningsUpdateOneRequiredWithoutStockNestedInput
    price?: PriceUpdateOneRequiredWithoutStockNestedInput
    volume?: VolumeUpdateOneRequiredWithoutStockNestedInput
    Investment?: InvestmentUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateWithoutWeek52Input = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    priceId?: IntFieldUpdateOperationsInput | number
    volumeId?: IntFieldUpdateOperationsInput | number
    dividendId?: IntFieldUpdateOperationsInput | number
    earningsId?: IntFieldUpdateOperationsInput | number
    Investment?: InvestmentUncheckedUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateManyWithoutWeek52Input = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    priceId?: IntFieldUpdateOperationsInput | number
    volumeId?: IntFieldUpdateOperationsInput | number
    dividendId?: IntFieldUpdateOperationsInput | number
    earningsId?: IntFieldUpdateOperationsInput | number
  }

  export type StockCreateManyDividendInput = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    priceId: number
    volumeId: number
    week52Id: number
    earningsId: number
  }

  export type StockUpdateWithoutDividendInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    earnings?: EarningsUpdateOneRequiredWithoutStockNestedInput
    price?: PriceUpdateOneRequiredWithoutStockNestedInput
    volume?: VolumeUpdateOneRequiredWithoutStockNestedInput
    week52?: Week52UpdateOneRequiredWithoutStockNestedInput
    Investment?: InvestmentUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateWithoutDividendInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    priceId?: IntFieldUpdateOperationsInput | number
    volumeId?: IntFieldUpdateOperationsInput | number
    week52Id?: IntFieldUpdateOperationsInput | number
    earningsId?: IntFieldUpdateOperationsInput | number
    Investment?: InvestmentUncheckedUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateManyWithoutDividendInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    priceId?: IntFieldUpdateOperationsInput | number
    volumeId?: IntFieldUpdateOperationsInput | number
    week52Id?: IntFieldUpdateOperationsInput | number
    earningsId?: IntFieldUpdateOperationsInput | number
  }

  export type StockCreateManyEarningsInput = {
    symbol: string
    name: string
    typeDisp: string
    currency: string
    market: string
    marketCap: number
    createdAt?: Date | string
    updatedAt?: Date | string
    id?: number
    priceId: number
    volumeId: number
    week52Id: number
    dividendId: number
  }

  export type StockUpdateWithoutEarningsInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dividend?: DividendUpdateOneRequiredWithoutStockNestedInput
    price?: PriceUpdateOneRequiredWithoutStockNestedInput
    volume?: VolumeUpdateOneRequiredWithoutStockNestedInput
    week52?: Week52UpdateOneRequiredWithoutStockNestedInput
    Investment?: InvestmentUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateWithoutEarningsInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    priceId?: IntFieldUpdateOperationsInput | number
    volumeId?: IntFieldUpdateOperationsInput | number
    week52Id?: IntFieldUpdateOperationsInput | number
    dividendId?: IntFieldUpdateOperationsInput | number
    Investment?: InvestmentUncheckedUpdateManyWithoutStockNestedInput
  }

  export type StockUncheckedUpdateManyWithoutEarningsInput = {
    symbol?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    typeDisp?: StringFieldUpdateOperationsInput | string
    currency?: StringFieldUpdateOperationsInput | string
    market?: StringFieldUpdateOperationsInput | string
    marketCap?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    priceId?: IntFieldUpdateOperationsInput | number
    volumeId?: IntFieldUpdateOperationsInput | number
    week52Id?: IntFieldUpdateOperationsInput | number
    dividendId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}